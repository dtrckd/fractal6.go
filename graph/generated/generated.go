// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"zerogov/fractal6.go/graph/model"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	Add_isOwner            func(ctx context.Context, obj interface{}, next graphql.Resolver, u *string) (res interface{}, err error)
	Alter_RO               func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Alter_hasRole          func(ctx context.Context, obj interface{}, next graphql.Resolver, n []string, u *string, a *int) (res interface{}, err error)
	Alter_hasRoot          func(ctx context.Context, obj interface{}, next graphql.Resolver, n []string) (res interface{}, err error)
	Alter_maxLength        func(ctx context.Context, obj interface{}, next graphql.Resolver, f string, n int) (res interface{}, err error)
	Alter_minLength        func(ctx context.Context, obj interface{}, next graphql.Resolver, f string, n int) (res interface{}, err error)
	Alter_toLower          func(ctx context.Context, obj interface{}, next graphql.Resolver, f string) (res interface{}, err error)
	Alter_unique           func(ctx context.Context, obj interface{}, next graphql.Resolver, f string, s *string) (res interface{}, err error)
	Auth                   func(ctx context.Context, obj interface{}, next graphql.Resolver, query *model.AuthRule, add *model.AuthRule, update *model.AuthRule, delete *model.AuthRule) (res interface{}, err error)
	Cascade                func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Count                  func(ctx context.Context, obj interface{}, next graphql.Resolver, f string) (res interface{}, err error)
	Custom                 func(ctx context.Context, obj interface{}, next graphql.Resolver, http *model.CustomHTTP) (res interface{}, err error)
	Dgraph                 func(ctx context.Context, obj interface{}, next graphql.Resolver, typeArg *string, pred *string) (res interface{}, err error)
	HasInverse             func(ctx context.Context, obj interface{}, next graphql.Resolver, field string) (res interface{}, err error)
	Hidden                 func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	HidePrivate            func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_addLabel          func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_addLabelPost      func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_addNode           func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_addNodePost       func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_addTension        func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_addTensionPost    func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_updateComment     func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_updateCommentPost func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_updateLabel       func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_updateLabelPost   func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_updateNode        func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_updateNodePost    func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_updateTension     func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Hook_updateTensionPost func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Id                     func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	IsAuth                 func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Meta_getNodeStats      func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Patch_RO               func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Patch_hasRole          func(ctx context.Context, obj interface{}, next graphql.Resolver, n []string, u *string, a *int) (res interface{}, err error)
	Patch_isOwner          func(ctx context.Context, obj interface{}, next graphql.Resolver, u *string) (res interface{}, err error)
	Remote                 func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Search                 func(ctx context.Context, obj interface{}, next graphql.Resolver, by []model.DgraphIndex) (res interface{}, err error)
	Secret                 func(ctx context.Context, obj interface{}, next graphql.Resolver, field string, pred *string) (res interface{}, err error)
	WithSubscription       func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	AddBlobPayload struct {
		Blob    func(childComplexity int, filter *model.BlobFilter, order *model.BlobOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	AddCommentPayload struct {
		Comment func(childComplexity int, filter *model.CommentFilter, order *model.CommentOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	AddEventPayload struct {
		Event   func(childComplexity int, filter *model.EventFilter, order *model.EventOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	AddLabelPayload struct {
		Label   func(childComplexity int, filter *model.LabelFilter, order *model.LabelOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	AddMandatePayload struct {
		Mandate func(childComplexity int, filter *model.MandateFilter, order *model.MandateOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	AddNodeCharacPayload struct {
		NodeCharac func(childComplexity int, filter *model.NodeCharacFilter, first *int, offset *int) int
		NumUids    func(childComplexity int) int
	}

	AddNodeFragmentPayload struct {
		NodeFragment func(childComplexity int, filter *model.NodeFragmentFilter, order *model.NodeFragmentOrder, first *int, offset *int) int
		NumUids      func(childComplexity int) int
	}

	AddNodePayload struct {
		Node    func(childComplexity int, filter *model.NodeFilter, order *model.NodeOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	AddNodeStatsPayload struct {
		NodeStats func(childComplexity int, order *model.NodeStatsOrder, first *int, offset *int) int
		NumUids   func(childComplexity int) int
	}

	AddSharedNodePayload struct {
		NumUids    func(childComplexity int) int
		SharedNode func(childComplexity int, order *model.SharedNodeOrder, first *int, offset *int) int
	}

	AddTensionPayload struct {
		NumUids func(childComplexity int) int
		Tension func(childComplexity int, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) int
	}

	AddUserPayload struct {
		NumUids func(childComplexity int) int
		User    func(childComplexity int, filter *model.UserFilter, order *model.UserOrder, first *int, offset *int) int
	}

	AddUserRightsPayload struct {
		NumUids    func(childComplexity int) int
		UserRights func(childComplexity int, order *model.UserRightsOrder, first *int, offset *int) int
	}

	Blob struct {
		ArchivedFlag func(childComplexity int) int
		BlobType     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int, filter *model.UserFilter) int
		ID           func(childComplexity int) int
		Md           func(childComplexity int) int
		Message      func(childComplexity int) int
		Node         func(childComplexity int, filter *model.NodeFragmentFilter) int
		PushedFlag   func(childComplexity int) int
		Tension      func(childComplexity int, filter *model.TensionFilter) int
		UpdatedAt    func(childComplexity int) int
	}

	Comment struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int, filter *model.UserFilter) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	DeleteBlobPayload struct {
		Blob    func(childComplexity int, filter *model.BlobFilter, order *model.BlobOrder, first *int, offset *int) int
		Msg     func(childComplexity int) int
		NumUids func(childComplexity int) int
	}

	DeleteCommentPayload struct {
		Comment func(childComplexity int, filter *model.CommentFilter, order *model.CommentOrder, first *int, offset *int) int
		Msg     func(childComplexity int) int
		NumUids func(childComplexity int) int
	}

	DeleteEventPayload struct {
		Event   func(childComplexity int, filter *model.EventFilter, order *model.EventOrder, first *int, offset *int) int
		Msg     func(childComplexity int) int
		NumUids func(childComplexity int) int
	}

	DeleteLabelPayload struct {
		Label   func(childComplexity int, filter *model.LabelFilter, order *model.LabelOrder, first *int, offset *int) int
		Msg     func(childComplexity int) int
		NumUids func(childComplexity int) int
	}

	DeleteMandatePayload struct {
		Mandate func(childComplexity int, filter *model.MandateFilter, order *model.MandateOrder, first *int, offset *int) int
		Msg     func(childComplexity int) int
		NumUids func(childComplexity int) int
	}

	DeleteNodeCharacPayload struct {
		Msg        func(childComplexity int) int
		NodeCharac func(childComplexity int, filter *model.NodeCharacFilter, first *int, offset *int) int
		NumUids    func(childComplexity int) int
	}

	DeleteNodeFragmentPayload struct {
		Msg          func(childComplexity int) int
		NodeFragment func(childComplexity int, filter *model.NodeFragmentFilter, order *model.NodeFragmentOrder, first *int, offset *int) int
		NumUids      func(childComplexity int) int
	}

	DeleteNodePayload struct {
		Msg     func(childComplexity int) int
		Node    func(childComplexity int, filter *model.NodeFilter, order *model.NodeOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	DeletePostPayload struct {
		Msg     func(childComplexity int) int
		NumUids func(childComplexity int) int
		Post    func(childComplexity int, filter *model.PostFilter, order *model.PostOrder, first *int, offset *int) int
	}

	DeleteTensionPayload struct {
		Msg     func(childComplexity int) int
		NumUids func(childComplexity int) int
		Tension func(childComplexity int, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) int
	}

	DeleteUserPayload struct {
		Msg     func(childComplexity int) int
		NumUids func(childComplexity int) int
		User    func(childComplexity int, filter *model.UserFilter, order *model.UserOrder, first *int, offset *int) int
	}

	Event struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int, filter *model.UserFilter) int
		EventType func(childComplexity int) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		New       func(childComplexity int) int
		Old       func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Label struct {
		Color       func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Nodes       func(childComplexity int, filter *model.NodeFilter, order *model.NodeOrder, first *int, offset *int) int
		Rootnameid  func(childComplexity int) int
		Tensions    func(childComplexity int, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) int
	}

	Mandate struct {
		Domains          func(childComplexity int) int
		ID               func(childComplexity int) int
		Policies         func(childComplexity int) int
		Purpose          func(childComplexity int) int
		Responsabilities func(childComplexity int) int
	}

	Mutation struct {
		AddBlob            func(childComplexity int, input []*model.AddBlobInput) int
		AddComment         func(childComplexity int, input []*model.AddCommentInput) int
		AddEvent           func(childComplexity int, input []*model.AddEventInput) int
		AddLabel           func(childComplexity int, input []*model.AddLabelInput) int
		AddMandate         func(childComplexity int, input []*model.AddMandateInput) int
		AddNode            func(childComplexity int, input []*model.AddNodeInput) int
		AddNodeCharac      func(childComplexity int, input []*model.AddNodeCharacInput) int
		AddNodeFragment    func(childComplexity int, input []*model.AddNodeFragmentInput) int
		AddNodeStats       func(childComplexity int, input []*model.AddNodeStatsInput) int
		AddSharedNode      func(childComplexity int, input []*model.AddSharedNodeInput) int
		AddTension         func(childComplexity int, input []*model.AddTensionInput) int
		AddUser            func(childComplexity int, input []*model.AddUserInput) int
		AddUserRights      func(childComplexity int, input []*model.AddUserRightsInput) int
		DeleteBlob         func(childComplexity int, filter model.BlobFilter) int
		DeleteComment      func(childComplexity int, filter model.CommentFilter) int
		DeleteEvent        func(childComplexity int, filter model.EventFilter) int
		DeleteLabel        func(childComplexity int, filter model.LabelFilter) int
		DeleteMandate      func(childComplexity int, filter model.MandateFilter) int
		DeleteNode         func(childComplexity int, filter model.NodeFilter) int
		DeleteNodeCharac   func(childComplexity int, filter model.NodeCharacFilter) int
		DeleteNodeFragment func(childComplexity int, filter model.NodeFragmentFilter) int
		DeletePost         func(childComplexity int, filter model.PostFilter) int
		DeleteTension      func(childComplexity int, filter model.TensionFilter) int
		DeleteUser         func(childComplexity int, filter model.UserFilter) int
		UpdateBlob         func(childComplexity int, input model.UpdateBlobInput) int
		UpdateComment      func(childComplexity int, input model.UpdateCommentInput) int
		UpdateEvent        func(childComplexity int, input model.UpdateEventInput) int
		UpdateLabel        func(childComplexity int, input model.UpdateLabelInput) int
		UpdateMandate      func(childComplexity int, input model.UpdateMandateInput) int
		UpdateNode         func(childComplexity int, input model.UpdateNodeInput) int
		UpdateNodeCharac   func(childComplexity int, input model.UpdateNodeCharacInput) int
		UpdateNodeFragment func(childComplexity int, input model.UpdateNodeFragmentInput) int
		UpdatePost         func(childComplexity int, input model.UpdatePostInput) int
		UpdateTension      func(childComplexity int, input model.UpdateTensionInput) int
		UpdateUser         func(childComplexity int, input model.UpdateUserInput) int
	}

	Node struct {
		About        func(childComplexity int) int
		Charac       func(childComplexity int, filter *model.NodeCharacFilter) int
		Children     func(childComplexity int, filter *model.NodeFilter, order *model.NodeOrder, first *int, offset *int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int, filter *model.UserFilter) int
		Docs         func(childComplexity int, filter *model.BlobFilter, order *model.BlobOrder, first *int, offset *int) int
		FirstLink    func(childComplexity int, filter *model.UserFilter) int
		ID           func(childComplexity int) int
		IsArchived   func(childComplexity int) int
		IsPersonal   func(childComplexity int) int
		IsPrivate    func(childComplexity int) int
		IsRoot       func(childComplexity int) int
		Labels       func(childComplexity int, filter *model.LabelFilter, order *model.LabelOrder, first *int, offset *int) int
		Mandate      func(childComplexity int, filter *model.MandateFilter) int
		NChildren    func(childComplexity int) int
		NTensionsIn  func(childComplexity int) int
		NTensionsOut func(childComplexity int) int
		Name         func(childComplexity int) int
		Nameid       func(childComplexity int) int
		Parent       func(childComplexity int, filter *model.NodeFilter) int
		RoleType     func(childComplexity int) int
		Rootnameid   func(childComplexity int) int
		SecondLink   func(childComplexity int, filter *model.UserFilter) int
		Shared       func(childComplexity int) int
		Skills       func(childComplexity int) int
		Source       func(childComplexity int, filter *model.BlobFilter) int
		Stats        func(childComplexity int) int
		TensionsIn   func(childComplexity int, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) int
		TensionsOut  func(childComplexity int, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) int
		Type         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	NodeCharac struct {
		ID          func(childComplexity int) int
		Mode        func(childComplexity int) int
		UserCanJoin func(childComplexity int) int
	}

	NodeFragment struct {
		About      func(childComplexity int) int
		Charac     func(childComplexity int, filter *model.NodeCharacFilter) int
		Children   func(childComplexity int, filter *model.NodeFragmentFilter, order *model.NodeFragmentOrder, first *int, offset *int) int
		FirstLink  func(childComplexity int) int
		ID         func(childComplexity int) int
		IsPrivate  func(childComplexity int) int
		Mandate    func(childComplexity int, filter *model.MandateFilter) int
		Name       func(childComplexity int) int
		Nameid     func(childComplexity int) int
		RoleType   func(childComplexity int) int
		SecondLink func(childComplexity int) int
		Skills     func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	NodeStats struct {
		NCircle func(childComplexity int) int
		NGuest  func(childComplexity int) int
		NMember func(childComplexity int) int
		NRole   func(childComplexity int) int
	}

	Post struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int, filter *model.UserFilter) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Query struct {
		GetBlob           func(childComplexity int, id string) int
		GetComment        func(childComplexity int, id string) int
		GetEvent          func(childComplexity int, id string) int
		GetLabel          func(childComplexity int, id string) int
		GetMandate        func(childComplexity int, id string) int
		GetNode           func(childComplexity int, id *string, nameid *string) int
		GetNodeCharac     func(childComplexity int, id string) int
		GetNodeFragment   func(childComplexity int, id string) int
		GetPost           func(childComplexity int, id string) int
		GetTension        func(childComplexity int, id string) int
		GetUser           func(childComplexity int, id *string, username *string) int
		QueryBlob         func(childComplexity int, filter *model.BlobFilter, order *model.BlobOrder, first *int, offset *int) int
		QueryComment      func(childComplexity int, filter *model.CommentFilter, order *model.CommentOrder, first *int, offset *int) int
		QueryEvent        func(childComplexity int, filter *model.EventFilter, order *model.EventOrder, first *int, offset *int) int
		QueryLabel        func(childComplexity int, filter *model.LabelFilter, order *model.LabelOrder, first *int, offset *int) int
		QueryMandate      func(childComplexity int, filter *model.MandateFilter, order *model.MandateOrder, first *int, offset *int) int
		QueryNode         func(childComplexity int, filter *model.NodeFilter, order *model.NodeOrder, first *int, offset *int) int
		QueryNodeCharac   func(childComplexity int, filter *model.NodeCharacFilter, first *int, offset *int) int
		QueryNodeFragment func(childComplexity int, filter *model.NodeFragmentFilter, order *model.NodeFragmentOrder, first *int, offset *int) int
		QueryNodeStats    func(childComplexity int, order *model.NodeStatsOrder, first *int, offset *int) int
		QueryPost         func(childComplexity int, filter *model.PostFilter, order *model.PostOrder, first *int, offset *int) int
		QuerySharedNode   func(childComplexity int, order *model.SharedNodeOrder, first *int, offset *int) int
		QueryTension      func(childComplexity int, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) int
		QueryUser         func(childComplexity int, filter *model.UserFilter, order *model.UserOrder, first *int, offset *int) int
		QueryUserRights   func(childComplexity int, order *model.UserRightsOrder, first *int, offset *int) int
	}

	SharedNode struct {
		NClosedTensions func(childComplexity int) int
		NLabels         func(childComplexity int) int
		NTensions       func(childComplexity int) int
	}

	Tension struct {
		Action     func(childComplexity int) int
		Assignees  func(childComplexity int, filter *model.UserFilter, order *model.UserOrder, first *int, offset *int) int
		Blobs      func(childComplexity int, filter *model.BlobFilter, order *model.BlobOrder, first *int, offset *int) int
		Comments   func(childComplexity int, filter *model.CommentFilter, order *model.CommentOrder, first *int, offset *int) int
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int, filter *model.UserFilter) int
		Emitter    func(childComplexity int, filter *model.NodeFilter) int
		Emitterid  func(childComplexity int) int
		History    func(childComplexity int, filter *model.EventFilter, order *model.EventOrder, first *int, offset *int) int
		ID         func(childComplexity int) int
		Labels     func(childComplexity int, filter *model.LabelFilter, order *model.LabelOrder, first *int, offset *int) int
		Message    func(childComplexity int) int
		NBlobs     func(childComplexity int) int
		NComments  func(childComplexity int) int
		Nth        func(childComplexity int) int
		Receiver   func(childComplexity int, filter *model.NodeFilter) int
		Receiverid func(childComplexity int) int
		Status     func(childComplexity int) int
		Title      func(childComplexity int) int
		Type       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	UpdateBlobPayload struct {
		Blob    func(childComplexity int, filter *model.BlobFilter, order *model.BlobOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	UpdateCommentPayload struct {
		Comment func(childComplexity int, filter *model.CommentFilter, order *model.CommentOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	UpdateEventPayload struct {
		Event   func(childComplexity int, filter *model.EventFilter, order *model.EventOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	UpdateLabelPayload struct {
		Label   func(childComplexity int, filter *model.LabelFilter, order *model.LabelOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	UpdateMandatePayload struct {
		Mandate func(childComplexity int, filter *model.MandateFilter, order *model.MandateOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	UpdateNodeCharacPayload struct {
		NodeCharac func(childComplexity int, filter *model.NodeCharacFilter, first *int, offset *int) int
		NumUids    func(childComplexity int) int
	}

	UpdateNodeFragmentPayload struct {
		NodeFragment func(childComplexity int, filter *model.NodeFragmentFilter, order *model.NodeFragmentOrder, first *int, offset *int) int
		NumUids      func(childComplexity int) int
	}

	UpdateNodePayload struct {
		Node    func(childComplexity int, filter *model.NodeFilter, order *model.NodeOrder, first *int, offset *int) int
		NumUids func(childComplexity int) int
	}

	UpdatePostPayload struct {
		NumUids func(childComplexity int) int
		Post    func(childComplexity int, filter *model.PostFilter, order *model.PostOrder, first *int, offset *int) int
	}

	UpdateTensionPayload struct {
		NumUids func(childComplexity int) int
		Tension func(childComplexity int, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) int
	}

	UpdateUserPayload struct {
		NumUids func(childComplexity int) int
		User    func(childComplexity int, filter *model.UserFilter, order *model.UserOrder, first *int, offset *int) int
	}

	User struct {
		BackedRoles      func(childComplexity int, filter *model.NodeFilter, order *model.NodeOrder, first *int, offset *int) int
		Bio              func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Email            func(childComplexity int) int
		EmailHash        func(childComplexity int) int
		EmailValidated   func(childComplexity int) int
		ID               func(childComplexity int) int
		LastAck          func(childComplexity int) int
		Name             func(childComplexity int) int
		Password         func(childComplexity int) int
		Rights           func(childComplexity int) int
		Roles            func(childComplexity int, filter *model.NodeFilter, order *model.NodeOrder, first *int, offset *int) int
		TensionsAssigned func(childComplexity int, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) int
		TensionsCreated  func(childComplexity int, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) int
		Username         func(childComplexity int) int
		Utc              func(childComplexity int) int
	}

	UserRights struct {
		CanCreateRoot func(childComplexity int) int
		CanLogin      func(childComplexity int) int
		MaxPublicOrga func(childComplexity int) int
	}
}

type MutationResolver interface {
	AddNode(ctx context.Context, input []*model.AddNodeInput) (*model.AddNodePayload, error)
	UpdateNode(ctx context.Context, input model.UpdateNodeInput) (*model.UpdateNodePayload, error)
	DeleteNode(ctx context.Context, filter model.NodeFilter) (*model.DeleteNodePayload, error)
	AddSharedNode(ctx context.Context, input []*model.AddSharedNodeInput) (*model.AddSharedNodePayload, error)
	AddNodeFragment(ctx context.Context, input []*model.AddNodeFragmentInput) (*model.AddNodeFragmentPayload, error)
	UpdateNodeFragment(ctx context.Context, input model.UpdateNodeFragmentInput) (*model.UpdateNodeFragmentPayload, error)
	DeleteNodeFragment(ctx context.Context, filter model.NodeFragmentFilter) (*model.DeleteNodeFragmentPayload, error)
	AddNodeCharac(ctx context.Context, input []*model.AddNodeCharacInput) (*model.AddNodeCharacPayload, error)
	UpdateNodeCharac(ctx context.Context, input model.UpdateNodeCharacInput) (*model.UpdateNodeCharacPayload, error)
	DeleteNodeCharac(ctx context.Context, filter model.NodeCharacFilter) (*model.DeleteNodeCharacPayload, error)
	AddNodeStats(ctx context.Context, input []*model.AddNodeStatsInput) (*model.AddNodeStatsPayload, error)
	UpdatePost(ctx context.Context, input model.UpdatePostInput) (*model.UpdatePostPayload, error)
	DeletePost(ctx context.Context, filter model.PostFilter) (*model.DeletePostPayload, error)
	AddTension(ctx context.Context, input []*model.AddTensionInput) (*model.AddTensionPayload, error)
	UpdateTension(ctx context.Context, input model.UpdateTensionInput) (*model.UpdateTensionPayload, error)
	DeleteTension(ctx context.Context, filter model.TensionFilter) (*model.DeleteTensionPayload, error)
	AddLabel(ctx context.Context, input []*model.AddLabelInput) (*model.AddLabelPayload, error)
	UpdateLabel(ctx context.Context, input model.UpdateLabelInput) (*model.UpdateLabelPayload, error)
	DeleteLabel(ctx context.Context, filter model.LabelFilter) (*model.DeleteLabelPayload, error)
	AddComment(ctx context.Context, input []*model.AddCommentInput) (*model.AddCommentPayload, error)
	UpdateComment(ctx context.Context, input model.UpdateCommentInput) (*model.UpdateCommentPayload, error)
	DeleteComment(ctx context.Context, filter model.CommentFilter) (*model.DeleteCommentPayload, error)
	AddBlob(ctx context.Context, input []*model.AddBlobInput) (*model.AddBlobPayload, error)
	UpdateBlob(ctx context.Context, input model.UpdateBlobInput) (*model.UpdateBlobPayload, error)
	DeleteBlob(ctx context.Context, filter model.BlobFilter) (*model.DeleteBlobPayload, error)
	AddEvent(ctx context.Context, input []*model.AddEventInput) (*model.AddEventPayload, error)
	UpdateEvent(ctx context.Context, input model.UpdateEventInput) (*model.UpdateEventPayload, error)
	DeleteEvent(ctx context.Context, filter model.EventFilter) (*model.DeleteEventPayload, error)
	AddMandate(ctx context.Context, input []*model.AddMandateInput) (*model.AddMandatePayload, error)
	UpdateMandate(ctx context.Context, input model.UpdateMandateInput) (*model.UpdateMandatePayload, error)
	DeleteMandate(ctx context.Context, filter model.MandateFilter) (*model.DeleteMandatePayload, error)
	AddUser(ctx context.Context, input []*model.AddUserInput) (*model.AddUserPayload, error)
	UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.UpdateUserPayload, error)
	DeleteUser(ctx context.Context, filter model.UserFilter) (*model.DeleteUserPayload, error)
	AddUserRights(ctx context.Context, input []*model.AddUserRightsInput) (*model.AddUserRightsPayload, error)
}
type QueryResolver interface {
	GetNode(ctx context.Context, id *string, nameid *string) (*model.Node, error)
	QueryNode(ctx context.Context, filter *model.NodeFilter, order *model.NodeOrder, first *int, offset *int) ([]*model.Node, error)
	QuerySharedNode(ctx context.Context, order *model.SharedNodeOrder, first *int, offset *int) ([]*model.SharedNode, error)
	GetNodeFragment(ctx context.Context, id string) (*model.NodeFragment, error)
	QueryNodeFragment(ctx context.Context, filter *model.NodeFragmentFilter, order *model.NodeFragmentOrder, first *int, offset *int) ([]*model.NodeFragment, error)
	GetNodeCharac(ctx context.Context, id string) (*model.NodeCharac, error)
	QueryNodeCharac(ctx context.Context, filter *model.NodeCharacFilter, first *int, offset *int) ([]*model.NodeCharac, error)
	QueryNodeStats(ctx context.Context, order *model.NodeStatsOrder, first *int, offset *int) ([]*model.NodeStats, error)
	GetPost(ctx context.Context, id string) (*model.Post, error)
	QueryPost(ctx context.Context, filter *model.PostFilter, order *model.PostOrder, first *int, offset *int) ([]*model.Post, error)
	GetTension(ctx context.Context, id string) (*model.Tension, error)
	QueryTension(ctx context.Context, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) ([]*model.Tension, error)
	GetLabel(ctx context.Context, id string) (*model.Label, error)
	QueryLabel(ctx context.Context, filter *model.LabelFilter, order *model.LabelOrder, first *int, offset *int) ([]*model.Label, error)
	GetComment(ctx context.Context, id string) (*model.Comment, error)
	QueryComment(ctx context.Context, filter *model.CommentFilter, order *model.CommentOrder, first *int, offset *int) ([]*model.Comment, error)
	GetBlob(ctx context.Context, id string) (*model.Blob, error)
	QueryBlob(ctx context.Context, filter *model.BlobFilter, order *model.BlobOrder, first *int, offset *int) ([]*model.Blob, error)
	GetEvent(ctx context.Context, id string) (*model.Event, error)
	QueryEvent(ctx context.Context, filter *model.EventFilter, order *model.EventOrder, first *int, offset *int) ([]*model.Event, error)
	GetMandate(ctx context.Context, id string) (*model.Mandate, error)
	QueryMandate(ctx context.Context, filter *model.MandateFilter, order *model.MandateOrder, first *int, offset *int) ([]*model.Mandate, error)
	GetUser(ctx context.Context, id *string, username *string) (*model.User, error)
	QueryUser(ctx context.Context, filter *model.UserFilter, order *model.UserOrder, first *int, offset *int) ([]*model.User, error)
	QueryUserRights(ctx context.Context, order *model.UserRightsOrder, first *int, offset *int) ([]*model.UserRights, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AddBlobPayload.blob":
		if e.complexity.AddBlobPayload.Blob == nil {
			break
		}

		args, err := ec.field_AddBlobPayload_blob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddBlobPayload.Blob(childComplexity, args["filter"].(*model.BlobFilter), args["order"].(*model.BlobOrder), args["first"].(*int), args["offset"].(*int)), true

	case "AddBlobPayload.numUids":
		if e.complexity.AddBlobPayload.NumUids == nil {
			break
		}

		return e.complexity.AddBlobPayload.NumUids(childComplexity), true

	case "AddCommentPayload.comment":
		if e.complexity.AddCommentPayload.Comment == nil {
			break
		}

		args, err := ec.field_AddCommentPayload_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddCommentPayload.Comment(childComplexity, args["filter"].(*model.CommentFilter), args["order"].(*model.CommentOrder), args["first"].(*int), args["offset"].(*int)), true

	case "AddCommentPayload.numUids":
		if e.complexity.AddCommentPayload.NumUids == nil {
			break
		}

		return e.complexity.AddCommentPayload.NumUids(childComplexity), true

	case "AddEventPayload.event":
		if e.complexity.AddEventPayload.Event == nil {
			break
		}

		args, err := ec.field_AddEventPayload_event_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddEventPayload.Event(childComplexity, args["filter"].(*model.EventFilter), args["order"].(*model.EventOrder), args["first"].(*int), args["offset"].(*int)), true

	case "AddEventPayload.numUids":
		if e.complexity.AddEventPayload.NumUids == nil {
			break
		}

		return e.complexity.AddEventPayload.NumUids(childComplexity), true

	case "AddLabelPayload.label":
		if e.complexity.AddLabelPayload.Label == nil {
			break
		}

		args, err := ec.field_AddLabelPayload_label_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddLabelPayload.Label(childComplexity, args["filter"].(*model.LabelFilter), args["order"].(*model.LabelOrder), args["first"].(*int), args["offset"].(*int)), true

	case "AddLabelPayload.numUids":
		if e.complexity.AddLabelPayload.NumUids == nil {
			break
		}

		return e.complexity.AddLabelPayload.NumUids(childComplexity), true

	case "AddMandatePayload.mandate":
		if e.complexity.AddMandatePayload.Mandate == nil {
			break
		}

		args, err := ec.field_AddMandatePayload_mandate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddMandatePayload.Mandate(childComplexity, args["filter"].(*model.MandateFilter), args["order"].(*model.MandateOrder), args["first"].(*int), args["offset"].(*int)), true

	case "AddMandatePayload.numUids":
		if e.complexity.AddMandatePayload.NumUids == nil {
			break
		}

		return e.complexity.AddMandatePayload.NumUids(childComplexity), true

	case "AddNodeCharacPayload.nodeCharac":
		if e.complexity.AddNodeCharacPayload.NodeCharac == nil {
			break
		}

		args, err := ec.field_AddNodeCharacPayload_nodeCharac_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddNodeCharacPayload.NodeCharac(childComplexity, args["filter"].(*model.NodeCharacFilter), args["first"].(*int), args["offset"].(*int)), true

	case "AddNodeCharacPayload.numUids":
		if e.complexity.AddNodeCharacPayload.NumUids == nil {
			break
		}

		return e.complexity.AddNodeCharacPayload.NumUids(childComplexity), true

	case "AddNodeFragmentPayload.nodeFragment":
		if e.complexity.AddNodeFragmentPayload.NodeFragment == nil {
			break
		}

		args, err := ec.field_AddNodeFragmentPayload_nodeFragment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddNodeFragmentPayload.NodeFragment(childComplexity, args["filter"].(*model.NodeFragmentFilter), args["order"].(*model.NodeFragmentOrder), args["first"].(*int), args["offset"].(*int)), true

	case "AddNodeFragmentPayload.numUids":
		if e.complexity.AddNodeFragmentPayload.NumUids == nil {
			break
		}

		return e.complexity.AddNodeFragmentPayload.NumUids(childComplexity), true

	case "AddNodePayload.node":
		if e.complexity.AddNodePayload.Node == nil {
			break
		}

		args, err := ec.field_AddNodePayload_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddNodePayload.Node(childComplexity, args["filter"].(*model.NodeFilter), args["order"].(*model.NodeOrder), args["first"].(*int), args["offset"].(*int)), true

	case "AddNodePayload.numUids":
		if e.complexity.AddNodePayload.NumUids == nil {
			break
		}

		return e.complexity.AddNodePayload.NumUids(childComplexity), true

	case "AddNodeStatsPayload.nodeStats":
		if e.complexity.AddNodeStatsPayload.NodeStats == nil {
			break
		}

		args, err := ec.field_AddNodeStatsPayload_nodeStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddNodeStatsPayload.NodeStats(childComplexity, args["order"].(*model.NodeStatsOrder), args["first"].(*int), args["offset"].(*int)), true

	case "AddNodeStatsPayload.numUids":
		if e.complexity.AddNodeStatsPayload.NumUids == nil {
			break
		}

		return e.complexity.AddNodeStatsPayload.NumUids(childComplexity), true

	case "AddSharedNodePayload.numUids":
		if e.complexity.AddSharedNodePayload.NumUids == nil {
			break
		}

		return e.complexity.AddSharedNodePayload.NumUids(childComplexity), true

	case "AddSharedNodePayload.sharedNode":
		if e.complexity.AddSharedNodePayload.SharedNode == nil {
			break
		}

		args, err := ec.field_AddSharedNodePayload_sharedNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddSharedNodePayload.SharedNode(childComplexity, args["order"].(*model.SharedNodeOrder), args["first"].(*int), args["offset"].(*int)), true

	case "AddTensionPayload.numUids":
		if e.complexity.AddTensionPayload.NumUids == nil {
			break
		}

		return e.complexity.AddTensionPayload.NumUids(childComplexity), true

	case "AddTensionPayload.tension":
		if e.complexity.AddTensionPayload.Tension == nil {
			break
		}

		args, err := ec.field_AddTensionPayload_tension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddTensionPayload.Tension(childComplexity, args["filter"].(*model.TensionFilter), args["order"].(*model.TensionOrder), args["first"].(*int), args["offset"].(*int)), true

	case "AddUserPayload.numUids":
		if e.complexity.AddUserPayload.NumUids == nil {
			break
		}

		return e.complexity.AddUserPayload.NumUids(childComplexity), true

	case "AddUserPayload.user":
		if e.complexity.AddUserPayload.User == nil {
			break
		}

		args, err := ec.field_AddUserPayload_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddUserPayload.User(childComplexity, args["filter"].(*model.UserFilter), args["order"].(*model.UserOrder), args["first"].(*int), args["offset"].(*int)), true

	case "AddUserRightsPayload.numUids":
		if e.complexity.AddUserRightsPayload.NumUids == nil {
			break
		}

		return e.complexity.AddUserRightsPayload.NumUids(childComplexity), true

	case "AddUserRightsPayload.userRights":
		if e.complexity.AddUserRightsPayload.UserRights == nil {
			break
		}

		args, err := ec.field_AddUserRightsPayload_userRights_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AddUserRightsPayload.UserRights(childComplexity, args["order"].(*model.UserRightsOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Blob.archivedFlag":
		if e.complexity.Blob.ArchivedFlag == nil {
			break
		}

		return e.complexity.Blob.ArchivedFlag(childComplexity), true

	case "Blob.blob_type":
		if e.complexity.Blob.BlobType == nil {
			break
		}

		return e.complexity.Blob.BlobType(childComplexity), true

	case "Blob.createdAt":
		if e.complexity.Blob.CreatedAt == nil {
			break
		}

		return e.complexity.Blob.CreatedAt(childComplexity), true

	case "Blob.createdBy":
		if e.complexity.Blob.CreatedBy == nil {
			break
		}

		args, err := ec.field_Blob_createdBy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Blob.CreatedBy(childComplexity, args["filter"].(*model.UserFilter)), true

	case "Blob.id":
		if e.complexity.Blob.ID == nil {
			break
		}

		return e.complexity.Blob.ID(childComplexity), true

	case "Blob.md":
		if e.complexity.Blob.Md == nil {
			break
		}

		return e.complexity.Blob.Md(childComplexity), true

	case "Blob.message":
		if e.complexity.Blob.Message == nil {
			break
		}

		return e.complexity.Blob.Message(childComplexity), true

	case "Blob.node":
		if e.complexity.Blob.Node == nil {
			break
		}

		args, err := ec.field_Blob_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Blob.Node(childComplexity, args["filter"].(*model.NodeFragmentFilter)), true

	case "Blob.pushedFlag":
		if e.complexity.Blob.PushedFlag == nil {
			break
		}

		return e.complexity.Blob.PushedFlag(childComplexity), true

	case "Blob.tension":
		if e.complexity.Blob.Tension == nil {
			break
		}

		args, err := ec.field_Blob_tension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Blob.Tension(childComplexity, args["filter"].(*model.TensionFilter)), true

	case "Blob.updatedAt":
		if e.complexity.Blob.UpdatedAt == nil {
			break
		}

		return e.complexity.Blob.UpdatedAt(childComplexity), true

	case "Comment.createdAt":
		if e.complexity.Comment.CreatedAt == nil {
			break
		}

		return e.complexity.Comment.CreatedAt(childComplexity), true

	case "Comment.createdBy":
		if e.complexity.Comment.CreatedBy == nil {
			break
		}

		args, err := ec.field_Comment_createdBy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Comment.CreatedBy(childComplexity, args["filter"].(*model.UserFilter)), true

	case "Comment.id":
		if e.complexity.Comment.ID == nil {
			break
		}

		return e.complexity.Comment.ID(childComplexity), true

	case "Comment.message":
		if e.complexity.Comment.Message == nil {
			break
		}

		return e.complexity.Comment.Message(childComplexity), true

	case "Comment.updatedAt":
		if e.complexity.Comment.UpdatedAt == nil {
			break
		}

		return e.complexity.Comment.UpdatedAt(childComplexity), true

	case "DeleteBlobPayload.blob":
		if e.complexity.DeleteBlobPayload.Blob == nil {
			break
		}

		args, err := ec.field_DeleteBlobPayload_blob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeleteBlobPayload.Blob(childComplexity, args["filter"].(*model.BlobFilter), args["order"].(*model.BlobOrder), args["first"].(*int), args["offset"].(*int)), true

	case "DeleteBlobPayload.msg":
		if e.complexity.DeleteBlobPayload.Msg == nil {
			break
		}

		return e.complexity.DeleteBlobPayload.Msg(childComplexity), true

	case "DeleteBlobPayload.numUids":
		if e.complexity.DeleteBlobPayload.NumUids == nil {
			break
		}

		return e.complexity.DeleteBlobPayload.NumUids(childComplexity), true

	case "DeleteCommentPayload.comment":
		if e.complexity.DeleteCommentPayload.Comment == nil {
			break
		}

		args, err := ec.field_DeleteCommentPayload_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeleteCommentPayload.Comment(childComplexity, args["filter"].(*model.CommentFilter), args["order"].(*model.CommentOrder), args["first"].(*int), args["offset"].(*int)), true

	case "DeleteCommentPayload.msg":
		if e.complexity.DeleteCommentPayload.Msg == nil {
			break
		}

		return e.complexity.DeleteCommentPayload.Msg(childComplexity), true

	case "DeleteCommentPayload.numUids":
		if e.complexity.DeleteCommentPayload.NumUids == nil {
			break
		}

		return e.complexity.DeleteCommentPayload.NumUids(childComplexity), true

	case "DeleteEventPayload.event":
		if e.complexity.DeleteEventPayload.Event == nil {
			break
		}

		args, err := ec.field_DeleteEventPayload_event_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeleteEventPayload.Event(childComplexity, args["filter"].(*model.EventFilter), args["order"].(*model.EventOrder), args["first"].(*int), args["offset"].(*int)), true

	case "DeleteEventPayload.msg":
		if e.complexity.DeleteEventPayload.Msg == nil {
			break
		}

		return e.complexity.DeleteEventPayload.Msg(childComplexity), true

	case "DeleteEventPayload.numUids":
		if e.complexity.DeleteEventPayload.NumUids == nil {
			break
		}

		return e.complexity.DeleteEventPayload.NumUids(childComplexity), true

	case "DeleteLabelPayload.label":
		if e.complexity.DeleteLabelPayload.Label == nil {
			break
		}

		args, err := ec.field_DeleteLabelPayload_label_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeleteLabelPayload.Label(childComplexity, args["filter"].(*model.LabelFilter), args["order"].(*model.LabelOrder), args["first"].(*int), args["offset"].(*int)), true

	case "DeleteLabelPayload.msg":
		if e.complexity.DeleteLabelPayload.Msg == nil {
			break
		}

		return e.complexity.DeleteLabelPayload.Msg(childComplexity), true

	case "DeleteLabelPayload.numUids":
		if e.complexity.DeleteLabelPayload.NumUids == nil {
			break
		}

		return e.complexity.DeleteLabelPayload.NumUids(childComplexity), true

	case "DeleteMandatePayload.mandate":
		if e.complexity.DeleteMandatePayload.Mandate == nil {
			break
		}

		args, err := ec.field_DeleteMandatePayload_mandate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeleteMandatePayload.Mandate(childComplexity, args["filter"].(*model.MandateFilter), args["order"].(*model.MandateOrder), args["first"].(*int), args["offset"].(*int)), true

	case "DeleteMandatePayload.msg":
		if e.complexity.DeleteMandatePayload.Msg == nil {
			break
		}

		return e.complexity.DeleteMandatePayload.Msg(childComplexity), true

	case "DeleteMandatePayload.numUids":
		if e.complexity.DeleteMandatePayload.NumUids == nil {
			break
		}

		return e.complexity.DeleteMandatePayload.NumUids(childComplexity), true

	case "DeleteNodeCharacPayload.msg":
		if e.complexity.DeleteNodeCharacPayload.Msg == nil {
			break
		}

		return e.complexity.DeleteNodeCharacPayload.Msg(childComplexity), true

	case "DeleteNodeCharacPayload.nodeCharac":
		if e.complexity.DeleteNodeCharacPayload.NodeCharac == nil {
			break
		}

		args, err := ec.field_DeleteNodeCharacPayload_nodeCharac_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeleteNodeCharacPayload.NodeCharac(childComplexity, args["filter"].(*model.NodeCharacFilter), args["first"].(*int), args["offset"].(*int)), true

	case "DeleteNodeCharacPayload.numUids":
		if e.complexity.DeleteNodeCharacPayload.NumUids == nil {
			break
		}

		return e.complexity.DeleteNodeCharacPayload.NumUids(childComplexity), true

	case "DeleteNodeFragmentPayload.msg":
		if e.complexity.DeleteNodeFragmentPayload.Msg == nil {
			break
		}

		return e.complexity.DeleteNodeFragmentPayload.Msg(childComplexity), true

	case "DeleteNodeFragmentPayload.nodeFragment":
		if e.complexity.DeleteNodeFragmentPayload.NodeFragment == nil {
			break
		}

		args, err := ec.field_DeleteNodeFragmentPayload_nodeFragment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeleteNodeFragmentPayload.NodeFragment(childComplexity, args["filter"].(*model.NodeFragmentFilter), args["order"].(*model.NodeFragmentOrder), args["first"].(*int), args["offset"].(*int)), true

	case "DeleteNodeFragmentPayload.numUids":
		if e.complexity.DeleteNodeFragmentPayload.NumUids == nil {
			break
		}

		return e.complexity.DeleteNodeFragmentPayload.NumUids(childComplexity), true

	case "DeleteNodePayload.msg":
		if e.complexity.DeleteNodePayload.Msg == nil {
			break
		}

		return e.complexity.DeleteNodePayload.Msg(childComplexity), true

	case "DeleteNodePayload.node":
		if e.complexity.DeleteNodePayload.Node == nil {
			break
		}

		args, err := ec.field_DeleteNodePayload_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeleteNodePayload.Node(childComplexity, args["filter"].(*model.NodeFilter), args["order"].(*model.NodeOrder), args["first"].(*int), args["offset"].(*int)), true

	case "DeleteNodePayload.numUids":
		if e.complexity.DeleteNodePayload.NumUids == nil {
			break
		}

		return e.complexity.DeleteNodePayload.NumUids(childComplexity), true

	case "DeletePostPayload.msg":
		if e.complexity.DeletePostPayload.Msg == nil {
			break
		}

		return e.complexity.DeletePostPayload.Msg(childComplexity), true

	case "DeletePostPayload.numUids":
		if e.complexity.DeletePostPayload.NumUids == nil {
			break
		}

		return e.complexity.DeletePostPayload.NumUids(childComplexity), true

	case "DeletePostPayload.post":
		if e.complexity.DeletePostPayload.Post == nil {
			break
		}

		args, err := ec.field_DeletePostPayload_post_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeletePostPayload.Post(childComplexity, args["filter"].(*model.PostFilter), args["order"].(*model.PostOrder), args["first"].(*int), args["offset"].(*int)), true

	case "DeleteTensionPayload.msg":
		if e.complexity.DeleteTensionPayload.Msg == nil {
			break
		}

		return e.complexity.DeleteTensionPayload.Msg(childComplexity), true

	case "DeleteTensionPayload.numUids":
		if e.complexity.DeleteTensionPayload.NumUids == nil {
			break
		}

		return e.complexity.DeleteTensionPayload.NumUids(childComplexity), true

	case "DeleteTensionPayload.tension":
		if e.complexity.DeleteTensionPayload.Tension == nil {
			break
		}

		args, err := ec.field_DeleteTensionPayload_tension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeleteTensionPayload.Tension(childComplexity, args["filter"].(*model.TensionFilter), args["order"].(*model.TensionOrder), args["first"].(*int), args["offset"].(*int)), true

	case "DeleteUserPayload.msg":
		if e.complexity.DeleteUserPayload.Msg == nil {
			break
		}

		return e.complexity.DeleteUserPayload.Msg(childComplexity), true

	case "DeleteUserPayload.numUids":
		if e.complexity.DeleteUserPayload.NumUids == nil {
			break
		}

		return e.complexity.DeleteUserPayload.NumUids(childComplexity), true

	case "DeleteUserPayload.user":
		if e.complexity.DeleteUserPayload.User == nil {
			break
		}

		args, err := ec.field_DeleteUserPayload_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeleteUserPayload.User(childComplexity, args["filter"].(*model.UserFilter), args["order"].(*model.UserOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Event.createdAt":
		if e.complexity.Event.CreatedAt == nil {
			break
		}

		return e.complexity.Event.CreatedAt(childComplexity), true

	case "Event.createdBy":
		if e.complexity.Event.CreatedBy == nil {
			break
		}

		args, err := ec.field_Event_createdBy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.CreatedBy(childComplexity, args["filter"].(*model.UserFilter)), true

	case "Event.event_type":
		if e.complexity.Event.EventType == nil {
			break
		}

		return e.complexity.Event.EventType(childComplexity), true

	case "Event.id":
		if e.complexity.Event.ID == nil {
			break
		}

		return e.complexity.Event.ID(childComplexity), true

	case "Event.message":
		if e.complexity.Event.Message == nil {
			break
		}

		return e.complexity.Event.Message(childComplexity), true

	case "Event.new":
		if e.complexity.Event.New == nil {
			break
		}

		return e.complexity.Event.New(childComplexity), true

	case "Event.old":
		if e.complexity.Event.Old == nil {
			break
		}

		return e.complexity.Event.Old(childComplexity), true

	case "Event.updatedAt":
		if e.complexity.Event.UpdatedAt == nil {
			break
		}

		return e.complexity.Event.UpdatedAt(childComplexity), true

	case "Label.color":
		if e.complexity.Label.Color == nil {
			break
		}

		return e.complexity.Label.Color(childComplexity), true

	case "Label.description":
		if e.complexity.Label.Description == nil {
			break
		}

		return e.complexity.Label.Description(childComplexity), true

	case "Label.id":
		if e.complexity.Label.ID == nil {
			break
		}

		return e.complexity.Label.ID(childComplexity), true

	case "Label.name":
		if e.complexity.Label.Name == nil {
			break
		}

		return e.complexity.Label.Name(childComplexity), true

	case "Label.nodes":
		if e.complexity.Label.Nodes == nil {
			break
		}

		args, err := ec.field_Label_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Label.Nodes(childComplexity, args["filter"].(*model.NodeFilter), args["order"].(*model.NodeOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Label.rootnameid":
		if e.complexity.Label.Rootnameid == nil {
			break
		}

		return e.complexity.Label.Rootnameid(childComplexity), true

	case "Label.tensions":
		if e.complexity.Label.Tensions == nil {
			break
		}

		args, err := ec.field_Label_tensions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Label.Tensions(childComplexity, args["filter"].(*model.TensionFilter), args["order"].(*model.TensionOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Mandate.domains":
		if e.complexity.Mandate.Domains == nil {
			break
		}

		return e.complexity.Mandate.Domains(childComplexity), true

	case "Mandate.id":
		if e.complexity.Mandate.ID == nil {
			break
		}

		return e.complexity.Mandate.ID(childComplexity), true

	case "Mandate.policies":
		if e.complexity.Mandate.Policies == nil {
			break
		}

		return e.complexity.Mandate.Policies(childComplexity), true

	case "Mandate.purpose":
		if e.complexity.Mandate.Purpose == nil {
			break
		}

		return e.complexity.Mandate.Purpose(childComplexity), true

	case "Mandate.responsabilities":
		if e.complexity.Mandate.Responsabilities == nil {
			break
		}

		return e.complexity.Mandate.Responsabilities(childComplexity), true

	case "Mutation.addBlob":
		if e.complexity.Mutation.AddBlob == nil {
			break
		}

		args, err := ec.field_Mutation_addBlob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddBlob(childComplexity, args["input"].([]*model.AddBlobInput)), true

	case "Mutation.addComment":
		if e.complexity.Mutation.AddComment == nil {
			break
		}

		args, err := ec.field_Mutation_addComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddComment(childComplexity, args["input"].([]*model.AddCommentInput)), true

	case "Mutation.addEvent":
		if e.complexity.Mutation.AddEvent == nil {
			break
		}

		args, err := ec.field_Mutation_addEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddEvent(childComplexity, args["input"].([]*model.AddEventInput)), true

	case "Mutation.addLabel":
		if e.complexity.Mutation.AddLabel == nil {
			break
		}

		args, err := ec.field_Mutation_addLabel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddLabel(childComplexity, args["input"].([]*model.AddLabelInput)), true

	case "Mutation.addMandate":
		if e.complexity.Mutation.AddMandate == nil {
			break
		}

		args, err := ec.field_Mutation_addMandate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddMandate(childComplexity, args["input"].([]*model.AddMandateInput)), true

	case "Mutation.addNode":
		if e.complexity.Mutation.AddNode == nil {
			break
		}

		args, err := ec.field_Mutation_addNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddNode(childComplexity, args["input"].([]*model.AddNodeInput)), true

	case "Mutation.addNodeCharac":
		if e.complexity.Mutation.AddNodeCharac == nil {
			break
		}

		args, err := ec.field_Mutation_addNodeCharac_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddNodeCharac(childComplexity, args["input"].([]*model.AddNodeCharacInput)), true

	case "Mutation.addNodeFragment":
		if e.complexity.Mutation.AddNodeFragment == nil {
			break
		}

		args, err := ec.field_Mutation_addNodeFragment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddNodeFragment(childComplexity, args["input"].([]*model.AddNodeFragmentInput)), true

	case "Mutation.addNodeStats":
		if e.complexity.Mutation.AddNodeStats == nil {
			break
		}

		args, err := ec.field_Mutation_addNodeStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddNodeStats(childComplexity, args["input"].([]*model.AddNodeStatsInput)), true

	case "Mutation.addSharedNode":
		if e.complexity.Mutation.AddSharedNode == nil {
			break
		}

		args, err := ec.field_Mutation_addSharedNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSharedNode(childComplexity, args["input"].([]*model.AddSharedNodeInput)), true

	case "Mutation.addTension":
		if e.complexity.Mutation.AddTension == nil {
			break
		}

		args, err := ec.field_Mutation_addTension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTension(childComplexity, args["input"].([]*model.AddTensionInput)), true

	case "Mutation.addUser":
		if e.complexity.Mutation.AddUser == nil {
			break
		}

		args, err := ec.field_Mutation_addUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUser(childComplexity, args["input"].([]*model.AddUserInput)), true

	case "Mutation.addUserRights":
		if e.complexity.Mutation.AddUserRights == nil {
			break
		}

		args, err := ec.field_Mutation_addUserRights_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserRights(childComplexity, args["input"].([]*model.AddUserRightsInput)), true

	case "Mutation.deleteBlob":
		if e.complexity.Mutation.DeleteBlob == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBlob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBlob(childComplexity, args["filter"].(model.BlobFilter)), true

	case "Mutation.deleteComment":
		if e.complexity.Mutation.DeleteComment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteComment(childComplexity, args["filter"].(model.CommentFilter)), true

	case "Mutation.deleteEvent":
		if e.complexity.Mutation.DeleteEvent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEvent(childComplexity, args["filter"].(model.EventFilter)), true

	case "Mutation.deleteLabel":
		if e.complexity.Mutation.DeleteLabel == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLabel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLabel(childComplexity, args["filter"].(model.LabelFilter)), true

	case "Mutation.deleteMandate":
		if e.complexity.Mutation.DeleteMandate == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMandate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMandate(childComplexity, args["filter"].(model.MandateFilter)), true

	case "Mutation.deleteNode":
		if e.complexity.Mutation.DeleteNode == nil {
			break
		}

		args, err := ec.field_Mutation_deleteNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNode(childComplexity, args["filter"].(model.NodeFilter)), true

	case "Mutation.deleteNodeCharac":
		if e.complexity.Mutation.DeleteNodeCharac == nil {
			break
		}

		args, err := ec.field_Mutation_deleteNodeCharac_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNodeCharac(childComplexity, args["filter"].(model.NodeCharacFilter)), true

	case "Mutation.deleteNodeFragment":
		if e.complexity.Mutation.DeleteNodeFragment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteNodeFragment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNodeFragment(childComplexity, args["filter"].(model.NodeFragmentFilter)), true

	case "Mutation.deletePost":
		if e.complexity.Mutation.DeletePost == nil {
			break
		}

		args, err := ec.field_Mutation_deletePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePost(childComplexity, args["filter"].(model.PostFilter)), true

	case "Mutation.deleteTension":
		if e.complexity.Mutation.DeleteTension == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTension(childComplexity, args["filter"].(model.TensionFilter)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["filter"].(model.UserFilter)), true

	case "Mutation.updateBlob":
		if e.complexity.Mutation.UpdateBlob == nil {
			break
		}

		args, err := ec.field_Mutation_updateBlob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBlob(childComplexity, args["input"].(model.UpdateBlobInput)), true

	case "Mutation.updateComment":
		if e.complexity.Mutation.UpdateComment == nil {
			break
		}

		args, err := ec.field_Mutation_updateComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateComment(childComplexity, args["input"].(model.UpdateCommentInput)), true

	case "Mutation.updateEvent":
		if e.complexity.Mutation.UpdateEvent == nil {
			break
		}

		args, err := ec.field_Mutation_updateEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEvent(childComplexity, args["input"].(model.UpdateEventInput)), true

	case "Mutation.updateLabel":
		if e.complexity.Mutation.UpdateLabel == nil {
			break
		}

		args, err := ec.field_Mutation_updateLabel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLabel(childComplexity, args["input"].(model.UpdateLabelInput)), true

	case "Mutation.updateMandate":
		if e.complexity.Mutation.UpdateMandate == nil {
			break
		}

		args, err := ec.field_Mutation_updateMandate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMandate(childComplexity, args["input"].(model.UpdateMandateInput)), true

	case "Mutation.updateNode":
		if e.complexity.Mutation.UpdateNode == nil {
			break
		}

		args, err := ec.field_Mutation_updateNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNode(childComplexity, args["input"].(model.UpdateNodeInput)), true

	case "Mutation.updateNodeCharac":
		if e.complexity.Mutation.UpdateNodeCharac == nil {
			break
		}

		args, err := ec.field_Mutation_updateNodeCharac_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNodeCharac(childComplexity, args["input"].(model.UpdateNodeCharacInput)), true

	case "Mutation.updateNodeFragment":
		if e.complexity.Mutation.UpdateNodeFragment == nil {
			break
		}

		args, err := ec.field_Mutation_updateNodeFragment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNodeFragment(childComplexity, args["input"].(model.UpdateNodeFragmentInput)), true

	case "Mutation.updatePost":
		if e.complexity.Mutation.UpdatePost == nil {
			break
		}

		args, err := ec.field_Mutation_updatePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePost(childComplexity, args["input"].(model.UpdatePostInput)), true

	case "Mutation.updateTension":
		if e.complexity.Mutation.UpdateTension == nil {
			break
		}

		args, err := ec.field_Mutation_updateTension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTension(childComplexity, args["input"].(model.UpdateTensionInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(model.UpdateUserInput)), true

	case "Node.about":
		if e.complexity.Node.About == nil {
			break
		}

		return e.complexity.Node.About(childComplexity), true

	case "Node.charac":
		if e.complexity.Node.Charac == nil {
			break
		}

		args, err := ec.field_Node_charac_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.Charac(childComplexity, args["filter"].(*model.NodeCharacFilter)), true

	case "Node.children":
		if e.complexity.Node.Children == nil {
			break
		}

		args, err := ec.field_Node_children_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.Children(childComplexity, args["filter"].(*model.NodeFilter), args["order"].(*model.NodeOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Node.createdAt":
		if e.complexity.Node.CreatedAt == nil {
			break
		}

		return e.complexity.Node.CreatedAt(childComplexity), true

	case "Node.createdBy":
		if e.complexity.Node.CreatedBy == nil {
			break
		}

		args, err := ec.field_Node_createdBy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.CreatedBy(childComplexity, args["filter"].(*model.UserFilter)), true

	case "Node.docs":
		if e.complexity.Node.Docs == nil {
			break
		}

		args, err := ec.field_Node_docs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.Docs(childComplexity, args["filter"].(*model.BlobFilter), args["order"].(*model.BlobOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Node.first_link":
		if e.complexity.Node.FirstLink == nil {
			break
		}

		args, err := ec.field_Node_first_link_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.FirstLink(childComplexity, args["filter"].(*model.UserFilter)), true

	case "Node.id":
		if e.complexity.Node.ID == nil {
			break
		}

		return e.complexity.Node.ID(childComplexity), true

	case "Node.isArchived":
		if e.complexity.Node.IsArchived == nil {
			break
		}

		return e.complexity.Node.IsArchived(childComplexity), true

	case "Node.isPersonal":
		if e.complexity.Node.IsPersonal == nil {
			break
		}

		return e.complexity.Node.IsPersonal(childComplexity), true

	case "Node.isPrivate":
		if e.complexity.Node.IsPrivate == nil {
			break
		}

		return e.complexity.Node.IsPrivate(childComplexity), true

	case "Node.isRoot":
		if e.complexity.Node.IsRoot == nil {
			break
		}

		return e.complexity.Node.IsRoot(childComplexity), true

	case "Node.labels":
		if e.complexity.Node.Labels == nil {
			break
		}

		args, err := ec.field_Node_labels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.Labels(childComplexity, args["filter"].(*model.LabelFilter), args["order"].(*model.LabelOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Node.mandate":
		if e.complexity.Node.Mandate == nil {
			break
		}

		args, err := ec.field_Node_mandate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.Mandate(childComplexity, args["filter"].(*model.MandateFilter)), true

	case "Node.n_children":
		if e.complexity.Node.NChildren == nil {
			break
		}

		return e.complexity.Node.NChildren(childComplexity), true

	case "Node.n_tensions_in":
		if e.complexity.Node.NTensionsIn == nil {
			break
		}

		return e.complexity.Node.NTensionsIn(childComplexity), true

	case "Node.n_tensions_out":
		if e.complexity.Node.NTensionsOut == nil {
			break
		}

		return e.complexity.Node.NTensionsOut(childComplexity), true

	case "Node.name":
		if e.complexity.Node.Name == nil {
			break
		}

		return e.complexity.Node.Name(childComplexity), true

	case "Node.nameid":
		if e.complexity.Node.Nameid == nil {
			break
		}

		return e.complexity.Node.Nameid(childComplexity), true

	case "Node.parent":
		if e.complexity.Node.Parent == nil {
			break
		}

		args, err := ec.field_Node_parent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.Parent(childComplexity, args["filter"].(*model.NodeFilter)), true

	case "Node.role_type":
		if e.complexity.Node.RoleType == nil {
			break
		}

		return e.complexity.Node.RoleType(childComplexity), true

	case "Node.rootnameid":
		if e.complexity.Node.Rootnameid == nil {
			break
		}

		return e.complexity.Node.Rootnameid(childComplexity), true

	case "Node.second_link":
		if e.complexity.Node.SecondLink == nil {
			break
		}

		args, err := ec.field_Node_second_link_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.SecondLink(childComplexity, args["filter"].(*model.UserFilter)), true

	case "Node.shared":
		if e.complexity.Node.Shared == nil {
			break
		}

		return e.complexity.Node.Shared(childComplexity), true

	case "Node.skills":
		if e.complexity.Node.Skills == nil {
			break
		}

		return e.complexity.Node.Skills(childComplexity), true

	case "Node.source":
		if e.complexity.Node.Source == nil {
			break
		}

		args, err := ec.field_Node_source_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.Source(childComplexity, args["filter"].(*model.BlobFilter)), true

	case "Node.stats":
		if e.complexity.Node.Stats == nil {
			break
		}

		return e.complexity.Node.Stats(childComplexity), true

	case "Node.tensions_in":
		if e.complexity.Node.TensionsIn == nil {
			break
		}

		args, err := ec.field_Node_tensions_in_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.TensionsIn(childComplexity, args["filter"].(*model.TensionFilter), args["order"].(*model.TensionOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Node.tensions_out":
		if e.complexity.Node.TensionsOut == nil {
			break
		}

		args, err := ec.field_Node_tensions_out_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Node.TensionsOut(childComplexity, args["filter"].(*model.TensionFilter), args["order"].(*model.TensionOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Node.type_":
		if e.complexity.Node.Type == nil {
			break
		}

		return e.complexity.Node.Type(childComplexity), true

	case "Node.updatedAt":
		if e.complexity.Node.UpdatedAt == nil {
			break
		}

		return e.complexity.Node.UpdatedAt(childComplexity), true

	case "NodeCharac.id":
		if e.complexity.NodeCharac.ID == nil {
			break
		}

		return e.complexity.NodeCharac.ID(childComplexity), true

	case "NodeCharac.mode":
		if e.complexity.NodeCharac.Mode == nil {
			break
		}

		return e.complexity.NodeCharac.Mode(childComplexity), true

	case "NodeCharac.userCanJoin":
		if e.complexity.NodeCharac.UserCanJoin == nil {
			break
		}

		return e.complexity.NodeCharac.UserCanJoin(childComplexity), true

	case "NodeFragment.about":
		if e.complexity.NodeFragment.About == nil {
			break
		}

		return e.complexity.NodeFragment.About(childComplexity), true

	case "NodeFragment.charac":
		if e.complexity.NodeFragment.Charac == nil {
			break
		}

		args, err := ec.field_NodeFragment_charac_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.NodeFragment.Charac(childComplexity, args["filter"].(*model.NodeCharacFilter)), true

	case "NodeFragment.children":
		if e.complexity.NodeFragment.Children == nil {
			break
		}

		args, err := ec.field_NodeFragment_children_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.NodeFragment.Children(childComplexity, args["filter"].(*model.NodeFragmentFilter), args["order"].(*model.NodeFragmentOrder), args["first"].(*int), args["offset"].(*int)), true

	case "NodeFragment.first_link":
		if e.complexity.NodeFragment.FirstLink == nil {
			break
		}

		return e.complexity.NodeFragment.FirstLink(childComplexity), true

	case "NodeFragment.id":
		if e.complexity.NodeFragment.ID == nil {
			break
		}

		return e.complexity.NodeFragment.ID(childComplexity), true

	case "NodeFragment.isPrivate":
		if e.complexity.NodeFragment.IsPrivate == nil {
			break
		}

		return e.complexity.NodeFragment.IsPrivate(childComplexity), true

	case "NodeFragment.mandate":
		if e.complexity.NodeFragment.Mandate == nil {
			break
		}

		args, err := ec.field_NodeFragment_mandate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.NodeFragment.Mandate(childComplexity, args["filter"].(*model.MandateFilter)), true

	case "NodeFragment.name":
		if e.complexity.NodeFragment.Name == nil {
			break
		}

		return e.complexity.NodeFragment.Name(childComplexity), true

	case "NodeFragment.nameid":
		if e.complexity.NodeFragment.Nameid == nil {
			break
		}

		return e.complexity.NodeFragment.Nameid(childComplexity), true

	case "NodeFragment.role_type":
		if e.complexity.NodeFragment.RoleType == nil {
			break
		}

		return e.complexity.NodeFragment.RoleType(childComplexity), true

	case "NodeFragment.second_link":
		if e.complexity.NodeFragment.SecondLink == nil {
			break
		}

		return e.complexity.NodeFragment.SecondLink(childComplexity), true

	case "NodeFragment.skills":
		if e.complexity.NodeFragment.Skills == nil {
			break
		}

		return e.complexity.NodeFragment.Skills(childComplexity), true

	case "NodeFragment.type_":
		if e.complexity.NodeFragment.Type == nil {
			break
		}

		return e.complexity.NodeFragment.Type(childComplexity), true

	case "NodeStats.n_circle":
		if e.complexity.NodeStats.NCircle == nil {
			break
		}

		return e.complexity.NodeStats.NCircle(childComplexity), true

	case "NodeStats.n_guest":
		if e.complexity.NodeStats.NGuest == nil {
			break
		}

		return e.complexity.NodeStats.NGuest(childComplexity), true

	case "NodeStats.n_member":
		if e.complexity.NodeStats.NMember == nil {
			break
		}

		return e.complexity.NodeStats.NMember(childComplexity), true

	case "NodeStats.n_role":
		if e.complexity.NodeStats.NRole == nil {
			break
		}

		return e.complexity.NodeStats.NRole(childComplexity), true

	case "Post.createdAt":
		if e.complexity.Post.CreatedAt == nil {
			break
		}

		return e.complexity.Post.CreatedAt(childComplexity), true

	case "Post.createdBy":
		if e.complexity.Post.CreatedBy == nil {
			break
		}

		args, err := ec.field_Post_createdBy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Post.CreatedBy(childComplexity, args["filter"].(*model.UserFilter)), true

	case "Post.id":
		if e.complexity.Post.ID == nil {
			break
		}

		return e.complexity.Post.ID(childComplexity), true

	case "Post.message":
		if e.complexity.Post.Message == nil {
			break
		}

		return e.complexity.Post.Message(childComplexity), true

	case "Post.updatedAt":
		if e.complexity.Post.UpdatedAt == nil {
			break
		}

		return e.complexity.Post.UpdatedAt(childComplexity), true

	case "Query.getBlob":
		if e.complexity.Query.GetBlob == nil {
			break
		}

		args, err := ec.field_Query_getBlob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBlob(childComplexity, args["id"].(string)), true

	case "Query.getComment":
		if e.complexity.Query.GetComment == nil {
			break
		}

		args, err := ec.field_Query_getComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetComment(childComplexity, args["id"].(string)), true

	case "Query.getEvent":
		if e.complexity.Query.GetEvent == nil {
			break
		}

		args, err := ec.field_Query_getEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetEvent(childComplexity, args["id"].(string)), true

	case "Query.getLabel":
		if e.complexity.Query.GetLabel == nil {
			break
		}

		args, err := ec.field_Query_getLabel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLabel(childComplexity, args["id"].(string)), true

	case "Query.getMandate":
		if e.complexity.Query.GetMandate == nil {
			break
		}

		args, err := ec.field_Query_getMandate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMandate(childComplexity, args["id"].(string)), true

	case "Query.getNode":
		if e.complexity.Query.GetNode == nil {
			break
		}

		args, err := ec.field_Query_getNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetNode(childComplexity, args["id"].(*string), args["nameid"].(*string)), true

	case "Query.getNodeCharac":
		if e.complexity.Query.GetNodeCharac == nil {
			break
		}

		args, err := ec.field_Query_getNodeCharac_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetNodeCharac(childComplexity, args["id"].(string)), true

	case "Query.getNodeFragment":
		if e.complexity.Query.GetNodeFragment == nil {
			break
		}

		args, err := ec.field_Query_getNodeFragment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetNodeFragment(childComplexity, args["id"].(string)), true

	case "Query.getPost":
		if e.complexity.Query.GetPost == nil {
			break
		}

		args, err := ec.field_Query_getPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPost(childComplexity, args["id"].(string)), true

	case "Query.getTension":
		if e.complexity.Query.GetTension == nil {
			break
		}

		args, err := ec.field_Query_getTension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTension(childComplexity, args["id"].(string)), true

	case "Query.getUser":
		if e.complexity.Query.GetUser == nil {
			break
		}

		args, err := ec.field_Query_getUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUser(childComplexity, args["id"].(*string), args["username"].(*string)), true

	case "Query.queryBlob":
		if e.complexity.Query.QueryBlob == nil {
			break
		}

		args, err := ec.field_Query_queryBlob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryBlob(childComplexity, args["filter"].(*model.BlobFilter), args["order"].(*model.BlobOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryComment":
		if e.complexity.Query.QueryComment == nil {
			break
		}

		args, err := ec.field_Query_queryComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryComment(childComplexity, args["filter"].(*model.CommentFilter), args["order"].(*model.CommentOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryEvent":
		if e.complexity.Query.QueryEvent == nil {
			break
		}

		args, err := ec.field_Query_queryEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryEvent(childComplexity, args["filter"].(*model.EventFilter), args["order"].(*model.EventOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryLabel":
		if e.complexity.Query.QueryLabel == nil {
			break
		}

		args, err := ec.field_Query_queryLabel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryLabel(childComplexity, args["filter"].(*model.LabelFilter), args["order"].(*model.LabelOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryMandate":
		if e.complexity.Query.QueryMandate == nil {
			break
		}

		args, err := ec.field_Query_queryMandate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryMandate(childComplexity, args["filter"].(*model.MandateFilter), args["order"].(*model.MandateOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryNode":
		if e.complexity.Query.QueryNode == nil {
			break
		}

		args, err := ec.field_Query_queryNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryNode(childComplexity, args["filter"].(*model.NodeFilter), args["order"].(*model.NodeOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryNodeCharac":
		if e.complexity.Query.QueryNodeCharac == nil {
			break
		}

		args, err := ec.field_Query_queryNodeCharac_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryNodeCharac(childComplexity, args["filter"].(*model.NodeCharacFilter), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryNodeFragment":
		if e.complexity.Query.QueryNodeFragment == nil {
			break
		}

		args, err := ec.field_Query_queryNodeFragment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryNodeFragment(childComplexity, args["filter"].(*model.NodeFragmentFilter), args["order"].(*model.NodeFragmentOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryNodeStats":
		if e.complexity.Query.QueryNodeStats == nil {
			break
		}

		args, err := ec.field_Query_queryNodeStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryNodeStats(childComplexity, args["order"].(*model.NodeStatsOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryPost":
		if e.complexity.Query.QueryPost == nil {
			break
		}

		args, err := ec.field_Query_queryPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryPost(childComplexity, args["filter"].(*model.PostFilter), args["order"].(*model.PostOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.querySharedNode":
		if e.complexity.Query.QuerySharedNode == nil {
			break
		}

		args, err := ec.field_Query_querySharedNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QuerySharedNode(childComplexity, args["order"].(*model.SharedNodeOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryTension":
		if e.complexity.Query.QueryTension == nil {
			break
		}

		args, err := ec.field_Query_queryTension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryTension(childComplexity, args["filter"].(*model.TensionFilter), args["order"].(*model.TensionOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryUser":
		if e.complexity.Query.QueryUser == nil {
			break
		}

		args, err := ec.field_Query_queryUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryUser(childComplexity, args["filter"].(*model.UserFilter), args["order"].(*model.UserOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Query.queryUserRights":
		if e.complexity.Query.QueryUserRights == nil {
			break
		}

		args, err := ec.field_Query_queryUserRights_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryUserRights(childComplexity, args["order"].(*model.UserRightsOrder), args["first"].(*int), args["offset"].(*int)), true

	case "SharedNode.n_closed_tensions":
		if e.complexity.SharedNode.NClosedTensions == nil {
			break
		}

		return e.complexity.SharedNode.NClosedTensions(childComplexity), true

	case "SharedNode.n_labels":
		if e.complexity.SharedNode.NLabels == nil {
			break
		}

		return e.complexity.SharedNode.NLabels(childComplexity), true

	case "SharedNode.n_tensions":
		if e.complexity.SharedNode.NTensions == nil {
			break
		}

		return e.complexity.SharedNode.NTensions(childComplexity), true

	case "Tension.action":
		if e.complexity.Tension.Action == nil {
			break
		}

		return e.complexity.Tension.Action(childComplexity), true

	case "Tension.assignees":
		if e.complexity.Tension.Assignees == nil {
			break
		}

		args, err := ec.field_Tension_assignees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tension.Assignees(childComplexity, args["filter"].(*model.UserFilter), args["order"].(*model.UserOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Tension.blobs":
		if e.complexity.Tension.Blobs == nil {
			break
		}

		args, err := ec.field_Tension_blobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tension.Blobs(childComplexity, args["filter"].(*model.BlobFilter), args["order"].(*model.BlobOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Tension.comments":
		if e.complexity.Tension.Comments == nil {
			break
		}

		args, err := ec.field_Tension_comments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tension.Comments(childComplexity, args["filter"].(*model.CommentFilter), args["order"].(*model.CommentOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Tension.createdAt":
		if e.complexity.Tension.CreatedAt == nil {
			break
		}

		return e.complexity.Tension.CreatedAt(childComplexity), true

	case "Tension.createdBy":
		if e.complexity.Tension.CreatedBy == nil {
			break
		}

		args, err := ec.field_Tension_createdBy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tension.CreatedBy(childComplexity, args["filter"].(*model.UserFilter)), true

	case "Tension.emitter":
		if e.complexity.Tension.Emitter == nil {
			break
		}

		args, err := ec.field_Tension_emitter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tension.Emitter(childComplexity, args["filter"].(*model.NodeFilter)), true

	case "Tension.emitterid":
		if e.complexity.Tension.Emitterid == nil {
			break
		}

		return e.complexity.Tension.Emitterid(childComplexity), true

	case "Tension.history":
		if e.complexity.Tension.History == nil {
			break
		}

		args, err := ec.field_Tension_history_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tension.History(childComplexity, args["filter"].(*model.EventFilter), args["order"].(*model.EventOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Tension.id":
		if e.complexity.Tension.ID == nil {
			break
		}

		return e.complexity.Tension.ID(childComplexity), true

	case "Tension.labels":
		if e.complexity.Tension.Labels == nil {
			break
		}

		args, err := ec.field_Tension_labels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tension.Labels(childComplexity, args["filter"].(*model.LabelFilter), args["order"].(*model.LabelOrder), args["first"].(*int), args["offset"].(*int)), true

	case "Tension.message":
		if e.complexity.Tension.Message == nil {
			break
		}

		return e.complexity.Tension.Message(childComplexity), true

	case "Tension.n_blobs":
		if e.complexity.Tension.NBlobs == nil {
			break
		}

		return e.complexity.Tension.NBlobs(childComplexity), true

	case "Tension.n_comments":
		if e.complexity.Tension.NComments == nil {
			break
		}

		return e.complexity.Tension.NComments(childComplexity), true

	case "Tension.nth":
		if e.complexity.Tension.Nth == nil {
			break
		}

		return e.complexity.Tension.Nth(childComplexity), true

	case "Tension.receiver":
		if e.complexity.Tension.Receiver == nil {
			break
		}

		args, err := ec.field_Tension_receiver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tension.Receiver(childComplexity, args["filter"].(*model.NodeFilter)), true

	case "Tension.receiverid":
		if e.complexity.Tension.Receiverid == nil {
			break
		}

		return e.complexity.Tension.Receiverid(childComplexity), true

	case "Tension.status":
		if e.complexity.Tension.Status == nil {
			break
		}

		return e.complexity.Tension.Status(childComplexity), true

	case "Tension.title":
		if e.complexity.Tension.Title == nil {
			break
		}

		return e.complexity.Tension.Title(childComplexity), true

	case "Tension.type_":
		if e.complexity.Tension.Type == nil {
			break
		}

		return e.complexity.Tension.Type(childComplexity), true

	case "Tension.updatedAt":
		if e.complexity.Tension.UpdatedAt == nil {
			break
		}

		return e.complexity.Tension.UpdatedAt(childComplexity), true

	case "UpdateBlobPayload.blob":
		if e.complexity.UpdateBlobPayload.Blob == nil {
			break
		}

		args, err := ec.field_UpdateBlobPayload_blob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UpdateBlobPayload.Blob(childComplexity, args["filter"].(*model.BlobFilter), args["order"].(*model.BlobOrder), args["first"].(*int), args["offset"].(*int)), true

	case "UpdateBlobPayload.numUids":
		if e.complexity.UpdateBlobPayload.NumUids == nil {
			break
		}

		return e.complexity.UpdateBlobPayload.NumUids(childComplexity), true

	case "UpdateCommentPayload.comment":
		if e.complexity.UpdateCommentPayload.Comment == nil {
			break
		}

		args, err := ec.field_UpdateCommentPayload_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UpdateCommentPayload.Comment(childComplexity, args["filter"].(*model.CommentFilter), args["order"].(*model.CommentOrder), args["first"].(*int), args["offset"].(*int)), true

	case "UpdateCommentPayload.numUids":
		if e.complexity.UpdateCommentPayload.NumUids == nil {
			break
		}

		return e.complexity.UpdateCommentPayload.NumUids(childComplexity), true

	case "UpdateEventPayload.event":
		if e.complexity.UpdateEventPayload.Event == nil {
			break
		}

		args, err := ec.field_UpdateEventPayload_event_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UpdateEventPayload.Event(childComplexity, args["filter"].(*model.EventFilter), args["order"].(*model.EventOrder), args["first"].(*int), args["offset"].(*int)), true

	case "UpdateEventPayload.numUids":
		if e.complexity.UpdateEventPayload.NumUids == nil {
			break
		}

		return e.complexity.UpdateEventPayload.NumUids(childComplexity), true

	case "UpdateLabelPayload.label":
		if e.complexity.UpdateLabelPayload.Label == nil {
			break
		}

		args, err := ec.field_UpdateLabelPayload_label_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UpdateLabelPayload.Label(childComplexity, args["filter"].(*model.LabelFilter), args["order"].(*model.LabelOrder), args["first"].(*int), args["offset"].(*int)), true

	case "UpdateLabelPayload.numUids":
		if e.complexity.UpdateLabelPayload.NumUids == nil {
			break
		}

		return e.complexity.UpdateLabelPayload.NumUids(childComplexity), true

	case "UpdateMandatePayload.mandate":
		if e.complexity.UpdateMandatePayload.Mandate == nil {
			break
		}

		args, err := ec.field_UpdateMandatePayload_mandate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UpdateMandatePayload.Mandate(childComplexity, args["filter"].(*model.MandateFilter), args["order"].(*model.MandateOrder), args["first"].(*int), args["offset"].(*int)), true

	case "UpdateMandatePayload.numUids":
		if e.complexity.UpdateMandatePayload.NumUids == nil {
			break
		}

		return e.complexity.UpdateMandatePayload.NumUids(childComplexity), true

	case "UpdateNodeCharacPayload.nodeCharac":
		if e.complexity.UpdateNodeCharacPayload.NodeCharac == nil {
			break
		}

		args, err := ec.field_UpdateNodeCharacPayload_nodeCharac_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UpdateNodeCharacPayload.NodeCharac(childComplexity, args["filter"].(*model.NodeCharacFilter), args["first"].(*int), args["offset"].(*int)), true

	case "UpdateNodeCharacPayload.numUids":
		if e.complexity.UpdateNodeCharacPayload.NumUids == nil {
			break
		}

		return e.complexity.UpdateNodeCharacPayload.NumUids(childComplexity), true

	case "UpdateNodeFragmentPayload.nodeFragment":
		if e.complexity.UpdateNodeFragmentPayload.NodeFragment == nil {
			break
		}

		args, err := ec.field_UpdateNodeFragmentPayload_nodeFragment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UpdateNodeFragmentPayload.NodeFragment(childComplexity, args["filter"].(*model.NodeFragmentFilter), args["order"].(*model.NodeFragmentOrder), args["first"].(*int), args["offset"].(*int)), true

	case "UpdateNodeFragmentPayload.numUids":
		if e.complexity.UpdateNodeFragmentPayload.NumUids == nil {
			break
		}

		return e.complexity.UpdateNodeFragmentPayload.NumUids(childComplexity), true

	case "UpdateNodePayload.node":
		if e.complexity.UpdateNodePayload.Node == nil {
			break
		}

		args, err := ec.field_UpdateNodePayload_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UpdateNodePayload.Node(childComplexity, args["filter"].(*model.NodeFilter), args["order"].(*model.NodeOrder), args["first"].(*int), args["offset"].(*int)), true

	case "UpdateNodePayload.numUids":
		if e.complexity.UpdateNodePayload.NumUids == nil {
			break
		}

		return e.complexity.UpdateNodePayload.NumUids(childComplexity), true

	case "UpdatePostPayload.numUids":
		if e.complexity.UpdatePostPayload.NumUids == nil {
			break
		}

		return e.complexity.UpdatePostPayload.NumUids(childComplexity), true

	case "UpdatePostPayload.post":
		if e.complexity.UpdatePostPayload.Post == nil {
			break
		}

		args, err := ec.field_UpdatePostPayload_post_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UpdatePostPayload.Post(childComplexity, args["filter"].(*model.PostFilter), args["order"].(*model.PostOrder), args["first"].(*int), args["offset"].(*int)), true

	case "UpdateTensionPayload.numUids":
		if e.complexity.UpdateTensionPayload.NumUids == nil {
			break
		}

		return e.complexity.UpdateTensionPayload.NumUids(childComplexity), true

	case "UpdateTensionPayload.tension":
		if e.complexity.UpdateTensionPayload.Tension == nil {
			break
		}

		args, err := ec.field_UpdateTensionPayload_tension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UpdateTensionPayload.Tension(childComplexity, args["filter"].(*model.TensionFilter), args["order"].(*model.TensionOrder), args["first"].(*int), args["offset"].(*int)), true

	case "UpdateUserPayload.numUids":
		if e.complexity.UpdateUserPayload.NumUids == nil {
			break
		}

		return e.complexity.UpdateUserPayload.NumUids(childComplexity), true

	case "UpdateUserPayload.user":
		if e.complexity.UpdateUserPayload.User == nil {
			break
		}

		args, err := ec.field_UpdateUserPayload_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UpdateUserPayload.User(childComplexity, args["filter"].(*model.UserFilter), args["order"].(*model.UserOrder), args["first"].(*int), args["offset"].(*int)), true

	case "User.backed_roles":
		if e.complexity.User.BackedRoles == nil {
			break
		}

		args, err := ec.field_User_backed_roles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.BackedRoles(childComplexity, args["filter"].(*model.NodeFilter), args["order"].(*model.NodeOrder), args["first"].(*int), args["offset"].(*int)), true

	case "User.bio":
		if e.complexity.User.Bio == nil {
			break
		}

		return e.complexity.User.Bio(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.emailHash":
		if e.complexity.User.EmailHash == nil {
			break
		}

		return e.complexity.User.EmailHash(childComplexity), true

	case "User.emailValidated":
		if e.complexity.User.EmailValidated == nil {
			break
		}

		return e.complexity.User.EmailValidated(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastAck":
		if e.complexity.User.LastAck == nil {
			break
		}

		return e.complexity.User.LastAck(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.password":
		if e.complexity.User.Password == nil {
			break
		}

		return e.complexity.User.Password(childComplexity), true

	case "User.rights":
		if e.complexity.User.Rights == nil {
			break
		}

		return e.complexity.User.Rights(childComplexity), true

	case "User.roles":
		if e.complexity.User.Roles == nil {
			break
		}

		args, err := ec.field_User_roles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Roles(childComplexity, args["filter"].(*model.NodeFilter), args["order"].(*model.NodeOrder), args["first"].(*int), args["offset"].(*int)), true

	case "User.tensions_assigned":
		if e.complexity.User.TensionsAssigned == nil {
			break
		}

		args, err := ec.field_User_tensions_assigned_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.TensionsAssigned(childComplexity, args["filter"].(*model.TensionFilter), args["order"].(*model.TensionOrder), args["first"].(*int), args["offset"].(*int)), true

	case "User.tensions_created":
		if e.complexity.User.TensionsCreated == nil {
			break
		}

		args, err := ec.field_User_tensions_created_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.TensionsCreated(childComplexity, args["filter"].(*model.TensionFilter), args["order"].(*model.TensionOrder), args["first"].(*int), args["offset"].(*int)), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "User.utc":
		if e.complexity.User.Utc == nil {
			break
		}

		return e.complexity.User.Utc(childComplexity), true

	case "UserRights.canCreateRoot":
		if e.complexity.UserRights.CanCreateRoot == nil {
			break
		}

		return e.complexity.UserRights.CanCreateRoot(childComplexity), true

	case "UserRights.canLogin":
		if e.complexity.UserRights.CanLogin == nil {
			break
		}

		return e.complexity.UserRights.CanLogin(childComplexity), true

	case "UserRights.maxPublicOrga":
		if e.complexity.UserRights.MaxPublicOrga == nil {
			break
		}

		return e.complexity.UserRights.MaxPublicOrga(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/gen/schema.graphql", Input: `


directive @hidden on FIELD_DEFINITION

directive @count(f: String!) on FIELD_DEFINITION

directive @meta_getNodeStats on FIELD_DEFINITION

directive @hook_addNode on ARGUMENT_DEFINITION

directive @hook_addNodePost on FIELD_DEFINITION

directive @hook_updateNode on ARGUMENT_DEFINITION

directive @hook_updateNodePost on FIELD_DEFINITION

directive @hook_addTension on ARGUMENT_DEFINITION

directive @hook_addTensionPost on FIELD_DEFINITION

directive @hook_updateTension on ARGUMENT_DEFINITION

directive @hook_updateTensionPost on FIELD_DEFINITION

directive @hook_updateComment on ARGUMENT_DEFINITION

directive @hook_updateCommentPost on FIELD_DEFINITION

directive @hook_addLabel on ARGUMENT_DEFINITION

directive @hook_addLabelPost on FIELD_DEFINITION

directive @hook_updateLabel on ARGUMENT_DEFINITION

directive @hook_updateLabelPost on FIELD_DEFINITION

directive @alter_toLower(f: String!) on INPUT_FIELD_DEFINITION

directive @alter_minLength(f: String!, n: Int!) on INPUT_FIELD_DEFINITION

directive @alter_maxLength(f: String!, n: Int!) on INPUT_FIELD_DEFINITION

directive @alter_unique(f: String!, s: String) on INPUT_FIELD_DEFINITION

directive @hidePrivate on OBJECT|FIELD_DEFINITION

directive @isAuth on OBJECT|FIELD_DEFINITION

directive @patch_hasRole(n: [String!]!, u: String, a: Int) on INPUT_FIELD_DEFINITION

directive @alter_hasRole(n: [String!]!, u: String, a: Int) on INPUT_FIELD_DEFINITION

directive @alter_hasRoot(n: [String!]!) on INPUT_FIELD_DEFINITION

directive @add_isOwner(u: String) on INPUT_FIELD_DEFINITION

directive @patch_isOwner(u: String) on INPUT_FIELD_DEFINITION

directive @patch_RO on INPUT_FIELD_DEFINITION

directive @alter_RO on INPUT_FIELD_DEFINITION

type Node @hidePrivate {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  name: String! @search(by: [term])
  nameid: String! @search(by: [hash, regexp]) @id
  rootnameid: String! @search(by: [hash, regexp])
  parent(filter: NodeFilter): Node
  children(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!] @hasInverse(field: parent)
  type_: NodeType! @search
  tensions_out(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!] @hasInverse(field: emitter)
  tensions_in(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!] @hasInverse(field: receiver)
  about: String @search(by: [fulltext])
  mandate(filter: MandateFilter): Mandate
  docs(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  source(filter: BlobFilter): Blob
  n_tensions_out: Int @count(f: tensions_out)
  n_tensions_in: Int @count(f: tensions_in)
  n_children: Int @count(f: children)
  stats: NodeStats @meta_getNodeStats
  isRoot: Boolean! @search
  isPersonal: Boolean @search
  isPrivate: Boolean! @search
  isArchived: Boolean! @search
  charac(filter: NodeCharacFilter): NodeCharac!
  labels(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label!]
  first_link(filter: UserFilter): User
  second_link(filter: UserFilter): User
  skills: [String!] @search(by: [term])
  role_type: RoleType @search
  shared: SharedNode
}

type SharedNode {
  n_labels: Int
  n_tensions: Int
  n_closed_tensions: Int
}

type NodeFragment {
  id: ID!
  name: String
  nameid: String
  type_: NodeType
  isPrivate: Boolean
  charac(filter: NodeCharacFilter): NodeCharac
  about: String
  mandate(filter: MandateFilter): Mandate
  children(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment!]
  first_link: String
  second_link: String
  skills: [String!]
  role_type: RoleType
}

type NodeCharac {
  id: ID!
  userCanJoin: Boolean! @search
  mode: NodeMode! @search
}

type NodeStats {
  n_member: Int
  n_guest: Int
  n_circle: Int
  n_role: Int
}

type Post {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  message: String @search(by: [fulltext])
}

type Tension @hidePrivate {
  createdBy(filter: UserFilter): User!
  nth: String @search
  title: String! @search(by: [fulltext])
  type_: TensionType! @search
  emitterid: String! @search(by: [hash, regexp])
  emitter(filter: NodeFilter): Node!
  receiverid: String! @search(by: [hash, regexp])
  receiver(filter: NodeFilter): Node!
  status: TensionStatus! @search
  labels(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label!]
  assignees(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User!]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment!]
  action: TensionAction
  blobs(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob!] @hasInverse(field: tension)
  history(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event!]!
  n_comments: Int @count(f: comments)
  n_blobs: Int @count(f: blobs)
  id: ID!
  createdAt: DateTime! @search
  updatedAt: DateTime
  message: String @search(by: [fulltext])
}

type Label {
  id: ID!
  rootnameid: String! @search
  name: String! @search(by: [hash, term])
  description: String
  color: String
  tensions(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!] @hasInverse(field: labels)
  nodes(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!] @hasInverse(field: labels)
}

type Comment {
  message: String! @search(by: [fulltext])
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
}

type Blob {
  tension(filter: TensionFilter): Tension!
  blob_type: BlobType! @search
  pushedFlag: DateTime @search
  archivedFlag: DateTime @search
  node(filter: NodeFragmentFilter): NodeFragment
  md: String
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  message: String @search(by: [fulltext])
}

type Event {
  event_type: TensionEvent! @search
  old: String
  new: String
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  message: String @search(by: [fulltext])
}

type Mandate {
  id: ID!
  purpose: String! @search(by: [fulltext])
  responsabilities: String
  domains: String
  policies: String
}

type User {
  id: ID!
  createdAt: DateTime!
  lastAck: DateTime!
  username: String! @id
  name: String
  password: String! @hidden
  email: String! @search(by: [hash]) @hidden
  emailHash: String @hidden
  emailValidated: Boolean! @hidden
  rights: UserRights!
  roles(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!] @hasInverse(field: first_link)
  backed_roles(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!] @hasInverse(field: second_link)
  tensions_created(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!] @hasInverse(field: createdBy)
  tensions_assigned(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!] @hasInverse(field: assignees)
  bio: String
  utc: String
}

type UserRights {
  canLogin: Boolean!
  canCreateRoot: Boolean!
  maxPublicOrga: Int!
}

enum NodeType {
  Circle
  Role
}

enum RoleType {


  Owner

  Member

  Guest

  Retired


  Coordinator

  Peer

  Bot

}

enum NodeMode {
  Coordinated

  Agile

}

enum TensionStatus {
  Open
  Closed
}

enum TensionType {
  Operational
  Governance
  Help


}

enum TensionAction {

  NewRole
  NewCircle
  NewMd

  EditRole
  EditCircle
  EditMd

  ArchivedRole
  ArchivedCircle
  ArchivedMd




}

enum TensionEvent {

  Created
  Reopened
  Closed
  TitleUpdated
  CommentPushed
  AssigneeAdded
  AssigneeRemoved





  BlobCreated
  BlobCommitted

  BlobPushed
  BlobArchived
  BlobUnarchived
  UserJoin
  UserLeft
}

enum BlobType {

  OnNode
  OnAbout
  OnMandate
  OnFirstLink

  OnDoc

}

directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION

directive @id on FIELD_DEFINITION

directive @withSubscription on OBJECT|INTERFACE

directive @secret(field: String!, pred: String) on OBJECT|INTERFACE

directive @custom(http: CustomHTTP) on FIELD_DEFINITION

directive @dgraph(type: String, pred: String) on OBJECT|INTERFACE|FIELD_DEFINITION

directive @auth(query: AuthRule, add: AuthRule, update: AuthRule, delete: AuthRule) on OBJECT

directive @remote on OBJECT|INTERFACE

directive @cascade on FIELD

directive @hasInverse(field: String!) on FIELD_DEFINITION

input AddBlobInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  tension: TensionRef!
  blob_type: BlobType!
  pushedFlag: DateTime @alter_RO
  archivedFlag: DateTime @alter_RO
  node: NodeFragmentRef
  md: String
}

type AddBlobPayload {
  blob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  numUids: Int
}

input AddCommentInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  _VOID: String
}

type AddCommentPayload {
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  numUids: Int
}

input AddEventInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  event_type: TensionEvent!
  old: String
  new: String
}

type AddEventPayload {
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  numUids: Int
}

input AddLabelInput {
  rootnameid: String!
  name: String! @alter_toLower(f:"name") @alter_unique(f:"name", s:"rootnameid")
  description: String @alter_maxLength(f:"description", n:280)
  color: String
  tensions: [TensionRef!]
  nodes: [NodeRef!]
}

type AddLabelPayload {
  label(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  numUids: Int
}

input AddMandateInput {
  purpose: String!
  responsabilities: String
  domains: String
  policies: String
}

type AddMandatePayload {
  mandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  numUids: Int
}

input AddNodeCharacInput {
  userCanJoin: Boolean!
  mode: NodeMode!
}

type AddNodeCharacPayload {
  nodeCharac(filter: NodeCharacFilter, first: Int, offset: Int): [NodeCharac]
  numUids: Int
}

input AddNodeFragmentInput {
  name: String @alter_minLength(f:"name", n:1)
  nameid: String @alter_toLower(f:"nameid")
  type_: NodeType
  isPrivate: Boolean
  charac: NodeCharacRef
  about: String @alter_maxLength(f:"about", n:280)
  mandate: MandateRef
  children: [NodeFragmentRef!]
  first_link: String
  second_link: String
  skills: [String!]
  role_type: RoleType
}

type AddNodeFragmentPayload {
  nodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  numUids: Int
}

input AddNodeInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime @alter_RO
  name: String!
  nameid: String!
  rootnameid: String!
  parent: NodeRef
  children: [NodeRef!]
  type_: NodeType!
  tensions_out: [TensionRef!]
  tensions_in: [TensionRef!]
  about: String
  mandate: MandateRef
  docs: [BlobRef]
  source: BlobRef
  n_tensions_out: Int
  n_tensions_in: Int
  n_children: Int
  stats: NodeStatsRef
  isRoot: Boolean!
  isPersonal: Boolean
  isPrivate: Boolean!
  isArchived: Boolean!
  charac: NodeCharacRef!
  labels: [LabelRef!]
  first_link: UserRef
  second_link: UserRef
  skills: [String!]
  role_type: RoleType
  shared: SharedNodeRef @alter_RO
}

type AddNodePayload {
  node(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  numUids: Int
}

input AddNodeStatsInput {
  n_member: Int
  n_guest: Int
  n_circle: Int
  n_role: Int
}

type AddNodeStatsPayload {
  nodeStats(order: NodeStatsOrder, first: Int, offset: Int): [NodeStats]
  numUids: Int
}

input AddSharedNodeInput {
  n_labels: Int
  n_tensions: Int
  n_closed_tensions: Int
}

type AddSharedNodePayload {
  sharedNode(order: SharedNodeOrder, first: Int, offset: Int): [SharedNode]
  numUids: Int
}

input AddTensionInput {
  createdBy: UserRef! @add_isOwner(u:"createdBy")
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  nth: String
  title: String! @alter_hasRole(n:["emitter"], u:"createdBy", a:1) @alter_minLength(f:"title", n:1)
  type_: TensionType! @alter_hasRole(n:["emitter"], u:"createdBy", a:1)
  emitterid: String! @alter_hasRole(n:["emitter"], u:"createdBy", a:1)
  emitter: NodeRef! @alter_hasRole(n:["emitter"], u:"createdBy", a:1)
  receiverid: String! @alter_hasRole(n:["receiver"], u:"createdBy", a:1)
  receiver: NodeRef! @alter_hasRole(n:["receiver"], u:"createdBy", a:1)
  status: TensionStatus! @alter_hasRole(n:["emitter","receiver"], u:"createdBy", a:1)
  labels: [LabelRef!]
  assignees: [UserRef!] @alter_hasRole(n:["emitter","receiver"], a:1)
  comments: [CommentRef!] @alter_hasRoot(n:["emitter","receiver"])
  action: TensionAction @alter_hasRoot(n:["emitter","receiver"])
  blobs: [BlobRef!] @alter_hasRoot(n:["emitter","receiver"])
  history: [EventRef!]!
  n_comments: Int
  n_blobs: Int
}

type AddTensionPayload {
  tension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  numUids: Int
}

input AddUserInput {
  createdAt: DateTime! @alter_RO
  lastAck: DateTime! @alter_RO
  username: String! @alter_toLower(f:"username")
  name: String
  password: String!
  email: String!
  emailHash: String @alter_RO
  emailValidated: Boolean! @alter_RO
  rights: UserRightsRef! @alter_RO
  roles: [NodeRef!] @alter_RO
  backed_roles: [NodeRef!] @alter_RO
  tensions_created: [TensionRef!]
  tensions_assigned: [TensionRef!]
  bio: String
  utc: String
}

type AddUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input AddUserRightsInput {
  canLogin: Boolean!
  canCreateRoot: Boolean!
  maxPublicOrga: Int!
}

type AddUserRightsPayload {
  userRights(order: UserRightsOrder, first: Int, offset: Int): [UserRights]
  numUids: Int
}

input AuthRule {
  and: [AuthRule]
  or: [AuthRule]
  not: AuthRule
  rule: String
}

input BlobFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  blob_type: BlobType_hash
  pushedFlag: DateTimeFilter
  archivedFlag: DateTimeFilter
  and: BlobFilter
  or: BlobFilter
  not: BlobFilter
}

input BlobOrder {
  asc: BlobOrderable
  desc: BlobOrderable
  then: BlobOrder
}

enum BlobOrderable {
  createdAt
  updatedAt
  message
  pushedFlag
  archivedFlag
  md
}

input BlobPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension: TensionRef
  blob_type: BlobType @patch_RO
  pushedFlag: DateTime @alter_RO
  archivedFlag: DateTime @alter_RO
  node: NodeFragmentRef @patch_RO
  md: String @patch_RO
}

input BlobRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension: TensionRef
  blob_type: BlobType
  pushedFlag: DateTime
  archivedFlag: DateTime
  node: NodeFragmentRef
  md: String
}

input BlobType_hash {
  eq: BlobType!
}

input CommentFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  and: CommentFilter
  or: CommentFilter
  not: CommentFilter
}

input CommentOrder {
  asc: CommentOrderable
  desc: CommentOrderable
  then: CommentOrder
}

enum CommentOrderable {
  createdAt
  updatedAt
  message
  _VOID
}

input CommentPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String @patch_isOwner(u:"createdBy")
  _VOID: String
}

input CommentRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  _VOID: String
}

input CustomHTTP {
  url: String!
  method: HTTPMethod!
  body: String
  graphql: String
  mode: Mode
  forwardHeaders: [String!]
  secretHeaders: [String!]
  introspectionHeaders: [String!]
  skipIntrospection: Boolean
}

scalar DateTime

input DateTimeFilter {
  eq: DateTime
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
}

type DeleteBlobPayload {
  blob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  msg: String
  numUids: Int
}

type DeleteCommentPayload {
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  msg: String
  numUids: Int
}

type DeleteEventPayload {
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  msg: String
  numUids: Int
}

type DeleteLabelPayload {
  label(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  msg: String
  numUids: Int
}

type DeleteMandatePayload {
  mandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  msg: String
  numUids: Int
}

type DeleteNodeCharacPayload {
  nodeCharac(filter: NodeCharacFilter, first: Int, offset: Int): [NodeCharac]
  msg: String
  numUids: Int
}

type DeleteNodeFragmentPayload {
  nodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  msg: String
  numUids: Int
}

type DeleteNodePayload {
  node(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  msg: String
  numUids: Int
}

type DeletePostPayload {
  post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
  msg: String
  numUids: Int
}

type DeleteTensionPayload {
  tension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  msg: String
  numUids: Int
}

type DeleteUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  msg: String
  numUids: Int
}

enum DgraphIndex {
  int
  float
  bool
  hash
  exact
  term
  fulltext
  trigram
  regexp
  year
  month
  day
  hour
}

input EventFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  event_type: TensionEvent_hash
  and: EventFilter
  or: EventFilter
  not: EventFilter
}

input EventOrder {
  asc: EventOrderable
  desc: EventOrderable
  then: EventOrder
}

enum EventOrderable {
  createdAt
  updatedAt
  message
  old
  new
}

input EventPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  event_type: TensionEvent
  old: String
  new: String
}

input EventRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  event_type: TensionEvent
  old: String
  new: String
}

input FloatFilter {
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
}

enum HTTPMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

input IntFilter {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
}

input LabelFilter {
  id: [ID!]
  rootnameid: StringTermFilter
  name: StringHashFilter_StringTermFilter
  and: LabelFilter
  or: LabelFilter
  not: LabelFilter
}

input LabelOrder {
  asc: LabelOrderable
  desc: LabelOrderable
  then: LabelOrder
}

enum LabelOrderable {
  rootnameid
  name
  description
  color
}

input LabelPatch {
  rootnameid: String @patch_RO
  name: String @alter_toLower(f:"name") @alter_unique(f:"name", s:"rootnameid")
  description: String @alter_maxLength(f:"description", n:280)
  color: String
  tensions: [TensionRef!]
  nodes: [NodeRef!]
}

input LabelRef {
  id: ID
  rootnameid: String
  name: String
  description: String
  color: String
  tensions: [TensionRef!]
  nodes: [NodeRef!]
}

input MandateFilter {
  id: [ID!]
  purpose: StringFullTextFilter
  and: MandateFilter
  or: MandateFilter
  not: MandateFilter
}

input MandateOrder {
  asc: MandateOrderable
  desc: MandateOrderable
  then: MandateOrder
}

enum MandateOrderable {
  purpose
  responsabilities
  domains
  policies
}

input MandatePatch {
  purpose: String @patch_RO
  responsabilities: String @patch_RO
  domains: String @patch_RO
  policies: String @patch_RO
}

input MandateRef {
  id: ID
  purpose: String
  responsabilities: String
  domains: String
  policies: String
}

enum Mode {
  BATCH
  SINGLE
}

type Mutation {
  addNode(input: [AddNodeInput!]!): AddNodePayload
  updateNode(input: UpdateNodeInput! @hook_updateNode): UpdateNodePayload @hook_updateNodePost
  deleteNode(filter: NodeFilter!): DeleteNodePayload
  addSharedNode(input: [AddSharedNodeInput!]!): AddSharedNodePayload
  addNodeFragment(input: [AddNodeFragmentInput!]!): AddNodeFragmentPayload
  updateNodeFragment(input: UpdateNodeFragmentInput!): UpdateNodeFragmentPayload
  deleteNodeFragment(filter: NodeFragmentFilter!): DeleteNodeFragmentPayload
  addNodeCharac(input: [AddNodeCharacInput!]!): AddNodeCharacPayload
  updateNodeCharac(input: UpdateNodeCharacInput!): UpdateNodeCharacPayload
  deleteNodeCharac(filter: NodeCharacFilter!): DeleteNodeCharacPayload
  addNodeStats(input: [AddNodeStatsInput!]!): AddNodeStatsPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  deletePost(filter: PostFilter!): DeletePostPayload
  addTension(input: [AddTensionInput!]! @hook_addTension): AddTensionPayload @hook_addTensionPost
  updateTension(input: UpdateTensionInput! @hook_updateTension): UpdateTensionPayload @hook_updateTensionPost
  deleteTension(filter: TensionFilter!): DeleteTensionPayload
  addLabel(input: [AddLabelInput!]! @hook_addLabel): AddLabelPayload @hook_addLabelPost
  updateLabel(input: UpdateLabelInput! @hook_updateLabel): UpdateLabelPayload @hook_updateLabelPost
  deleteLabel(filter: LabelFilter!): DeleteLabelPayload
  addComment(input: [AddCommentInput!]!): AddCommentPayload
  updateComment(input: UpdateCommentInput! @hook_updateComment): UpdateCommentPayload @hook_updateCommentPost
  deleteComment(filter: CommentFilter!): DeleteCommentPayload
  addBlob(input: [AddBlobInput!]!): AddBlobPayload
  updateBlob(input: UpdateBlobInput!): UpdateBlobPayload
  deleteBlob(filter: BlobFilter!): DeleteBlobPayload
  addEvent(input: [AddEventInput!]!): AddEventPayload
  updateEvent(input: UpdateEventInput!): UpdateEventPayload
  deleteEvent(filter: EventFilter!): DeleteEventPayload
  addMandate(input: [AddMandateInput!]!): AddMandatePayload
  updateMandate(input: UpdateMandateInput!): UpdateMandatePayload
  deleteMandate(filter: MandateFilter!): DeleteMandatePayload
  addUser(input: [AddUserInput!]!): AddUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  deleteUser(filter: UserFilter!): DeleteUserPayload
  addUserRights(input: [AddUserRightsInput!]!): AddUserRightsPayload
}

input NodeCharacFilter {
  id: [ID!]
  userCanJoin: Boolean
  mode: NodeMode_hash
  and: NodeCharacFilter
  or: NodeCharacFilter
  not: NodeCharacFilter
}

input NodeCharacPatch {
  userCanJoin: Boolean
  mode: NodeMode
}

input NodeCharacRef {
  id: ID
  userCanJoin: Boolean
  mode: NodeMode
}

input NodeFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  name: StringTermFilter
  nameid: StringHashFilter_StringRegExpFilter
  rootnameid: StringHashFilter_StringRegExpFilter
  type_: NodeType_hash
  about: StringFullTextFilter
  isRoot: Boolean
  isPersonal: Boolean
  isPrivate: Boolean
  isArchived: Boolean
  skills: StringTermFilter
  role_type: RoleType_hash
  and: NodeFilter
  or: NodeFilter
  not: NodeFilter
}

input NodeFragmentFilter {
  id: [ID!]
  not: NodeFragmentFilter
}

input NodeFragmentOrder {
  asc: NodeFragmentOrderable
  desc: NodeFragmentOrderable
  then: NodeFragmentOrder
}

enum NodeFragmentOrderable {
  name
  nameid
  about
  first_link
  second_link
}

input NodeFragmentPatch {
  name: String @alter_minLength(f:"name", n:1)
  nameid: String @alter_toLower(f:"nameid")
  type_: NodeType
  isPrivate: Boolean
  charac: NodeCharacRef
  about: String @alter_maxLength(f:"about", n:280)
  mandate: MandateRef
  children: [NodeFragmentRef!]
  first_link: String
  second_link: String
  skills: [String!]
  role_type: RoleType
}

input NodeFragmentRef {
  id: ID
  name: String
  nameid: String
  type_: NodeType
  isPrivate: Boolean
  charac: NodeCharacRef
  about: String
  mandate: MandateRef
  children: [NodeFragmentRef!]
  first_link: String
  second_link: String
  skills: [String!]
  role_type: RoleType
}

input NodeMode_hash {
  eq: NodeMode!
}

input NodeOrder {
  asc: NodeOrderable
  desc: NodeOrderable
  then: NodeOrder
}

enum NodeOrderable {
  createdAt
  updatedAt
  name
  nameid
  rootnameid
  about
  n_tensions_out
  n_tensions_in
  n_children
}

input NodePatch {
  createdBy: UserRef @patch_RO
  createdAt: DateTime @patch_RO
  updatedAt: DateTime @alter_RO
  name: String @patch_RO
  rootnameid: String @patch_RO
  parent: NodeRef @patch_RO
  children: [NodeRef!] @patch_RO
  type_: NodeType @patch_RO
  tensions_out: [TensionRef!] @patch_RO
  tensions_in: [TensionRef!] @patch_RO
  about: String @patch_RO
  mandate: MandateRef @patch_RO
  docs: [BlobRef] @patch_RO
  source: BlobRef @patch_RO
  n_tensions_out: Int
  n_tensions_in: Int
  n_children: Int
  stats: NodeStatsRef
  isRoot: Boolean @patch_RO
  isPersonal: Boolean @patch_RO
  isPrivate: Boolean @patch_RO
  isArchived: Boolean @patch_RO
  charac: NodeCharacRef @patch_RO
  labels: [LabelRef!] @patch_RO
  first_link: UserRef @patch_RO
  second_link: UserRef @patch_RO
  skills: [String!] @patch_RO
  role_type: RoleType @patch_RO
  shared: SharedNodeRef @alter_RO
}

input NodeRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  nameid: String
  rootnameid: String
  parent: NodeRef
  children: [NodeRef!]
  type_: NodeType
  tensions_out: [TensionRef!]
  tensions_in: [TensionRef!]
  about: String
  mandate: MandateRef
  docs: [BlobRef]
  source: BlobRef
  n_tensions_out: Int
  n_tensions_in: Int
  n_children: Int
  stats: NodeStatsRef
  isRoot: Boolean
  isPersonal: Boolean
  isPrivate: Boolean
  isArchived: Boolean
  charac: NodeCharacRef
  labels: [LabelRef!]
  first_link: UserRef
  second_link: UserRef
  skills: [String!]
  role_type: RoleType
  shared: SharedNodeRef
}

input NodeStatsOrder {
  asc: NodeStatsOrderable
  desc: NodeStatsOrderable
  then: NodeStatsOrder
}

enum NodeStatsOrderable {
  n_member
  n_guest
  n_circle
  n_role
}

input NodeStatsRef {
  n_member: Int
  n_guest: Int
  n_circle: Int
  n_role: Int
}

input NodeType_hash {
  eq: NodeType!
}

input PostFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  and: PostFilter
  or: PostFilter
  not: PostFilter
}

input PostOrder {
  asc: PostOrderable
  desc: PostOrderable
  then: PostOrder
}

enum PostOrderable {
  createdAt
  updatedAt
  message
}

input PostPatch {
  createdBy: UserRef @patch_RO
  createdAt: DateTime @patch_RO
  updatedAt: DateTime @patch_isOwner(u:"createdBy")
  message: String @patch_isOwner(u:"createdBy")
}

input PostRef {
  id: ID!
}

type Query {
  getNode(id: ID, nameid: String): Node
  queryNode(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  querySharedNode(order: SharedNodeOrder, first: Int, offset: Int): [SharedNode]
  getNodeFragment(id: ID!): NodeFragment
  queryNodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  getNodeCharac(id: ID!): NodeCharac
  queryNodeCharac(filter: NodeCharacFilter, first: Int, offset: Int): [NodeCharac]
  queryNodeStats(order: NodeStatsOrder, first: Int, offset: Int): [NodeStats]
  getPost(id: ID!): Post
  queryPost(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
  getTension(id: ID!): Tension
  queryTension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  getLabel(id: ID!): Label
  queryLabel(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  getComment(id: ID!): Comment
  queryComment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  getBlob(id: ID!): Blob
  queryBlob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  getEvent(id: ID!): Event
  queryEvent(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  getMandate(id: ID!): Mandate
  queryMandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  getUser(id: ID, username: String): User
  queryUser(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  queryUserRights(order: UserRightsOrder, first: Int, offset: Int): [UserRights]
}

input RoleType_hash {
  eq: RoleType
}

input SharedNodeOrder {
  asc: SharedNodeOrderable
  desc: SharedNodeOrderable
  then: SharedNodeOrder
}

enum SharedNodeOrderable {
  n_labels
  n_tensions
  n_closed_tensions
}

input SharedNodeRef {
  n_labels: Int
  n_tensions: Int
  n_closed_tensions: Int
}

input StringExactFilter {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
}

input StringFullTextFilter {
  alloftext: String
  anyoftext: String
}

input StringHashFilter {
  eq: String
}

input StringHashFilter_StringRegExpFilter {
  eq: String
  regexp: String
}

input StringHashFilter_StringTermFilter {
  eq: String
  allofterms: String
  anyofterms: String
}

input StringRegExpFilter {
  regexp: String
}

input StringTermFilter {
  allofterms: String
  anyofterms: String
}

input TensionEvent_hash {
  eq: TensionEvent!
}

input TensionFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  nth: StringTermFilter
  title: StringFullTextFilter
  type_: TensionType_hash
  emitterid: StringHashFilter_StringRegExpFilter
  receiverid: StringHashFilter_StringRegExpFilter
  status: TensionStatus_hash
  and: TensionFilter
  or: TensionFilter
  not: TensionFilter
}

input TensionOrder {
  asc: TensionOrderable
  desc: TensionOrderable
  then: TensionOrder
}

enum TensionOrderable {
  createdAt
  updatedAt
  message
  nth
  title
  emitterid
  receiverid
  n_comments
  n_blobs
}

input TensionPatch {
  createdBy: UserRef @patch_RO
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  nth: String
  title: String @alter_hasRole(n:["emitter"], u:"createdBy", a:1) @alter_minLength(f:"title", n:1)
  type_: TensionType @alter_hasRole(n:["emitter"], u:"createdBy", a:1)
  emitterid: String @alter_hasRole(n:["emitter"], u:"createdBy", a:1)
  emitter: NodeRef @alter_hasRole(n:["emitter"], u:"createdBy", a:1)
  receiverid: String @alter_hasRole(n:["receiver"], u:"createdBy", a:1)
  receiver: NodeRef @alter_hasRole(n:["receiver"], u:"createdBy", a:1)
  status: TensionStatus @alter_hasRole(n:["emitter","receiver"], u:"createdBy", a:1)
  labels: [LabelRef!] @patch_hasRole(n:["emitter","receiver"], a:1)
  assignees: [UserRef!] @alter_hasRole(n:["emitter","receiver"], a:1)
  comments: [CommentRef!] @alter_hasRoot(n:["emitter","receiver"])
  action: TensionAction @alter_hasRoot(n:["emitter","receiver"])
  blobs: [BlobRef!] @alter_hasRoot(n:["emitter","receiver"])
  history: [EventRef!]
  n_comments: Int
  n_blobs: Int
}

input TensionRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  nth: String
  title: String
  type_: TensionType
  emitterid: String
  emitter: NodeRef
  receiverid: String
  receiver: NodeRef
  status: TensionStatus
  labels: [LabelRef!]
  assignees: [UserRef!]
  comments: [CommentRef!]
  action: TensionAction
  blobs: [BlobRef!]
  history: [EventRef!]
  n_comments: Int
  n_blobs: Int
}

input TensionStatus_hash {
  eq: TensionStatus!
}

input TensionType_hash {
  eq: TensionType!
}

input UpdateBlobInput {
  filter: BlobFilter!
  set: BlobPatch
  remove: BlobPatch
}

type UpdateBlobPayload {
  blob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  numUids: Int
}

input UpdateCommentInput {
  filter: CommentFilter!
  set: CommentPatch
  remove: CommentPatch
}

type UpdateCommentPayload {
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  numUids: Int
}

input UpdateEventInput {
  filter: EventFilter!
  set: EventPatch
  remove: EventPatch
}

type UpdateEventPayload {
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  numUids: Int
}

input UpdateLabelInput {
  filter: LabelFilter!
  set: LabelPatch
  remove: LabelPatch
}

type UpdateLabelPayload {
  label(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  numUids: Int
}

input UpdateMandateInput {
  filter: MandateFilter!
  set: MandatePatch
  remove: MandatePatch
}

type UpdateMandatePayload {
  mandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  numUids: Int
}

input UpdateNodeCharacInput {
  filter: NodeCharacFilter!
  set: NodeCharacPatch
  remove: NodeCharacPatch
}

type UpdateNodeCharacPayload {
  nodeCharac(filter: NodeCharacFilter, first: Int, offset: Int): [NodeCharac]
  numUids: Int
}

input UpdateNodeFragmentInput {
  filter: NodeFragmentFilter!
  set: NodeFragmentPatch
  remove: NodeFragmentPatch
}

type UpdateNodeFragmentPayload {
  nodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  numUids: Int
}

input UpdateNodeInput {
  filter: NodeFilter!
  set: NodePatch
  remove: NodePatch
}

type UpdateNodePayload {
  node(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  numUids: Int
}

input UpdatePostInput {
  filter: PostFilter!
  set: PostPatch
  remove: PostPatch
}

type UpdatePostPayload {
  post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
  numUids: Int
}

input UpdateTensionInput {
  filter: TensionFilter!
  set: TensionPatch
  remove: TensionPatch
}

type UpdateTensionPayload {
  tension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  numUids: Int
}

input UpdateUserInput {
  filter: UserFilter!
  set: UserPatch
  remove: UserPatch
}

type UpdateUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input UserFilter {
  id: [ID!]
  username: StringHashFilter
  email: StringHashFilter
  and: UserFilter
  or: UserFilter
  not: UserFilter
}

input UserOrder {
  asc: UserOrderable
  desc: UserOrderable
  then: UserOrder
}

enum UserOrderable {
  createdAt
  lastAck
  username
  name
  password
  email
  emailHash
  bio
  utc
}

input UserPatch {
  createdAt: DateTime @alter_RO
  lastAck: DateTime @alter_RO
  name: String @patch_isOwner
  password: String @patch_isOwner
  email: String @patch_isOwner
  emailHash: String @alter_RO
  emailValidated: Boolean @alter_RO
  rights: UserRightsRef @alter_RO
  roles: [NodeRef!] @alter_RO
  backed_roles: [NodeRef!] @alter_RO
  tensions_created: [TensionRef!]
  tensions_assigned: [TensionRef!]
  bio: String @patch_isOwner
  utc: String @patch_isOwner
}

input UserRef {
  id: ID
  createdAt: DateTime
  lastAck: DateTime
  username: String
  name: String
  password: String
  email: String
  emailHash: String
  emailValidated: Boolean
  rights: UserRightsRef
  roles: [NodeRef!]
  backed_roles: [NodeRef!]
  tensions_created: [TensionRef!]
  tensions_assigned: [TensionRef!]
  bio: String
  utc: String
}

input UserRightsOrder {
  asc: UserRightsOrderable
  desc: UserRightsOrderable
  then: UserRightsOrder
}

enum UserRightsOrderable {
  maxPublicOrga
}

input UserRightsRef {
  canLogin: Boolean
  canCreateRoot: Boolean
  maxPublicOrga: Int
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_add_isOwner_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["u"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["u"] = arg0
	return args, nil
}

func (ec *executionContext) dir_alter_hasRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["n"]; ok {
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["n"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["u"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["u"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["a"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["a"] = arg2
	return args, nil
}

func (ec *executionContext) dir_alter_hasRoot_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["n"]; ok {
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["n"] = arg0
	return args, nil
}

func (ec *executionContext) dir_alter_maxLength_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["f"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["n"]; ok {
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["n"] = arg1
	return args, nil
}

func (ec *executionContext) dir_alter_minLength_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["f"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["n"]; ok {
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["n"] = arg1
	return args, nil
}

func (ec *executionContext) dir_alter_toLower_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["f"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg0
	return args, nil
}

func (ec *executionContext) dir_alter_unique_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["f"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["s"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["s"] = arg1
	return args, nil
}

func (ec *executionContext) dir_auth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AuthRule
	if tmp, ok := rawArgs["query"]; ok {
		arg0, err = ec.unmarshalOAuthRule2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 *model.AuthRule
	if tmp, ok := rawArgs["add"]; ok {
		arg1, err = ec.unmarshalOAuthRule2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["add"] = arg1
	var arg2 *model.AuthRule
	if tmp, ok := rawArgs["update"]; ok {
		arg2, err = ec.unmarshalOAuthRule2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["update"] = arg2
	var arg3 *model.AuthRule
	if tmp, ok := rawArgs["delete"]; ok {
		arg3, err = ec.unmarshalOAuthRule2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["delete"] = arg3
	return args, nil
}

func (ec *executionContext) dir_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["f"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg0
	return args, nil
}

func (ec *executionContext) dir_custom_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CustomHTTP
	if tmp, ok := rawArgs["http"]; ok {
		arg0, err = ec.unmarshalOCustomHTTP2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCustomHTTP(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["http"] = arg0
	return args, nil
}

func (ec *executionContext) dir_dgraph_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["pred"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pred"] = arg1
	return args, nil
}

func (ec *executionContext) dir_hasInverse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["field"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["field"] = arg0
	return args, nil
}

func (ec *executionContext) dir_patch_hasRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["n"]; ok {
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["n"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["u"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["u"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["a"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["a"] = arg2
	return args, nil
}

func (ec *executionContext) dir_patch_isOwner_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["u"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["u"] = arg0
	return args, nil
}

func (ec *executionContext) dir_search_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DgraphIndex
	if tmp, ok := rawArgs["by"]; ok {
		arg0, err = ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["by"] = arg0
	return args, nil
}

func (ec *executionContext) dir_secret_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["field"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["field"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["pred"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pred"] = arg1
	return args, nil
}

func (ec *executionContext) field_AddBlobPayload_blob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.BlobOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOBlobOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddCommentPayload_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.CommentOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOCommentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddEventPayload_event_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOEventFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOEventOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddLabelPayload_label_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOLabelOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddMandatePayload_mandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.MandateOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOMandateOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddNodeCharacPayload_nodeCharac_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeCharacFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_AddNodeFragmentPayload_nodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeFragmentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddNodePayload_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddNodeStatsPayload_nodeStats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeStatsOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg0, err = ec.unmarshalONodeStatsOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_AddSharedNodePayload_sharedNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SharedNodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg0, err = ec.unmarshalOSharedNodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_AddTensionPayload_tension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOTensionOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddUserPayload_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOUserOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddUserRightsPayload_userRights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserRightsOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg0, err = ec.unmarshalOUserRightsOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Blob_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Blob_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Blob_tension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Comment_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_DeleteBlobPayload_blob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.BlobOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOBlobOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteCommentPayload_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.CommentOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOCommentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteEventPayload_event_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOEventFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOEventOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteLabelPayload_label_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOLabelOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteMandatePayload_mandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.MandateOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOMandateOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteNodeCharacPayload_nodeCharac_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeCharacFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_DeleteNodeFragmentPayload_nodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeFragmentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteNodePayload_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeletePostPayload_post_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOPostFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.PostOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOPostOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteTensionPayload_tension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOTensionOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteUserPayload_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOUserOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Event_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Label_nodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Label_tensions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOTensionOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_addBlob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddBlobInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddBlobInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddCommentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddCommentInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddEventInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddEventInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addLabel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddLabelInput
	if tmp, ok := rawArgs["input"]; ok {
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNAddLabelInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelInputᚄ(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addLabel == nil {
				return nil, errors.New("directive hook_addLabel is not implemented")
			}
			return ec.directives.Hook_addLabel(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.([]*model.AddLabelInput); ok {
			arg0 = data
		} else {
			return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.AddLabelInput`, tmp)
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addMandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddMandateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddMandateInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandateInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addNodeCharac_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddNodeCharacInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddNodeCharacInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeCharacInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addNodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddNodeFragmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddNodeFragmentInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addNodeStats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddNodeStatsInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddNodeStatsInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeStatsInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddNodeInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddNodeInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addSharedNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddSharedNodeInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddSharedNodeInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddSharedNodeInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddTensionInput
	if tmp, ok := rawArgs["input"]; ok {
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNAddTensionInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionInputᚄ(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addTension == nil {
				return nil, errors.New("directive hook_addTension is not implemented")
			}
			return ec.directives.Hook_addTension(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.([]*model.AddTensionInput); ok {
			arg0 = data
		} else {
			return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.AddTensionInput`, tmp)
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserRights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddUserRightsInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddUserRightsInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddUserInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddUserInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBlob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNBlobFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNCommentFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNEventFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLabel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNLabelFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNMandateFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteNodeCharac_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NodeCharacFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNNodeCharacFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteNodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNNodeFragmentFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNNodeFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNPostFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNTensionFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNUserFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBlob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateBlobInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateBlobInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateBlobInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateCommentInput
	if tmp, ok := rawArgs["input"]; ok {
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateCommentInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateCommentInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateComment == nil {
				return nil, errors.New("directive hook_updateComment is not implemented")
			}
			return ec.directives.Hook_updateComment(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(model.UpdateCommentInput); ok {
			arg0 = data
		} else {
			return nil, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.UpdateCommentInput`, tmp)
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateEventInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateEventInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLabel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateLabelInput
	if tmp, ok := rawArgs["input"]; ok {
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateLabelInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateLabelInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateLabel == nil {
				return nil, errors.New("directive hook_updateLabel is not implemented")
			}
			return ec.directives.Hook_updateLabel(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(model.UpdateLabelInput); ok {
			arg0 = data
		} else {
			return nil, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.UpdateLabelInput`, tmp)
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateMandateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateMandateInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateMandateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateNodeCharac_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateNodeCharacInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateNodeCharacInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeCharacInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateNodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateNodeFragmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateNodeFragmentInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeFragmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateNodeInput
	if tmp, ok := rawArgs["input"]; ok {
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateNodeInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateNode == nil {
				return nil, errors.New("directive hook_updateNode is not implemented")
			}
			return ec.directives.Hook_updateNode(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(model.UpdateNodeInput); ok {
			arg0 = data
		} else {
			return nil, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.UpdateNodeInput`, tmp)
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdatePostInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdatePostInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateTensionInput
	if tmp, ok := rawArgs["input"]; ok {
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateTensionInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateTensionInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateTension == nil {
				return nil, errors.New("directive hook_updateTension is not implemented")
			}
			return ec.directives.Hook_updateTension(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(model.UpdateTensionInput); ok {
			arg0 = data
		} else {
			return nil, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.UpdateTensionInput`, tmp)
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateUserInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateUserInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_NodeFragment_charac_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeCharacFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_NodeFragment_children_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeFragmentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_NodeFragment_mandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_charac_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeCharacFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_children_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_docs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.BlobOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOBlobOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_first_link_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_labels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOLabelOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_mandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_parent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_second_link_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_source_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_tensions_in_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOTensionOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_tensions_out_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOTensionOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Post_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBlob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getLabel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getNodeCharac_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getNodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["nameid"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nameid"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["username"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["username"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_queryBlob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.BlobOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOBlobOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.CommentOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOCommentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOEventFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOEventOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryLabel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOLabelOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryMandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.MandateOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOMandateOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryNodeCharac_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeCharacFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_queryNodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeFragmentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryNodeStats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeStatsOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg0, err = ec.unmarshalONodeStatsOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_queryNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOPostFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.PostOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOPostOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_querySharedNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SharedNodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg0, err = ec.unmarshalOSharedNodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_queryTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOTensionOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryUserRights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserRightsOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg0, err = ec.unmarshalOUserRightsOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_queryUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOUserOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_assignees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOUserOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_blobs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.BlobOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOBlobOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.CommentOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOCommentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_emitter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_history_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOEventFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOEventOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_labels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOLabelOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_receiver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_UpdateBlobPayload_blob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.BlobOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOBlobOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateCommentPayload_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.CommentOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOCommentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateEventPayload_event_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOEventFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOEventOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateLabelPayload_label_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOLabelOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateMandatePayload_mandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.MandateOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOMandateOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateNodeCharacPayload_nodeCharac_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeCharacFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_UpdateNodeFragmentPayload_nodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeFragmentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateNodePayload_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdatePostPayload_post_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOPostFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.PostOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOPostOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateTensionPayload_tension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOTensionOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateUserPayload_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOUserOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_backed_roles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_roles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalONodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_tensions_assigned_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOTensionOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_tensions_created_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		arg1, err = ec.unmarshalOTensionOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

func (ec *executionContext) _fieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) interface{} {
	fc := graphql.GetFieldContext(ctx)
	for _, d := range fc.Field.Directives {
		switch d.Name {
		case "cascade":
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.Cascade == nil {
					return nil, errors.New("directive cascade is not implemented")
				}
				return ec.directives.Cascade(ctx, obj, n)
			}
		}
	}
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AddBlobPayload_blob(ctx context.Context, field graphql.CollectedField, obj *model.AddBlobPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddBlobPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddBlobPayload_blob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blob, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) _AddBlobPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddBlobPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddBlobPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddCommentPayload_comment(ctx context.Context, field graphql.CollectedField, obj *model.AddCommentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddCommentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddCommentPayload_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _AddCommentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddCommentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddCommentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddEventPayload_event(ctx context.Context, field graphql.CollectedField, obj *model.AddEventPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddEventPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddEventPayload_event_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _AddEventPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddEventPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddEventPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddLabelPayload_label(ctx context.Context, field graphql.CollectedField, obj *model.AddLabelPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddLabelPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddLabelPayload_label_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, field.Selections, res)
}

func (ec *executionContext) _AddLabelPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddLabelPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddLabelPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddMandatePayload_mandate(ctx context.Context, field graphql.CollectedField, obj *model.AddMandatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddMandatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddMandatePayload_mandate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) _AddMandatePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddMandatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddMandatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddNodeCharacPayload_nodeCharac(ctx context.Context, field graphql.CollectedField, obj *model.AddNodeCharacPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddNodeCharacPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddNodeCharacPayload_nodeCharac_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeCharac, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeCharac)
	fc.Result = res
	return ec.marshalONodeCharac2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx, field.Selections, res)
}

func (ec *executionContext) _AddNodeCharacPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddNodeCharacPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddNodeCharacPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddNodeFragmentPayload_nodeFragment(ctx context.Context, field graphql.CollectedField, obj *model.AddNodeFragmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddNodeFragmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddNodeFragmentPayload_nodeFragment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeFragment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) _AddNodeFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddNodeFragmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddNodeFragmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddNodePayload_node(ctx context.Context, field graphql.CollectedField, obj *model.AddNodePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddNodePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddNodePayload_node_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Node, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _AddNodePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddNodePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddNodePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddNodeStatsPayload_nodeStats(ctx context.Context, field graphql.CollectedField, obj *model.AddNodeStatsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddNodeStatsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddNodeStatsPayload_nodeStats_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeStats, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeStats)
	fc.Result = res
	return ec.marshalONodeStats2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStats(ctx, field.Selections, res)
}

func (ec *executionContext) _AddNodeStatsPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddNodeStatsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddNodeStatsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddSharedNodePayload_sharedNode(ctx context.Context, field graphql.CollectedField, obj *model.AddSharedNodePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddSharedNodePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddSharedNodePayload_sharedNode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharedNode, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SharedNode)
	fc.Result = res
	return ec.marshalOSharedNode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNode(ctx, field.Selections, res)
}

func (ec *executionContext) _AddSharedNodePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddSharedNodePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddSharedNodePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddTensionPayload_tension(ctx context.Context, field graphql.CollectedField, obj *model.AddTensionPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddTensionPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddTensionPayload_tension_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Tension, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) _AddTensionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddTensionPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddTensionPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddUserPayload_user(ctx context.Context, field graphql.CollectedField, obj *model.AddUserPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddUserPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddUserPayload_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _AddUserPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddUserPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddUserPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AddUserRightsPayload_userRights(ctx context.Context, field graphql.CollectedField, obj *model.AddUserRightsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddUserRightsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AddUserRightsPayload_userRights_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRights, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserRights)
	fc.Result = res
	return ec.marshalOUserRights2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx, field.Selections, res)
}

func (ec *executionContext) _AddUserRightsPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddUserRightsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddUserRightsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Blob_tension(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Blob",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Blob_tension_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Tension, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tension)
	fc.Result = res
	return ec.marshalNTension2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) _Blob_blob_type(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Blob",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.BlobType, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(model.BlobType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.BlobType`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.BlobType)
	fc.Result = res
	return ec.marshalNBlobType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, field.Selections, res)
}

func (ec *executionContext) _Blob_pushedFlag(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Blob",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PushedFlag, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Blob_archivedFlag(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Blob",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ArchivedFlag, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Blob_node(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Blob",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Blob_node_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) _Blob_md(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Blob",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Md, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Blob_id(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Blob",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Blob_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Blob",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Blob_createdBy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Blob_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Blob",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CreatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Blob_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Blob",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Blob_message(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Blob",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Message, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"fulltext"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_message(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Message, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"fulltext"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_id(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Comment_createdBy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CreatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteBlobPayload_blob(ctx context.Context, field graphql.CollectedField, obj *model.DeleteBlobPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteBlobPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DeleteBlobPayload_blob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blob, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteBlobPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteBlobPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteBlobPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteBlobPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteBlobPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteBlobPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteCommentPayload_comment(ctx context.Context, field graphql.CollectedField, obj *model.DeleteCommentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteCommentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DeleteCommentPayload_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteCommentPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteCommentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteCommentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteCommentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteCommentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteCommentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteEventPayload_event(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteEventPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DeleteEventPayload_event_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteEventPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteEventPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteEventPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteEventPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteLabelPayload_label(ctx context.Context, field graphql.CollectedField, obj *model.DeleteLabelPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteLabelPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DeleteLabelPayload_label_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteLabelPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteLabelPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteLabelPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteLabelPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteLabelPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteLabelPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteMandatePayload_mandate(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMandatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteMandatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DeleteMandatePayload_mandate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteMandatePayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMandatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteMandatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteMandatePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMandatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteMandatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteNodeCharacPayload_nodeCharac(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodeCharacPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteNodeCharacPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DeleteNodeCharacPayload_nodeCharac_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeCharac, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeCharac)
	fc.Result = res
	return ec.marshalONodeCharac2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteNodeCharacPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodeCharacPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteNodeCharacPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteNodeCharacPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodeCharacPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteNodeCharacPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteNodeFragmentPayload_nodeFragment(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodeFragmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteNodeFragmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DeleteNodeFragmentPayload_nodeFragment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeFragment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteNodeFragmentPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodeFragmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteNodeFragmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteNodeFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodeFragmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteNodeFragmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteNodePayload_node(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteNodePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DeleteNodePayload_node_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Node, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteNodePayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteNodePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteNodePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteNodePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeletePostPayload_post(ctx context.Context, field graphql.CollectedField, obj *model.DeletePostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeletePostPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DeletePostPayload_post_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Post)
	fc.Result = res
	return ec.marshalOPost2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _DeletePostPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeletePostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeletePostPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeletePostPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeletePostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeletePostPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteTensionPayload_tension(ctx context.Context, field graphql.CollectedField, obj *model.DeleteTensionPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteTensionPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DeleteTensionPayload_tension_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Tension, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteTensionPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteTensionPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteTensionPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteTensionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteTensionPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteTensionPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteUserPayload_user(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteUserPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DeleteUserPayload_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteUserPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteUserPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteUserPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteUserPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_event_type(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Event",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.EventType, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(model.TensionEvent); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.TensionEvent`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TensionEvent)
	fc.Result = res
	return ec.marshalNTensionEvent2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_old(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Event",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Old, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_new(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Event",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.New, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_id(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Event",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Event",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Event_createdBy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Event",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CreatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Event",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_message(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Event",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Message, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"fulltext"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Label_id(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Label",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Label_rootnameid(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Label",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Rootnameid, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Label_name(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Label",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Name, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"hash", "term"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Label_description(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Label",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Label_color(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Label",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Color, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Label_tensions(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Label",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Label_tensions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Tensions, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			field, err := ec.unmarshalNString2string(ctx, "labels")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasInverse == nil {
				return nil, errors.New("directive hasInverse is not implemented")
			}
			return ec.directives.HasInverse(ctx, obj, directive1, field)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Label_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Label",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Label_nodes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Nodes, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			field, err := ec.unmarshalNString2string(ctx, "labels")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasInverse == nil {
				return nil, errors.New("directive hasInverse is not implemented")
			}
			return ec.directives.HasInverse(ctx, obj, directive1, field)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mandate_id(ctx context.Context, field graphql.CollectedField, obj *model.Mandate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mandate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mandate_purpose(ctx context.Context, field graphql.CollectedField, obj *model.Mandate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mandate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Purpose, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"fulltext"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mandate_responsabilities(ctx context.Context, field graphql.CollectedField, obj *model.Mandate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mandate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Responsabilities, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mandate_domains(ctx context.Context, field graphql.CollectedField, obj *model.Mandate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mandate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domains, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mandate_policies(ctx context.Context, field graphql.CollectedField, obj *model.Mandate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mandate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Policies, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addNode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddNode(rctx, args["input"].([]*model.AddNodeInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddNodePayload)
	fc.Result = res
	return ec.marshalOAddNodePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateNode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateNode(rctx, args["input"].(model.UpdateNodeInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateNodePost == nil {
				return nil, errors.New("directive hook_updateNodePost is not implemented")
			}
			return ec.directives.Hook_updateNodePost(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateNodePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UpdateNodePayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateNodePayload)
	fc.Result = res
	return ec.marshalOUpdateNodePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteNode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNode(rctx, args["filter"].(model.NodeFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteNodePayload)
	fc.Result = res
	return ec.marshalODeleteNodePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addSharedNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addSharedNode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddSharedNode(rctx, args["input"].([]*model.AddSharedNodeInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddSharedNodePayload)
	fc.Result = res
	return ec.marshalOAddSharedNodePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddSharedNodePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addNodeFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addNodeFragment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddNodeFragment(rctx, args["input"].([]*model.AddNodeFragmentInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddNodeFragmentPayload)
	fc.Result = res
	return ec.marshalOAddNodeFragmentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateNodeFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateNodeFragment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNodeFragment(rctx, args["input"].(model.UpdateNodeFragmentInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateNodeFragmentPayload)
	fc.Result = res
	return ec.marshalOUpdateNodeFragmentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeFragmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteNodeFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteNodeFragment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNodeFragment(rctx, args["filter"].(model.NodeFragmentFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteNodeFragmentPayload)
	fc.Result = res
	return ec.marshalODeleteNodeFragmentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodeFragmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addNodeCharac(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addNodeCharac_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddNodeCharac(rctx, args["input"].([]*model.AddNodeCharacInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddNodeCharacPayload)
	fc.Result = res
	return ec.marshalOAddNodeCharacPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeCharacPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateNodeCharac(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateNodeCharac_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNodeCharac(rctx, args["input"].(model.UpdateNodeCharacInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateNodeCharacPayload)
	fc.Result = res
	return ec.marshalOUpdateNodeCharacPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeCharacPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteNodeCharac(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteNodeCharac_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNodeCharac(rctx, args["filter"].(model.NodeCharacFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteNodeCharacPayload)
	fc.Result = res
	return ec.marshalODeleteNodeCharacPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodeCharacPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addNodeStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addNodeStats_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddNodeStats(rctx, args["input"].([]*model.AddNodeStatsInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddNodeStatsPayload)
	fc.Result = res
	return ec.marshalOAddNodeStatsPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeStatsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePost(rctx, args["input"].(model.UpdatePostInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdatePostPayload)
	fc.Result = res
	return ec.marshalOUpdatePostPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePost(rctx, args["filter"].(model.PostFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeletePostPayload)
	fc.Result = res
	return ec.marshalODeletePostPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeletePostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addTension_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddTension(rctx, args["input"].([]*model.AddTensionInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addTensionPost == nil {
				return nil, errors.New("directive hook_addTensionPost is not implemented")
			}
			return ec.directives.Hook_addTensionPost(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AddTensionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.AddTensionPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddTensionPayload)
	fc.Result = res
	return ec.marshalOAddTensionPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateTension_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateTension(rctx, args["input"].(model.UpdateTensionInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateTensionPost == nil {
				return nil, errors.New("directive hook_updateTensionPost is not implemented")
			}
			return ec.directives.Hook_updateTensionPost(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateTensionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UpdateTensionPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateTensionPayload)
	fc.Result = res
	return ec.marshalOUpdateTensionPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateTensionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteTension_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTension(rctx, args["filter"].(model.TensionFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteTensionPayload)
	fc.Result = res
	return ec.marshalODeleteTensionPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteTensionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addLabel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddLabel(rctx, args["input"].([]*model.AddLabelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addLabelPost == nil {
				return nil, errors.New("directive hook_addLabelPost is not implemented")
			}
			return ec.directives.Hook_addLabelPost(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AddLabelPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.AddLabelPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddLabelPayload)
	fc.Result = res
	return ec.marshalOAddLabelPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLabel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLabel(rctx, args["input"].(model.UpdateLabelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateLabelPost == nil {
				return nil, errors.New("directive hook_updateLabelPost is not implemented")
			}
			return ec.directives.Hook_updateLabelPost(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateLabelPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UpdateLabelPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateLabelPayload)
	fc.Result = res
	return ec.marshalOUpdateLabelPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateLabelPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLabel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLabel(rctx, args["filter"].(model.LabelFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteLabelPayload)
	fc.Result = res
	return ec.marshalODeleteLabelPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteLabelPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddComment(rctx, args["input"].([]*model.AddCommentInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddCommentPayload)
	fc.Result = res
	return ec.marshalOAddCommentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateComment(rctx, args["input"].(model.UpdateCommentInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateCommentPost == nil {
				return nil, errors.New("directive hook_updateCommentPost is not implemented")
			}
			return ec.directives.Hook_updateCommentPost(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateCommentPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UpdateCommentPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateCommentPayload)
	fc.Result = res
	return ec.marshalOUpdateCommentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateCommentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteComment(rctx, args["filter"].(model.CommentFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteCommentPayload)
	fc.Result = res
	return ec.marshalODeleteCommentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteCommentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addBlob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addBlob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddBlob(rctx, args["input"].([]*model.AddBlobInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddBlobPayload)
	fc.Result = res
	return ec.marshalOAddBlobPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateBlob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateBlob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBlob(rctx, args["input"].(model.UpdateBlobInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateBlobPayload)
	fc.Result = res
	return ec.marshalOUpdateBlobPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateBlobPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteBlob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteBlob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBlob(rctx, args["filter"].(model.BlobFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteBlobPayload)
	fc.Result = res
	return ec.marshalODeleteBlobPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteBlobPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addEvent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddEvent(rctx, args["input"].([]*model.AddEventInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddEventPayload)
	fc.Result = res
	return ec.marshalOAddEventPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateEvent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEvent(rctx, args["input"].(model.UpdateEventInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateEventPayload)
	fc.Result = res
	return ec.marshalOUpdateEventPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteEvent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEvent(rctx, args["filter"].(model.EventFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteEventPayload)
	fc.Result = res
	return ec.marshalODeleteEventPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteEventPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addMandate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addMandate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddMandate(rctx, args["input"].([]*model.AddMandateInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddMandatePayload)
	fc.Result = res
	return ec.marshalOAddMandatePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateMandate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateMandate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMandate(rctx, args["input"].(model.UpdateMandateInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateMandatePayload)
	fc.Result = res
	return ec.marshalOUpdateMandatePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateMandatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteMandate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteMandate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMandate(rctx, args["filter"].(model.MandateFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteMandatePayload)
	fc.Result = res
	return ec.marshalODeleteMandatePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteMandatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUser(rctx, args["input"].([]*model.AddUserInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddUserPayload)
	fc.Result = res
	return ec.marshalOAddUserPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, args["input"].(model.UpdateUserInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateUserPayload)
	fc.Result = res
	return ec.marshalOUpdateUserPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUser(rctx, args["filter"].(model.UserFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteUserPayload)
	fc.Result = res
	return ec.marshalODeleteUserPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addUserRights(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addUserRights_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserRights(rctx, args["input"].([]*model.AddUserRightsInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddUserRightsPayload)
	fc.Result = res
	return ec.marshalOAddUserRightsPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_id(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_createdBy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CreatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_name(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Name, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"term"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_nameid(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Nameid, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"hash", "regexp"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Id == nil {
				return nil, errors.New("directive id is not implemented")
			}
			return ec.directives.Id(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_rootnameid(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Rootnameid, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"hash", "regexp"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_parent(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_parent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Parent, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_children(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_children_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Children, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			field, err := ec.unmarshalNString2string(ctx, "parent")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasInverse == nil {
				return nil, errors.New("directive hasInverse is not implemented")
			}
			return ec.directives.HasInverse(ctx, obj, directive1, field)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_type_(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Type, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(model.NodeType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.NodeType`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.NodeType)
	fc.Result = res
	return ec.marshalNNodeType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_tensions_out(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_tensions_out_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.TensionsOut, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			field, err := ec.unmarshalNString2string(ctx, "emitter")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasInverse == nil {
				return nil, errors.New("directive hasInverse is not implemented")
			}
			return ec.directives.HasInverse(ctx, obj, directive1, field)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_tensions_in(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_tensions_in_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.TensionsIn, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			field, err := ec.unmarshalNString2string(ctx, "receiver")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasInverse == nil {
				return nil, errors.New("directive hasInverse is not implemented")
			}
			return ec.directives.HasInverse(ctx, obj, directive1, field)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_about(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.About, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"fulltext"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_mandate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_mandate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_docs(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_docs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Docs, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_source(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_source_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_n_tensions_out(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.NTensionsOut, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			f, err := ec.unmarshalNString2string(ctx, "tensions_out")
			if err != nil {
				return nil, err
			}
			if ec.directives.Count == nil {
				return nil, errors.New("directive count is not implemented")
			}
			return ec.directives.Count(ctx, obj, directive0, f)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_n_tensions_in(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.NTensionsIn, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			f, err := ec.unmarshalNString2string(ctx, "tensions_in")
			if err != nil {
				return nil, err
			}
			if ec.directives.Count == nil {
				return nil, errors.New("directive count is not implemented")
			}
			return ec.directives.Count(ctx, obj, directive0, f)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_n_children(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.NChildren, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			f, err := ec.unmarshalNString2string(ctx, "children")
			if err != nil {
				return nil, err
			}
			if ec.directives.Count == nil {
				return nil, errors.New("directive count is not implemented")
			}
			return ec.directives.Count(ctx, obj, directive0, f)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_stats(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Stats, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Meta_getNodeStats == nil {
				return nil, errors.New("directive meta_getNodeStats is not implemented")
			}
			return ec.directives.Meta_getNodeStats(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.NodeStats); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.NodeStats`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeStats)
	fc.Result = res
	return ec.marshalONodeStats2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStats(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_isRoot(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.IsRoot, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_isPersonal(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.IsPersonal, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_isPrivate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.IsPrivate, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_isArchived(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.IsArchived, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_charac(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_charac_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Charac, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NodeCharac)
	fc.Result = res
	return ec.marshalNNodeCharac2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_labels(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_labels_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_first_link(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_first_link_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstLink, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_second_link(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Node_second_link_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondLink, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_skills(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Skills, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"term"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_role_type(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.RoleType, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.RoleType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.RoleType`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RoleType)
	fc.Result = res
	return ec.marshalORoleType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, field.Selections, res)
}

func (ec *executionContext) _Node_shared(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Node",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shared, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SharedNode)
	fc.Result = res
	return ec.marshalOSharedNode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNode(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeCharac_id(ctx context.Context, field graphql.CollectedField, obj *model.NodeCharac) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeCharac",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeCharac_userCanJoin(ctx context.Context, field graphql.CollectedField, obj *model.NodeCharac) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeCharac",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.UserCanJoin, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeCharac_mode(ctx context.Context, field graphql.CollectedField, obj *model.NodeCharac) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeCharac",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Mode, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(model.NodeMode); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.NodeMode`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.NodeMode)
	fc.Result = res
	return ec.marshalNNodeMode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_id(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_name(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_nameid(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nameid, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_type_(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeType)
	fc.Result = res
	return ec.marshalONodeType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_isPrivate(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPrivate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_charac(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_NodeFragment_charac_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Charac, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeCharac)
	fc.Result = res
	return ec.marshalONodeCharac2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_about(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.About, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_mandate(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_NodeFragment_mandate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_children(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_NodeFragment_children_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Children, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_first_link(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstLink, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_second_link(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondLink, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_skills(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skills, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeFragment_role_type(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeFragment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RoleType)
	fc.Result = res
	return ec.marshalORoleType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeStats_n_member(ctx context.Context, field graphql.CollectedField, obj *model.NodeStats) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NMember, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeStats_n_guest(ctx context.Context, field graphql.CollectedField, obj *model.NodeStats) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NGuest, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeStats_n_circle(ctx context.Context, field graphql.CollectedField, obj *model.NodeStats) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NCircle, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _NodeStats_n_role(ctx context.Context, field graphql.CollectedField, obj *model.NodeStats) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NodeStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NRole, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_id(ctx context.Context, field graphql.CollectedField, obj *model.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Post_createdBy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CreatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_message(ctx context.Context, field graphql.CollectedField, obj *model.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Message, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"fulltext"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getNode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetNode(rctx, args["id"].(*string), args["nameid"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryNode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().QueryNode(rctx, args["filter"].(*model.NodeFilter), args["order"].(*model.NodeOrder), args["first"].(*int), args["offset"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_querySharedNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_querySharedNode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QuerySharedNode(rctx, args["order"].(*model.SharedNodeOrder), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SharedNode)
	fc.Result = res
	return ec.marshalOSharedNode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNode(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getNodeFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getNodeFragment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetNodeFragment(rctx, args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryNodeFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryNodeFragment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryNodeFragment(rctx, args["filter"].(*model.NodeFragmentFilter), args["order"].(*model.NodeFragmentOrder), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getNodeCharac(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getNodeCharac_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetNodeCharac(rctx, args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeCharac)
	fc.Result = res
	return ec.marshalONodeCharac2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryNodeCharac(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryNodeCharac_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryNodeCharac(rctx, args["filter"].(*model.NodeCharacFilter), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeCharac)
	fc.Result = res
	return ec.marshalONodeCharac2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryNodeStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryNodeStats_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryNodeStats(rctx, args["order"].(*model.NodeStatsOrder), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeStats)
	fc.Result = res
	return ec.marshalONodeStats2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStats(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPost(rctx, args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryPost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryPost(rctx, args["filter"].(*model.PostFilter), args["order"].(*model.PostOrder), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Post)
	fc.Result = res
	return ec.marshalOPost2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getTension_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetTension(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryTension_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().QueryTension(rctx, args["filter"].(*model.TensionFilter), args["order"].(*model.TensionOrder), args["first"].(*int), args["offset"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getLabel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetLabel(rctx, args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryLabel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryLabel(rctx, args["filter"].(*model.LabelFilter), args["order"].(*model.LabelOrder), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetComment(rctx, args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryComment(rctx, args["filter"].(*model.CommentFilter), args["order"].(*model.CommentOrder), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBlob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBlob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBlob(rctx, args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryBlob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryBlob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryBlob(rctx, args["filter"].(*model.BlobFilter), args["order"].(*model.BlobOrder), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getEvent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetEvent(rctx, args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryEvent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryEvent(rctx, args["filter"].(*model.EventFilter), args["order"].(*model.EventOrder), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMandate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getMandate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMandate(rctx, args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryMandate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryMandate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryMandate(rctx, args["filter"].(*model.MandateFilter), args["order"].(*model.MandateOrder), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUser(rctx, args["id"].(*string), args["username"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUser(rctx, args["filter"].(*model.UserFilter), args["order"].(*model.UserOrder), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryUserRights(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryUserRights_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserRights(rctx, args["order"].(*model.UserRightsOrder), args["first"].(*int), args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserRights)
	fc.Result = res
	return ec.marshalOUserRights2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _SharedNode_n_labels(ctx context.Context, field graphql.CollectedField, obj *model.SharedNode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SharedNode",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NLabels, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SharedNode_n_tensions(ctx context.Context, field graphql.CollectedField, obj *model.SharedNode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SharedNode",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NTensions, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SharedNode_n_closed_tensions(ctx context.Context, field graphql.CollectedField, obj *model.SharedNode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SharedNode",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NClosedTensions, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tension_createdBy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_nth(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Nth, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_title(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Title, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"fulltext"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_type_(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Type, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(model.TensionType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.TensionType`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TensionType)
	fc.Result = res
	return ec.marshalNTensionType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_emitterid(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Emitterid, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"hash", "regexp"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_emitter(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tension_emitter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Emitter, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Node)
	fc.Result = res
	return ec.marshalNNode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_receiverid(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Receiverid, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"hash", "regexp"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_receiver(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tension_receiver_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Receiver, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Node)
	fc.Result = res
	return ec.marshalNNode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_status(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Status, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(model.TensionStatus); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.TensionStatus`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TensionStatus)
	fc.Result = res
	return ec.marshalNTensionStatus2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_labels(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tension_labels_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_assignees(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tension_assignees_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignees, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_comments(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tension_comments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_action(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TensionAction)
	fc.Result = res
	return ec.marshalOTensionAction2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_blobs(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tension_blobs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Blobs, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			field, err := ec.unmarshalNString2string(ctx, "tension")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasInverse == nil {
				return nil, errors.New("directive hasInverse is not implemented")
			}
			return ec.directives.HasInverse(ctx, obj, directive0, field)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Blob); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Blob`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_history(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tension_history_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.History, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalNEvent2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_n_comments(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.NComments, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			f, err := ec.unmarshalNString2string(ctx, "comments")
			if err != nil {
				return nil, err
			}
			if ec.directives.Count == nil {
				return nil, errors.New("directive count is not implemented")
			}
			return ec.directives.Count(ctx, obj, directive0, f)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_n_blobs(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.NBlobs, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			f, err := ec.unmarshalNString2string(ctx, "blobs")
			if err != nil {
				return nil, err
			}
			if ec.directives.Count == nil {
				return nil, errors.New("directive count is not implemented")
			}
			return ec.directives.Count(ctx, obj, directive0, f)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_id(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CreatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tension_message(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Message, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"fulltext"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateBlobPayload_blob(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBlobPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateBlobPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UpdateBlobPayload_blob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blob, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateBlobPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBlobPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateBlobPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateCommentPayload_comment(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCommentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateCommentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UpdateCommentPayload_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateCommentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCommentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateCommentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateEventPayload_event(ctx context.Context, field graphql.CollectedField, obj *model.UpdateEventPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateEventPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UpdateEventPayload_event_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateEventPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateEventPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateEventPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateLabelPayload_label(ctx context.Context, field graphql.CollectedField, obj *model.UpdateLabelPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateLabelPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UpdateLabelPayload_label_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateLabelPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateLabelPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateLabelPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateMandatePayload_mandate(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMandatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateMandatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UpdateMandatePayload_mandate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateMandatePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMandatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateMandatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateNodeCharacPayload_nodeCharac(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNodeCharacPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateNodeCharacPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UpdateNodeCharacPayload_nodeCharac_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeCharac, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeCharac)
	fc.Result = res
	return ec.marshalONodeCharac2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateNodeCharacPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNodeCharacPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateNodeCharacPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateNodeFragmentPayload_nodeFragment(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNodeFragmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateNodeFragmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UpdateNodeFragmentPayload_nodeFragment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeFragment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateNodeFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNodeFragmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateNodeFragmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateNodePayload_node(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNodePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateNodePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UpdateNodePayload_node_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Node, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateNodePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNodePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateNodePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdatePostPayload_post(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdatePostPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UpdatePostPayload_post_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Post)
	fc.Result = res
	return ec.marshalOPost2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdatePostPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdatePostPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateTensionPayload_tension(ctx context.Context, field graphql.CollectedField, obj *model.UpdateTensionPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateTensionPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UpdateTensionPayload_tension_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Tension, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateTensionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateTensionPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateTensionPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateUserPayload_user(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateUserPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UpdateUserPayload_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateUserPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateUserPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_lastAck(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastAck, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Username, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Id == nil {
				return nil, errors.New("directive id is not implemented")
			}
			return ec.directives.Id(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_password(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Password, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hidden == nil {
				return nil, errors.New("directive hidden is not implemented")
			}
			return ec.directives.Hidden(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Email, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			by, err := ec.unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, []interface{}{"hash"})
			if err != nil {
				return nil, err
			}
			if ec.directives.Search == nil {
				return nil, errors.New("directive search is not implemented")
			}
			return ec.directives.Search(ctx, obj, directive0, by)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hidden == nil {
				return nil, errors.New("directive hidden is not implemented")
			}
			return ec.directives.Hidden(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_emailHash(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.EmailHash, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hidden == nil {
				return nil, errors.New("directive hidden is not implemented")
			}
			return ec.directives.Hidden(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_emailValidated(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.EmailValidated, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hidden == nil {
				return nil, errors.New("directive hidden is not implemented")
			}
			return ec.directives.Hidden(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_rights(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rights, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserRights)
	fc.Result = res
	return ec.marshalNUserRights2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx, field.Selections, res)
}

func (ec *executionContext) _User_roles(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_roles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Roles, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			field, err := ec.unmarshalNString2string(ctx, "first_link")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasInverse == nil {
				return nil, errors.New("directive hasInverse is not implemented")
			}
			return ec.directives.HasInverse(ctx, obj, directive1, field)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_backed_roles(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_backed_roles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.BackedRoles, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			field, err := ec.unmarshalNString2string(ctx, "second_link")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasInverse == nil {
				return nil, errors.New("directive hasInverse is not implemented")
			}
			return ec.directives.HasInverse(ctx, obj, directive1, field)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_tensions_created(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_tensions_created_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.TensionsCreated, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			field, err := ec.unmarshalNString2string(ctx, "createdBy")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasInverse == nil {
				return nil, errors.New("directive hasInverse is not implemented")
			}
			return ec.directives.HasInverse(ctx, obj, directive1, field)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_tensions_assigned(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_tensions_assigned_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.TensionsAssigned, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HidePrivate == nil {
				return nil, errors.New("directive hidePrivate is not implemented")
			}
			return ec.directives.HidePrivate(ctx, obj, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			field, err := ec.unmarshalNString2string(ctx, "assignees")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasInverse == nil {
				return nil, errors.New("directive hasInverse is not implemented")
			}
			return ec.directives.HasInverse(ctx, obj, directive1, field)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_bio(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bio, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_utc(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Utc, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRights_canLogin(ctx context.Context, field graphql.CollectedField, obj *model.UserRights) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserRights",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanLogin, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRights_canCreateRoot(ctx context.Context, field graphql.CollectedField, obj *model.UserRights) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserRights",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanCreateRoot, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRights_maxPublicOrga(ctx context.Context, field graphql.CollectedField, obj *model.UserRights) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserRights",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPublicOrga, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddBlobInput(ctx context.Context, obj interface{}) (model.AddBlobInput, error) {
	var it model.AddBlobInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension":
			var err error
			it.Tension, err = ec.unmarshalNTensionRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "blob_type":
			var err error
			it.BlobType, err = ec.unmarshalNBlobType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, v)
			if err != nil {
				return it, err
			}
		case "pushedFlag":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.PushedFlag = data
			} else if tmp == nil {
				it.PushedFlag = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "archivedFlag":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.ArchivedFlag = data
			} else if tmp == nil {
				it.ArchivedFlag = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "node":
			var err error
			it.Node, err = ec.unmarshalONodeFragmentRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "md":
			var err error
			it.Md, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddCommentInput(ctx context.Context, obj interface{}) (model.AddCommentInput, error) {
	var it model.AddCommentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_VOID":
			var err error
			it.Void, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddEventInput(ctx context.Context, obj interface{}) (model.AddEventInput, error) {
	var it model.AddEventInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "event_type":
			var err error
			it.EventType, err = ec.unmarshalNTensionEvent2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			if err != nil {
				return it, err
			}
		case "old":
			var err error
			it.Old, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "new":
			var err error
			it.New, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddLabelInput(ctx context.Context, obj interface{}) (model.AddLabelInput, error) {
	var it model.AddLabelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "rootnameid":
			var err error
			it.Rootnameid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "name")
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_toLower == nil {
					return nil, errors.New("directive alter_toLower is not implemented")
				}
				return ec.directives.Alter_toLower(ctx, obj, directive0, f)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "name")
				if err != nil {
					return nil, err
				}
				s, err := ec.unmarshalOString2ᚖstring(ctx, "rootnameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_unique == nil {
					return nil, errors.New("directive alter_unique is not implemented")
				}
				return ec.directives.Alter_unique(ctx, obj, directive1, f, s)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "description":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "description")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalNInt2int(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_maxLength == nil {
					return nil, errors.New("directive alter_maxLength is not implemented")
				}
				return ec.directives.Alter_maxLength(ctx, obj, directive0, f, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "color":
			var err error
			it.Color, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions":
			var err error
			it.Tensions, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nodes":
			var err error
			it.Nodes, err = ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddMandateInput(ctx context.Context, obj interface{}) (model.AddMandateInput, error) {
	var it model.AddMandateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purpose":
			var err error
			it.Purpose, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "responsabilities":
			var err error
			it.Responsabilities, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domains":
			var err error
			it.Domains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "policies":
			var err error
			it.Policies, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddNodeCharacInput(ctx context.Context, obj interface{}) (model.AddNodeCharacInput, error) {
	var it model.AddNodeCharacInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userCanJoin":
			var err error
			it.UserCanJoin, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error
			it.Mode, err = ec.unmarshalNNodeMode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddNodeFragmentInput(ctx context.Context, obj interface{}) (model.AddNodeFragmentInput, error) {
	var it model.AddNodeFragmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "name")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_minLength == nil {
					return nil, errors.New("directive alter_minLength is not implemented")
				}
				return ec.directives.Alter_minLength(ctx, obj, directive0, f, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "nameid":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "nameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_toLower == nil {
					return nil, errors.New("directive alter_toLower is not implemented")
				}
				return ec.directives.Alter_toLower(ctx, obj, directive0, f)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Nameid = data
			} else if tmp == nil {
				it.Nameid = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "type_":
			var err error
			it.Type, err = ec.unmarshalONodeType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPrivate":
			var err error
			it.IsPrivate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "charac":
			var err error
			it.Charac, err = ec.unmarshalONodeCharacRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "about")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalNInt2int(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_maxLength == nil {
					return nil, errors.New("directive alter_maxLength is not implemented")
				}
				return ec.directives.Alter_maxLength(ctx, obj, directive0, f, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.About = data
			} else if tmp == nil {
				it.About = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "mandate":
			var err error
			it.Mandate, err = ec.unmarshalOMandateRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error
			it.Children, err = ec.unmarshalONodeFragmentRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_link":
			var err error
			it.FirstLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "second_link":
			var err error
			it.SecondLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "skills":
			var err error
			it.Skills, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_type":
			var err error
			it.RoleType, err = ec.unmarshalORoleType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddNodeInput(ctx context.Context, obj interface{}) (model.AddNodeInput, error) {
	var it model.AddNodeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameid":
			var err error
			it.Nameid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error
			it.Rootnameid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent":
			var err error
			it.Parent, err = ec.unmarshalONodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error
			it.Children, err = ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error
			it.Type, err = ec.unmarshalNNodeType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_out":
			var err error
			it.TensionsOut, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_in":
			var err error
			it.TensionsIn, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error
			it.About, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mandate":
			var err error
			it.Mandate, err = ec.unmarshalOMandateRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "docs":
			var err error
			it.Docs, err = ec.unmarshalOBlobRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error
			it.Source, err = ec.unmarshalOBlobRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_tensions_out":
			var err error
			it.NTensionsOut, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_tensions_in":
			var err error
			it.NTensionsIn, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_children":
			var err error
			it.NChildren, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "stats":
			var err error
			it.Stats, err = ec.unmarshalONodeStatsRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRoot":
			var err error
			it.IsRoot, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPersonal":
			var err error
			it.IsPersonal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPrivate":
			var err error
			it.IsPrivate, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isArchived":
			var err error
			it.IsArchived, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "charac":
			var err error
			it.Charac, err = ec.unmarshalNNodeCharacRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "labels":
			var err error
			it.Labels, err = ec.unmarshalOLabelRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_link":
			var err error
			it.FirstLink, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "second_link":
			var err error
			it.SecondLink, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "skills":
			var err error
			it.Skills, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_type":
			var err error
			it.RoleType, err = ec.unmarshalORoleType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		case "shared":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOSharedNodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.SharedNodeRef); ok {
				it.Shared = data
			} else if tmp == nil {
				it.Shared = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.SharedNodeRef`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddNodeStatsInput(ctx context.Context, obj interface{}) (model.AddNodeStatsInput, error) {
	var it model.AddNodeStatsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "n_member":
			var err error
			it.NMember, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_guest":
			var err error
			it.NGuest, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_circle":
			var err error
			it.NCircle, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_role":
			var err error
			it.NRole, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddSharedNodeInput(ctx context.Context, obj interface{}) (model.AddSharedNodeInput, error) {
	var it model.AddSharedNodeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "n_labels":
			var err error
			it.NLabels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_tensions":
			var err error
			it.NTensions, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_closed_tensions":
			var err error
			it.NClosedTensions, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddTensionInput(ctx context.Context, obj interface{}) (model.AddTensionInput, error) {
	var it model.AddTensionInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdBy":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.Add_isOwner == nil {
					return nil, errors.New("directive add_isOwner is not implemented")
				}
				return ec.directives.Add_isOwner(ctx, obj, directive0, u)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UserRef`, tmp)
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nth":
			var err error
			it.Nth, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "title")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_minLength == nil {
					return nil, errors.New("directive alter_minLength is not implemented")
				}
				return ec.directives.Alter_minLength(ctx, obj, directive1, f, n)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "type_":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNTensionType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(model.TensionType); ok {
				it.Type = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.TensionType`, tmp)
			}
		case "emitterid":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Emitterid = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "emitter":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNNodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.NodeRef); ok {
				it.Emitter = data
			} else if tmp == nil {
				it.Emitter = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.NodeRef`, tmp)
			}
		case "receiverid":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"receiver"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Receiverid = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "receiver":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNNodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"receiver"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.NodeRef); ok {
				it.Receiver = data
			} else if tmp == nil {
				it.Receiver = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.NodeRef`, tmp)
			}
		case "status":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNTensionStatus2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter", "receiver"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(model.TensionStatus); ok {
				it.Status = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be zerogov/fractal6.go/graph/model.TensionStatus`, tmp)
			}
		case "labels":
			var err error
			it.Labels, err = ec.unmarshalOLabelRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignees":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter", "receiver"})
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, nil, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.UserRef); ok {
				it.Assignees = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.UserRef`, tmp)
			}
		case "comments":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCommentRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter", "receiver"})
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRoot == nil {
					return nil, errors.New("directive alter_hasRoot is not implemented")
				}
				return ec.directives.Alter_hasRoot(ctx, obj, directive0, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.CommentRef); ok {
				it.Comments = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.CommentRef`, tmp)
			}
		case "action":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionAction2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter", "receiver"})
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRoot == nil {
					return nil, errors.New("directive alter_hasRoot is not implemented")
				}
				return ec.directives.Alter_hasRoot(ctx, obj, directive0, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.TensionAction); ok {
				it.Action = data
			} else if tmp == nil {
				it.Action = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.TensionAction`, tmp)
			}
		case "blobs":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOBlobRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter", "receiver"})
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRoot == nil {
					return nil, errors.New("directive alter_hasRoot is not implemented")
				}
				return ec.directives.Alter_hasRoot(ctx, obj, directive0, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.BlobRef); ok {
				it.Blobs = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.BlobRef`, tmp)
			}
		case "history":
			var err error
			it.History, err = ec.unmarshalNEventRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_comments":
			var err error
			it.NComments, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_blobs":
			var err error
			it.NBlobs, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddUserInput(ctx context.Context, obj interface{}) (model.AddUserInput, error) {
	var it model.AddUserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdAt":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNDateTime2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.CreatedAt = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "lastAck":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNDateTime2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.LastAck = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "username":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "username")
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_toLower == nil {
					return nil, errors.New("directive alter_toLower is not implemented")
				}
				return ec.directives.Alter_toLower(ctx, obj, directive0, f)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Username = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailHash":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.EmailHash = data
			} else if tmp == nil {
				it.EmailHash = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "emailValidated":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNBoolean2bool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(bool); ok {
				it.EmailValidated = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
			}
		case "rights":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNUserRightsRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.UserRightsRef); ok {
				it.Rights = data
			} else if tmp == nil {
				it.Rights = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UserRightsRef`, tmp)
			}
		case "roles":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Roles = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.NodeRef`, tmp)
			}
		case "backed_roles":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.BackedRoles = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.NodeRef`, tmp)
			}
		case "tensions_created":
			var err error
			it.TensionsCreated, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_assigned":
			var err error
			it.TensionsAssigned, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "bio":
			var err error
			it.Bio, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "utc":
			var err error
			it.Utc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddUserRightsInput(ctx context.Context, obj interface{}) (model.AddUserRightsInput, error) {
	var it model.AddUserRightsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "canLogin":
			var err error
			it.CanLogin, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "canCreateRoot":
			var err error
			it.CanCreateRoot, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxPublicOrga":
			var err error
			it.MaxPublicOrga, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthRule(ctx context.Context, obj interface{}) (model.AuthRule, error) {
	var it model.AuthRule
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "and":
			var err error
			it.And, err = ec.unmarshalOAuthRule2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOAuthRule2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalOAuthRule2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule":
			var err error
			it.Rule, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobFilter(ctx context.Context, obj interface{}) (model.BlobFilter, error) {
	var it model.BlobFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "blob_type":
			var err error
			it.BlobType, err = ec.unmarshalOBlobType_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobTypeHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "pushedFlag":
			var err error
			it.PushedFlag, err = ec.unmarshalODateTimeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "archivedFlag":
			var err error
			it.ArchivedFlag, err = ec.unmarshalODateTimeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalOBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobOrder(ctx context.Context, obj interface{}) (model.BlobOrder, error) {
	var it model.BlobOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalOBlobOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOBlobOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalOBlobOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobPatch(ctx context.Context, obj interface{}) (model.BlobPatch, error) {
	var it model.BlobPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension":
			var err error
			it.Tension, err = ec.unmarshalOTensionRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "blob_type":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOBlobType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.BlobType); ok {
				it.BlobType = data
			} else if tmp == nil {
				it.BlobType = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.BlobType`, tmp)
			}
		case "pushedFlag":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.PushedFlag = data
			} else if tmp == nil {
				it.PushedFlag = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "archivedFlag":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.ArchivedFlag = data
			} else if tmp == nil {
				it.ArchivedFlag = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "node":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeFragmentRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.NodeFragmentRef); ok {
				it.Node = data
			} else if tmp == nil {
				it.Node = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.NodeFragmentRef`, tmp)
			}
		case "md":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Md = data
			} else if tmp == nil {
				it.Md = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobRef(ctx context.Context, obj interface{}) (model.BlobRef, error) {
	var it model.BlobRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension":
			var err error
			it.Tension, err = ec.unmarshalOTensionRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "blob_type":
			var err error
			it.BlobType, err = ec.unmarshalOBlobType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, v)
			if err != nil {
				return it, err
			}
		case "pushedFlag":
			var err error
			it.PushedFlag, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "archivedFlag":
			var err error
			it.ArchivedFlag, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "node":
			var err error
			it.Node, err = ec.unmarshalONodeFragmentRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "md":
			var err error
			it.Md, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobType_hash(ctx context.Context, obj interface{}) (model.BlobTypeHash, error) {
	var it model.BlobTypeHash
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalNBlobType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentFilter(ctx context.Context, obj interface{}) (model.CommentFilter, error) {
	var it model.CommentFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOCommentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOCommentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalOCommentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentOrder(ctx context.Context, obj interface{}) (model.CommentOrder, error) {
	var it model.CommentOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalOCommentOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOCommentOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalOCommentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentPatch(ctx context.Context, obj interface{}) (model.CommentPatch, error) {
	var it model.CommentPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.Patch_isOwner == nil {
					return nil, errors.New("directive patch_isOwner is not implemented")
				}
				return ec.directives.Patch_isOwner(ctx, obj, directive0, u)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Message = data
			} else if tmp == nil {
				it.Message = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "_VOID":
			var err error
			it.Void, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentRef(ctx context.Context, obj interface{}) (model.CommentRef, error) {
	var it model.CommentRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_VOID":
			var err error
			it.Void, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomHTTP(ctx context.Context, obj interface{}) (model.CustomHTTP, error) {
	var it model.CustomHTTP
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "url":
			var err error
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "method":
			var err error
			it.Method, err = ec.unmarshalNHTTPMethod2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐHTTPMethod(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error
			it.Body, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "graphql":
			var err error
			it.Graphql, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error
			it.Mode, err = ec.unmarshalOMode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMode(ctx, v)
			if err != nil {
				return it, err
			}
		case "forwardHeaders":
			var err error
			it.ForwardHeaders, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "secretHeaders":
			var err error
			it.SecretHeaders, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "introspectionHeaders":
			var err error
			it.IntrospectionHeaders, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "skipIntrospection":
			var err error
			it.SkipIntrospection, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDateTimeFilter(ctx context.Context, obj interface{}) (model.DateTimeFilter, error) {
	var it model.DateTimeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error
			it.Le, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error
			it.Lt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error
			it.Ge, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error
			it.Gt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventFilter(ctx context.Context, obj interface{}) (model.EventFilter, error) {
	var it model.EventFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "event_type":
			var err error
			it.EventType, err = ec.unmarshalOTensionEvent_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOEventFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOEventFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalOEventFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventOrder(ctx context.Context, obj interface{}) (model.EventOrder, error) {
	var it model.EventOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalOEventOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOEventOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalOEventOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventPatch(ctx context.Context, obj interface{}) (model.EventPatch, error) {
	var it model.EventPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "event_type":
			var err error
			it.EventType, err = ec.unmarshalOTensionEvent2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			if err != nil {
				return it, err
			}
		case "old":
			var err error
			it.Old, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "new":
			var err error
			it.New, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventRef(ctx context.Context, obj interface{}) (model.EventRef, error) {
	var it model.EventRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "event_type":
			var err error
			it.EventType, err = ec.unmarshalOTensionEvent2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			if err != nil {
				return it, err
			}
		case "old":
			var err error
			it.Old, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "new":
			var err error
			it.New, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatFilter(ctx context.Context, obj interface{}) (model.FloatFilter, error) {
	var it model.FloatFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error
			it.Le, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error
			it.Ge, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntFilter(ctx context.Context, obj interface{}) (model.IntFilter, error) {
	var it model.IntFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error
			it.Le, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error
			it.Ge, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelFilter(ctx context.Context, obj interface{}) (model.LabelFilter, error) {
	var it model.LabelFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error
			it.Rootnameid, err = ec.unmarshalOStringTermFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringTermFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringHashFilter_StringTermFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringTermFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalOLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelOrder(ctx context.Context, obj interface{}) (model.LabelOrder, error) {
	var it model.LabelOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalOLabelOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOLabelOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalOLabelOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelPatch(ctx context.Context, obj interface{}) (model.LabelPatch, error) {
	var it model.LabelPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "rootnameid":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Rootnameid = data
			} else if tmp == nil {
				it.Rootnameid = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "name":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "name")
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_toLower == nil {
					return nil, errors.New("directive alter_toLower is not implemented")
				}
				return ec.directives.Alter_toLower(ctx, obj, directive0, f)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "name")
				if err != nil {
					return nil, err
				}
				s, err := ec.unmarshalOString2ᚖstring(ctx, "rootnameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_unique == nil {
					return nil, errors.New("directive alter_unique is not implemented")
				}
				return ec.directives.Alter_unique(ctx, obj, directive1, f, s)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "description":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "description")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalNInt2int(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_maxLength == nil {
					return nil, errors.New("directive alter_maxLength is not implemented")
				}
				return ec.directives.Alter_maxLength(ctx, obj, directive0, f, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "color":
			var err error
			it.Color, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions":
			var err error
			it.Tensions, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nodes":
			var err error
			it.Nodes, err = ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelRef(ctx context.Context, obj interface{}) (model.LabelRef, error) {
	var it model.LabelRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error
			it.Rootnameid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "color":
			var err error
			it.Color, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions":
			var err error
			it.Tensions, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nodes":
			var err error
			it.Nodes, err = ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMandateFilter(ctx context.Context, obj interface{}) (model.MandateFilter, error) {
	var it model.MandateFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "purpose":
			var err error
			it.Purpose, err = ec.unmarshalOStringFullTextFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalOMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMandateOrder(ctx context.Context, obj interface{}) (model.MandateOrder, error) {
	var it model.MandateOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalOMandateOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOMandateOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalOMandateOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMandatePatch(ctx context.Context, obj interface{}) (model.MandatePatch, error) {
	var it model.MandatePatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purpose":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Purpose = data
			} else if tmp == nil {
				it.Purpose = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "responsabilities":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Responsabilities = data
			} else if tmp == nil {
				it.Responsabilities = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "domains":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Domains = data
			} else if tmp == nil {
				it.Domains = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "policies":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Policies = data
			} else if tmp == nil {
				it.Policies = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMandateRef(ctx context.Context, obj interface{}) (model.MandateRef, error) {
	var it model.MandateRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "purpose":
			var err error
			it.Purpose, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "responsabilities":
			var err error
			it.Responsabilities, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domains":
			var err error
			it.Domains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "policies":
			var err error
			it.Policies, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeCharacFilter(ctx context.Context, obj interface{}) (model.NodeCharacFilter, error) {
	var it model.NodeCharacFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userCanJoin":
			var err error
			it.UserCanJoin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error
			it.Mode, err = ec.unmarshalONodeMode_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeModeHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalONodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalONodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalONodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeCharacPatch(ctx context.Context, obj interface{}) (model.NodeCharacPatch, error) {
	var it model.NodeCharacPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userCanJoin":
			var err error
			it.UserCanJoin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error
			it.Mode, err = ec.unmarshalONodeMode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeCharacRef(ctx context.Context, obj interface{}) (model.NodeCharacRef, error) {
	var it model.NodeCharacRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userCanJoin":
			var err error
			it.UserCanJoin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error
			it.Mode, err = ec.unmarshalONodeMode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeFilter(ctx context.Context, obj interface{}) (model.NodeFilter, error) {
	var it model.NodeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringTermFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringTermFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameid":
			var err error
			it.Nameid, err = ec.unmarshalOStringHashFilter_StringRegExpFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error
			it.Rootnameid, err = ec.unmarshalOStringHashFilter_StringRegExpFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error
			it.Type, err = ec.unmarshalONodeType_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeTypeHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error
			it.About, err = ec.unmarshalOStringFullTextFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRoot":
			var err error
			it.IsRoot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPersonal":
			var err error
			it.IsPersonal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPrivate":
			var err error
			it.IsPrivate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isArchived":
			var err error
			it.IsArchived, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "skills":
			var err error
			it.Skills, err = ec.unmarshalOStringTermFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringTermFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_type":
			var err error
			it.RoleType, err = ec.unmarshalORoleType_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleTypeHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeFragmentFilter(ctx context.Context, obj interface{}) (model.NodeFragmentFilter, error) {
	var it model.NodeFragmentFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalONodeFragmentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeFragmentOrder(ctx context.Context, obj interface{}) (model.NodeFragmentOrder, error) {
	var it model.NodeFragmentOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalONodeFragmentOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalONodeFragmentOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalONodeFragmentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeFragmentPatch(ctx context.Context, obj interface{}) (model.NodeFragmentPatch, error) {
	var it model.NodeFragmentPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "name")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_minLength == nil {
					return nil, errors.New("directive alter_minLength is not implemented")
				}
				return ec.directives.Alter_minLength(ctx, obj, directive0, f, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "nameid":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "nameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_toLower == nil {
					return nil, errors.New("directive alter_toLower is not implemented")
				}
				return ec.directives.Alter_toLower(ctx, obj, directive0, f)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Nameid = data
			} else if tmp == nil {
				it.Nameid = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "type_":
			var err error
			it.Type, err = ec.unmarshalONodeType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPrivate":
			var err error
			it.IsPrivate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "charac":
			var err error
			it.Charac, err = ec.unmarshalONodeCharacRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "about")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalNInt2int(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_maxLength == nil {
					return nil, errors.New("directive alter_maxLength is not implemented")
				}
				return ec.directives.Alter_maxLength(ctx, obj, directive0, f, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.About = data
			} else if tmp == nil {
				it.About = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "mandate":
			var err error
			it.Mandate, err = ec.unmarshalOMandateRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error
			it.Children, err = ec.unmarshalONodeFragmentRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_link":
			var err error
			it.FirstLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "second_link":
			var err error
			it.SecondLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "skills":
			var err error
			it.Skills, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_type":
			var err error
			it.RoleType, err = ec.unmarshalORoleType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeFragmentRef(ctx context.Context, obj interface{}) (model.NodeFragmentRef, error) {
	var it model.NodeFragmentRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameid":
			var err error
			it.Nameid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error
			it.Type, err = ec.unmarshalONodeType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPrivate":
			var err error
			it.IsPrivate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "charac":
			var err error
			it.Charac, err = ec.unmarshalONodeCharacRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error
			it.About, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mandate":
			var err error
			it.Mandate, err = ec.unmarshalOMandateRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error
			it.Children, err = ec.unmarshalONodeFragmentRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_link":
			var err error
			it.FirstLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "second_link":
			var err error
			it.SecondLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "skills":
			var err error
			it.Skills, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_type":
			var err error
			it.RoleType, err = ec.unmarshalORoleType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeMode_hash(ctx context.Context, obj interface{}) (model.NodeModeHash, error) {
	var it model.NodeModeHash
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalNNodeMode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeOrder(ctx context.Context, obj interface{}) (model.NodeOrder, error) {
	var it model.NodeOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalONodeOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalONodeOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalONodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodePatch(ctx context.Context, obj interface{}) (model.NodePatch, error) {
	var it model.NodePatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdBy":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UserRef`, tmp)
			}
		case "createdAt":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "updatedAt":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "name":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "rootnameid":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Rootnameid = data
			} else if tmp == nil {
				it.Rootnameid = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "parent":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.NodeRef); ok {
				it.Parent = data
			} else if tmp == nil {
				it.Parent = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.NodeRef`, tmp)
			}
		case "children":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Children = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.NodeRef`, tmp)
			}
		case "type_":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.NodeType); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.NodeType`, tmp)
			}
		case "tensions_out":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.TensionsOut = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.TensionRef`, tmp)
			}
		case "tensions_in":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.TensionsIn = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.TensionRef`, tmp)
			}
		case "about":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.About = data
			} else if tmp == nil {
				it.About = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "mandate":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMandateRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.MandateRef); ok {
				it.Mandate = data
			} else if tmp == nil {
				it.Mandate = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.MandateRef`, tmp)
			}
		case "docs":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOBlobRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.BlobRef); ok {
				it.Docs = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.BlobRef`, tmp)
			}
		case "source":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOBlobRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.BlobRef); ok {
				it.Source = data
			} else if tmp == nil {
				it.Source = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.BlobRef`, tmp)
			}
		case "n_tensions_out":
			var err error
			it.NTensionsOut, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_tensions_in":
			var err error
			it.NTensionsIn, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_children":
			var err error
			it.NChildren, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "stats":
			var err error
			it.Stats, err = ec.unmarshalONodeStatsRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRoot":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*bool); ok {
				it.IsRoot = data
			} else if tmp == nil {
				it.IsRoot = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
			}
		case "isPersonal":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*bool); ok {
				it.IsPersonal = data
			} else if tmp == nil {
				it.IsPersonal = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
			}
		case "isPrivate":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*bool); ok {
				it.IsPrivate = data
			} else if tmp == nil {
				it.IsPrivate = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
			}
		case "isArchived":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*bool); ok {
				it.IsArchived = data
			} else if tmp == nil {
				it.IsArchived = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
			}
		case "charac":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeCharacRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.NodeCharacRef); ok {
				it.Charac = data
			} else if tmp == nil {
				it.Charac = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.NodeCharacRef`, tmp)
			}
		case "labels":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLabelRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.LabelRef); ok {
				it.Labels = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.LabelRef`, tmp)
			}
		case "first_link":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.FirstLink = data
			} else if tmp == nil {
				it.FirstLink = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UserRef`, tmp)
			}
		case "second_link":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.SecondLink = data
			} else if tmp == nil {
				it.SecondLink = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UserRef`, tmp)
			}
		case "skills":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]string); ok {
				it.Skills = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
			}
		case "role_type":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalORoleType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.RoleType); ok {
				it.RoleType = data
			} else if tmp == nil {
				it.RoleType = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.RoleType`, tmp)
			}
		case "shared":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOSharedNodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.SharedNodeRef); ok {
				it.Shared = data
			} else if tmp == nil {
				it.Shared = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.SharedNodeRef`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeRef(ctx context.Context, obj interface{}) (model.NodeRef, error) {
	var it model.NodeRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameid":
			var err error
			it.Nameid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error
			it.Rootnameid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent":
			var err error
			it.Parent, err = ec.unmarshalONodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error
			it.Children, err = ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error
			it.Type, err = ec.unmarshalONodeType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_out":
			var err error
			it.TensionsOut, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_in":
			var err error
			it.TensionsIn, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error
			it.About, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mandate":
			var err error
			it.Mandate, err = ec.unmarshalOMandateRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "docs":
			var err error
			it.Docs, err = ec.unmarshalOBlobRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error
			it.Source, err = ec.unmarshalOBlobRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_tensions_out":
			var err error
			it.NTensionsOut, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_tensions_in":
			var err error
			it.NTensionsIn, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_children":
			var err error
			it.NChildren, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "stats":
			var err error
			it.Stats, err = ec.unmarshalONodeStatsRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRoot":
			var err error
			it.IsRoot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPersonal":
			var err error
			it.IsPersonal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPrivate":
			var err error
			it.IsPrivate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isArchived":
			var err error
			it.IsArchived, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "charac":
			var err error
			it.Charac, err = ec.unmarshalONodeCharacRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "labels":
			var err error
			it.Labels, err = ec.unmarshalOLabelRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_link":
			var err error
			it.FirstLink, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "second_link":
			var err error
			it.SecondLink, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "skills":
			var err error
			it.Skills, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_type":
			var err error
			it.RoleType, err = ec.unmarshalORoleType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		case "shared":
			var err error
			it.Shared, err = ec.unmarshalOSharedNodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeStatsOrder(ctx context.Context, obj interface{}) (model.NodeStatsOrder, error) {
	var it model.NodeStatsOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalONodeStatsOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalONodeStatsOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalONodeStatsOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeStatsRef(ctx context.Context, obj interface{}) (model.NodeStatsRef, error) {
	var it model.NodeStatsRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "n_member":
			var err error
			it.NMember, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_guest":
			var err error
			it.NGuest, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_circle":
			var err error
			it.NCircle, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_role":
			var err error
			it.NRole, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeType_hash(ctx context.Context, obj interface{}) (model.NodeTypeHash, error) {
	var it model.NodeTypeHash
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalNNodeType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostFilter(ctx context.Context, obj interface{}) (model.PostFilter, error) {
	var it model.PostFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOPostFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOPostFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalOPostFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostOrder(ctx context.Context, obj interface{}) (model.PostOrder, error) {
	var it model.PostOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalOPostOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOPostOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalOPostOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostPatch(ctx context.Context, obj interface{}) (model.PostPatch, error) {
	var it model.PostPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdBy":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UserRef`, tmp)
			}
		case "createdAt":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "updatedAt":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.Patch_isOwner == nil {
					return nil, errors.New("directive patch_isOwner is not implemented")
				}
				return ec.directives.Patch_isOwner(ctx, obj, directive0, u)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "message":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.Patch_isOwner == nil {
					return nil, errors.New("directive patch_isOwner is not implemented")
				}
				return ec.directives.Patch_isOwner(ctx, obj, directive0, u)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Message = data
			} else if tmp == nil {
				it.Message = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostRef(ctx context.Context, obj interface{}) (model.PostRef, error) {
	var it model.PostRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleType_hash(ctx context.Context, obj interface{}) (model.RoleTypeHash, error) {
	var it model.RoleTypeHash
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalORoleType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSharedNodeOrder(ctx context.Context, obj interface{}) (model.SharedNodeOrder, error) {
	var it model.SharedNodeOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalOSharedNodeOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOSharedNodeOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalOSharedNodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSharedNodeRef(ctx context.Context, obj interface{}) (model.SharedNodeRef, error) {
	var it model.SharedNodeRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "n_labels":
			var err error
			it.NLabels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_tensions":
			var err error
			it.NTensions, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_closed_tensions":
			var err error
			it.NClosedTensions, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringExactFilter(ctx context.Context, obj interface{}) (model.StringExactFilter, error) {
	var it model.StringExactFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error
			it.Le, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error
			it.Ge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringFullTextFilter(ctx context.Context, obj interface{}) (model.StringFullTextFilter, error) {
	var it model.StringFullTextFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alloftext":
			var err error
			it.Alloftext, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "anyoftext":
			var err error
			it.Anyoftext, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringHashFilter(ctx context.Context, obj interface{}) (model.StringHashFilter, error) {
	var it model.StringHashFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringHashFilter_StringRegExpFilter(ctx context.Context, obj interface{}) (model.StringHashFilterStringRegExpFilter, error) {
	var it model.StringHashFilterStringRegExpFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "regexp":
			var err error
			it.Regexp, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringHashFilter_StringTermFilter(ctx context.Context, obj interface{}) (model.StringHashFilterStringTermFilter, error) {
	var it model.StringHashFilterStringTermFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "allofterms":
			var err error
			it.Allofterms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "anyofterms":
			var err error
			it.Anyofterms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringRegExpFilter(ctx context.Context, obj interface{}) (model.StringRegExpFilter, error) {
	var it model.StringRegExpFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "regexp":
			var err error
			it.Regexp, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringTermFilter(ctx context.Context, obj interface{}) (model.StringTermFilter, error) {
	var it model.StringTermFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "allofterms":
			var err error
			it.Allofterms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "anyofterms":
			var err error
			it.Anyofterms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionEvent_hash(ctx context.Context, obj interface{}) (model.TensionEventHash, error) {
	var it model.TensionEventHash
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalNTensionEvent2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionFilter(ctx context.Context, obj interface{}) (model.TensionFilter, error) {
	var it model.TensionFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nth":
			var err error
			it.Nth, err = ec.unmarshalOStringTermFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringTermFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalOStringFullTextFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error
			it.Type, err = ec.unmarshalOTensionType_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionTypeHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "emitterid":
			var err error
			it.Emitterid, err = ec.unmarshalOStringHashFilter_StringRegExpFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverid":
			var err error
			it.Receiverid, err = ec.unmarshalOStringHashFilter_StringRegExpFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOTensionStatus_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatusHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionOrder(ctx context.Context, obj interface{}) (model.TensionOrder, error) {
	var it model.TensionOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalOTensionOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOTensionOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalOTensionOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionPatch(ctx context.Context, obj interface{}) (model.TensionPatch, error) {
	var it model.TensionPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdBy":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_RO == nil {
					return nil, errors.New("directive patch_RO is not implemented")
				}
				return ec.directives.Patch_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UserRef`, tmp)
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nth":
			var err error
			it.Nth, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "title")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_minLength == nil {
					return nil, errors.New("directive alter_minLength is not implemented")
				}
				return ec.directives.Alter_minLength(ctx, obj, directive1, f, n)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Title = data
			} else if tmp == nil {
				it.Title = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "type_":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.TensionType); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.TensionType`, tmp)
			}
		case "emitterid":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Emitterid = data
			} else if tmp == nil {
				it.Emitterid = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "emitter":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.NodeRef); ok {
				it.Emitter = data
			} else if tmp == nil {
				it.Emitter = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.NodeRef`, tmp)
			}
		case "receiverid":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"receiver"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Receiverid = data
			} else if tmp == nil {
				it.Receiverid = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "receiver":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"receiver"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.NodeRef); ok {
				it.Receiver = data
			} else if tmp == nil {
				it.Receiver = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.NodeRef`, tmp)
			}
		case "status":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionStatus2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter", "receiver"})
				if err != nil {
					return nil, err
				}
				u, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, u, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.TensionStatus); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.TensionStatus`, tmp)
			}
		case "labels":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLabelRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter", "receiver"})
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Patch_hasRole == nil {
					return nil, errors.New("directive patch_hasRole is not implemented")
				}
				return ec.directives.Patch_hasRole(ctx, obj, directive0, n, nil, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.LabelRef); ok {
				it.Labels = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.LabelRef`, tmp)
			}
		case "assignees":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter", "receiver"})
				if err != nil {
					return nil, err
				}
				a, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRole == nil {
					return nil, errors.New("directive alter_hasRole is not implemented")
				}
				return ec.directives.Alter_hasRole(ctx, obj, directive0, n, nil, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.UserRef); ok {
				it.Assignees = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.UserRef`, tmp)
			}
		case "comments":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCommentRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter", "receiver"})
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRoot == nil {
					return nil, errors.New("directive alter_hasRoot is not implemented")
				}
				return ec.directives.Alter_hasRoot(ctx, obj, directive0, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.CommentRef); ok {
				it.Comments = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.CommentRef`, tmp)
			}
		case "action":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionAction2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter", "receiver"})
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRoot == nil {
					return nil, errors.New("directive alter_hasRoot is not implemented")
				}
				return ec.directives.Alter_hasRoot(ctx, obj, directive0, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.TensionAction); ok {
				it.Action = data
			} else if tmp == nil {
				it.Action = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.TensionAction`, tmp)
			}
		case "blobs":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOBlobRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				n, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []interface{}{"emitter", "receiver"})
				if err != nil {
					return nil, err
				}
				if ec.directives.Alter_hasRoot == nil {
					return nil, errors.New("directive alter_hasRoot is not implemented")
				}
				return ec.directives.Alter_hasRoot(ctx, obj, directive0, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.BlobRef); ok {
				it.Blobs = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.BlobRef`, tmp)
			}
		case "history":
			var err error
			it.History, err = ec.unmarshalOEventRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_comments":
			var err error
			it.NComments, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_blobs":
			var err error
			it.NBlobs, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionRef(ctx context.Context, obj interface{}) (model.TensionRef, error) {
	var it model.TensionRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nth":
			var err error
			it.Nth, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error
			it.Type, err = ec.unmarshalOTensionType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, v)
			if err != nil {
				return it, err
			}
		case "emitterid":
			var err error
			it.Emitterid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emitter":
			var err error
			it.Emitter, err = ec.unmarshalONodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverid":
			var err error
			it.Receiverid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiver":
			var err error
			it.Receiver, err = ec.unmarshalONodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOTensionStatus2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "labels":
			var err error
			it.Labels, err = ec.unmarshalOLabelRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignees":
			var err error
			it.Assignees, err = ec.unmarshalOUserRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "comments":
			var err error
			it.Comments, err = ec.unmarshalOCommentRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error
			it.Action, err = ec.unmarshalOTensionAction2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx, v)
			if err != nil {
				return it, err
			}
		case "blobs":
			var err error
			it.Blobs, err = ec.unmarshalOBlobRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "history":
			var err error
			it.History, err = ec.unmarshalOEventRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_comments":
			var err error
			it.NComments, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_blobs":
			var err error
			it.NBlobs, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionStatus_hash(ctx context.Context, obj interface{}) (model.TensionStatusHash, error) {
	var it model.TensionStatusHash
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalNTensionStatus2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionType_hash(ctx context.Context, obj interface{}) (model.TensionTypeHash, error) {
	var it model.TensionTypeHash
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error
			it.Eq, err = ec.unmarshalNTensionType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateBlobInput(ctx context.Context, obj interface{}) (model.UpdateBlobInput, error) {
	var it model.UpdateBlobInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error
			it.Filter, err = ec.unmarshalNBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error
			it.Set, err = ec.unmarshalOBlobPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error
			it.Remove, err = ec.unmarshalOBlobPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCommentInput(ctx context.Context, obj interface{}) (model.UpdateCommentInput, error) {
	var it model.UpdateCommentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error
			it.Filter, err = ec.unmarshalNCommentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error
			it.Set, err = ec.unmarshalOCommentPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error
			it.Remove, err = ec.unmarshalOCommentPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEventInput(ctx context.Context, obj interface{}) (model.UpdateEventInput, error) {
	var it model.UpdateEventInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error
			it.Filter, err = ec.unmarshalNEventFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error
			it.Set, err = ec.unmarshalOEventPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error
			it.Remove, err = ec.unmarshalOEventPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateLabelInput(ctx context.Context, obj interface{}) (model.UpdateLabelInput, error) {
	var it model.UpdateLabelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error
			it.Filter, err = ec.unmarshalNLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error
			it.Set, err = ec.unmarshalOLabelPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error
			it.Remove, err = ec.unmarshalOLabelPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMandateInput(ctx context.Context, obj interface{}) (model.UpdateMandateInput, error) {
	var it model.UpdateMandateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error
			it.Filter, err = ec.unmarshalNMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error
			it.Set, err = ec.unmarshalOMandatePatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandatePatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error
			it.Remove, err = ec.unmarshalOMandatePatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandatePatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateNodeCharacInput(ctx context.Context, obj interface{}) (model.UpdateNodeCharacInput, error) {
	var it model.UpdateNodeCharacInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error
			it.Filter, err = ec.unmarshalNNodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error
			it.Set, err = ec.unmarshalONodeCharacPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error
			it.Remove, err = ec.unmarshalONodeCharacPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateNodeFragmentInput(ctx context.Context, obj interface{}) (model.UpdateNodeFragmentInput, error) {
	var it model.UpdateNodeFragmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error
			it.Filter, err = ec.unmarshalNNodeFragmentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error
			it.Set, err = ec.unmarshalONodeFragmentPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error
			it.Remove, err = ec.unmarshalONodeFragmentPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateNodeInput(ctx context.Context, obj interface{}) (model.UpdateNodeInput, error) {
	var it model.UpdateNodeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error
			it.Filter, err = ec.unmarshalNNodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error
			it.Set, err = ec.unmarshalONodePatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodePatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error
			it.Remove, err = ec.unmarshalONodePatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodePatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePostInput(ctx context.Context, obj interface{}) (model.UpdatePostInput, error) {
	var it model.UpdatePostInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error
			it.Filter, err = ec.unmarshalNPostFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error
			it.Set, err = ec.unmarshalOPostPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error
			it.Remove, err = ec.unmarshalOPostPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTensionInput(ctx context.Context, obj interface{}) (model.UpdateTensionInput, error) {
	var it model.UpdateTensionInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error
			it.Filter, err = ec.unmarshalNTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error
			it.Set, err = ec.unmarshalOTensionPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error
			it.Remove, err = ec.unmarshalOTensionPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, obj interface{}) (model.UpdateUserInput, error) {
	var it model.UpdateUserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error
			it.Filter, err = ec.unmarshalNUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error
			it.Set, err = ec.unmarshalOUserPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error
			it.Remove, err = ec.unmarshalOUserPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilter(ctx context.Context, obj interface{}) (model.UserFilter, error) {
	var it model.UserFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error
			it.Username, err = ec.unmarshalOStringHashFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalOStringHashFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error
			it.Not, err = ec.unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserOrder(ctx context.Context, obj interface{}) (model.UserOrder, error) {
	var it model.UserOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalOUserOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOUserOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalOUserOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserPatch(ctx context.Context, obj interface{}) (model.UserPatch, error) {
	var it model.UserPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdAt":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "lastAck":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.LastAck = data
			} else if tmp == nil {
				it.LastAck = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "name":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_isOwner == nil {
					return nil, errors.New("directive patch_isOwner is not implemented")
				}
				return ec.directives.Patch_isOwner(ctx, obj, directive0, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "password":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_isOwner == nil {
					return nil, errors.New("directive patch_isOwner is not implemented")
				}
				return ec.directives.Patch_isOwner(ctx, obj, directive0, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Password = data
			} else if tmp == nil {
				it.Password = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "email":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_isOwner == nil {
					return nil, errors.New("directive patch_isOwner is not implemented")
				}
				return ec.directives.Patch_isOwner(ctx, obj, directive0, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Email = data
			} else if tmp == nil {
				it.Email = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "emailHash":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.EmailHash = data
			} else if tmp == nil {
				it.EmailHash = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "emailValidated":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*bool); ok {
				it.EmailValidated = data
			} else if tmp == nil {
				it.EmailValidated = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
			}
		case "rights":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRightsRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*model.UserRightsRef); ok {
				it.Rights = data
			} else if tmp == nil {
				it.Rights = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *zerogov/fractal6.go/graph/model.UserRightsRef`, tmp)
			}
		case "roles":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Roles = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.NodeRef`, tmp)
			}
		case "backed_roles":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Alter_RO == nil {
					return nil, errors.New("directive alter_RO is not implemented")
				}
				return ec.directives.Alter_RO(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.BackedRoles = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be []*zerogov/fractal6.go/graph/model.NodeRef`, tmp)
			}
		case "tensions_created":
			var err error
			it.TensionsCreated, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_assigned":
			var err error
			it.TensionsAssigned, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "bio":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_isOwner == nil {
					return nil, errors.New("directive patch_isOwner is not implemented")
				}
				return ec.directives.Patch_isOwner(ctx, obj, directive0, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Bio = data
			} else if tmp == nil {
				it.Bio = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		case "utc":
			var err error
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.Patch_isOwner == nil {
					return nil, errors.New("directive patch_isOwner is not implemented")
				}
				return ec.directives.Patch_isOwner(ctx, obj, directive0, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(*string); ok {
				it.Utc = data
			} else if tmp == nil {
				it.Utc = nil
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRef(ctx context.Context, obj interface{}) (model.UserRef, error) {
	var it model.UserRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastAck":
			var err error
			it.LastAck, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error
			it.Username, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailHash":
			var err error
			it.EmailHash, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailValidated":
			var err error
			it.EmailValidated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "rights":
			var err error
			it.Rights, err = ec.unmarshalOUserRightsRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error
			it.Roles, err = ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "backed_roles":
			var err error
			it.BackedRoles, err = ec.unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_created":
			var err error
			it.TensionsCreated, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_assigned":
			var err error
			it.TensionsAssigned, err = ec.unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "bio":
			var err error
			it.Bio, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "utc":
			var err error
			it.Utc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRightsOrder(ctx context.Context, obj interface{}) (model.UserRightsOrder, error) {
	var it model.UserRightsOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error
			it.Asc, err = ec.unmarshalOUserRightsOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOUserRightsOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error
			it.Then, err = ec.unmarshalOUserRightsOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRightsRef(ctx context.Context, obj interface{}) (model.UserRightsRef, error) {
	var it model.UserRightsRef
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "canLogin":
			var err error
			it.CanLogin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "canCreateRoot":
			var err error
			it.CanCreateRoot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxPublicOrga":
			var err error
			it.MaxPublicOrga, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var addBlobPayloadImplementors = []string{"AddBlobPayload"}

func (ec *executionContext) _AddBlobPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddBlobPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addBlobPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddBlobPayload")
		case "blob":
			out.Values[i] = ec._AddBlobPayload_blob(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddBlobPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addCommentPayloadImplementors = []string{"AddCommentPayload"}

func (ec *executionContext) _AddCommentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddCommentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addCommentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddCommentPayload")
		case "comment":
			out.Values[i] = ec._AddCommentPayload_comment(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddCommentPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addEventPayloadImplementors = []string{"AddEventPayload"}

func (ec *executionContext) _AddEventPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddEventPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addEventPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddEventPayload")
		case "event":
			out.Values[i] = ec._AddEventPayload_event(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddEventPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addLabelPayloadImplementors = []string{"AddLabelPayload"}

func (ec *executionContext) _AddLabelPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddLabelPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addLabelPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddLabelPayload")
		case "label":
			out.Values[i] = ec._AddLabelPayload_label(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddLabelPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addMandatePayloadImplementors = []string{"AddMandatePayload"}

func (ec *executionContext) _AddMandatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddMandatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addMandatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddMandatePayload")
		case "mandate":
			out.Values[i] = ec._AddMandatePayload_mandate(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddMandatePayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addNodeCharacPayloadImplementors = []string{"AddNodeCharacPayload"}

func (ec *executionContext) _AddNodeCharacPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddNodeCharacPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addNodeCharacPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddNodeCharacPayload")
		case "nodeCharac":
			out.Values[i] = ec._AddNodeCharacPayload_nodeCharac(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddNodeCharacPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addNodeFragmentPayloadImplementors = []string{"AddNodeFragmentPayload"}

func (ec *executionContext) _AddNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddNodeFragmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addNodeFragmentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddNodeFragmentPayload")
		case "nodeFragment":
			out.Values[i] = ec._AddNodeFragmentPayload_nodeFragment(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddNodeFragmentPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addNodePayloadImplementors = []string{"AddNodePayload"}

func (ec *executionContext) _AddNodePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddNodePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addNodePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddNodePayload")
		case "node":
			out.Values[i] = ec._AddNodePayload_node(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddNodePayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addNodeStatsPayloadImplementors = []string{"AddNodeStatsPayload"}

func (ec *executionContext) _AddNodeStatsPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddNodeStatsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addNodeStatsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddNodeStatsPayload")
		case "nodeStats":
			out.Values[i] = ec._AddNodeStatsPayload_nodeStats(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddNodeStatsPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addSharedNodePayloadImplementors = []string{"AddSharedNodePayload"}

func (ec *executionContext) _AddSharedNodePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddSharedNodePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addSharedNodePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddSharedNodePayload")
		case "sharedNode":
			out.Values[i] = ec._AddSharedNodePayload_sharedNode(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddSharedNodePayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addTensionPayloadImplementors = []string{"AddTensionPayload"}

func (ec *executionContext) _AddTensionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddTensionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addTensionPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddTensionPayload")
		case "tension":
			out.Values[i] = ec._AddTensionPayload_tension(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddTensionPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addUserPayloadImplementors = []string{"AddUserPayload"}

func (ec *executionContext) _AddUserPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddUserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addUserPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddUserPayload")
		case "user":
			out.Values[i] = ec._AddUserPayload_user(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddUserPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addUserRightsPayloadImplementors = []string{"AddUserRightsPayload"}

func (ec *executionContext) _AddUserRightsPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddUserRightsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addUserRightsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddUserRightsPayload")
		case "userRights":
			out.Values[i] = ec._AddUserRightsPayload_userRights(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._AddUserRightsPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blobImplementors = []string{"Blob"}

func (ec *executionContext) _Blob(ctx context.Context, sel ast.SelectionSet, obj *model.Blob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blobImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Blob")
		case "tension":
			out.Values[i] = ec._Blob_tension(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blob_type":
			out.Values[i] = ec._Blob_blob_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pushedFlag":
			out.Values[i] = ec._Blob_pushedFlag(ctx, field, obj)
		case "archivedFlag":
			out.Values[i] = ec._Blob_archivedFlag(ctx, field, obj)
		case "node":
			out.Values[i] = ec._Blob_node(ctx, field, obj)
		case "md":
			out.Values[i] = ec._Blob_md(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Blob_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":
			out.Values[i] = ec._Blob_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Blob_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Blob_updatedAt(ctx, field, obj)
		case "message":
			out.Values[i] = ec._Blob_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentImplementors = []string{"Comment"}

func (ec *executionContext) _Comment(ctx context.Context, sel ast.SelectionSet, obj *model.Comment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comment")
		case "message":
			out.Values[i] = ec._Comment_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._Comment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":
			out.Values[i] = ec._Comment_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Comment_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Comment_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteBlobPayloadImplementors = []string{"DeleteBlobPayload"}

func (ec *executionContext) _DeleteBlobPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteBlobPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteBlobPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteBlobPayload")
		case "blob":
			out.Values[i] = ec._DeleteBlobPayload_blob(ctx, field, obj)
		case "msg":
			out.Values[i] = ec._DeleteBlobPayload_msg(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._DeleteBlobPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteCommentPayloadImplementors = []string{"DeleteCommentPayload"}

func (ec *executionContext) _DeleteCommentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteCommentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteCommentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteCommentPayload")
		case "comment":
			out.Values[i] = ec._DeleteCommentPayload_comment(ctx, field, obj)
		case "msg":
			out.Values[i] = ec._DeleteCommentPayload_msg(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._DeleteCommentPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteEventPayloadImplementors = []string{"DeleteEventPayload"}

func (ec *executionContext) _DeleteEventPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteEventPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteEventPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteEventPayload")
		case "event":
			out.Values[i] = ec._DeleteEventPayload_event(ctx, field, obj)
		case "msg":
			out.Values[i] = ec._DeleteEventPayload_msg(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._DeleteEventPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteLabelPayloadImplementors = []string{"DeleteLabelPayload"}

func (ec *executionContext) _DeleteLabelPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteLabelPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteLabelPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteLabelPayload")
		case "label":
			out.Values[i] = ec._DeleteLabelPayload_label(ctx, field, obj)
		case "msg":
			out.Values[i] = ec._DeleteLabelPayload_msg(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._DeleteLabelPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteMandatePayloadImplementors = []string{"DeleteMandatePayload"}

func (ec *executionContext) _DeleteMandatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMandatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMandatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMandatePayload")
		case "mandate":
			out.Values[i] = ec._DeleteMandatePayload_mandate(ctx, field, obj)
		case "msg":
			out.Values[i] = ec._DeleteMandatePayload_msg(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._DeleteMandatePayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteNodeCharacPayloadImplementors = []string{"DeleteNodeCharacPayload"}

func (ec *executionContext) _DeleteNodeCharacPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteNodeCharacPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteNodeCharacPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteNodeCharacPayload")
		case "nodeCharac":
			out.Values[i] = ec._DeleteNodeCharacPayload_nodeCharac(ctx, field, obj)
		case "msg":
			out.Values[i] = ec._DeleteNodeCharacPayload_msg(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._DeleteNodeCharacPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteNodeFragmentPayloadImplementors = []string{"DeleteNodeFragmentPayload"}

func (ec *executionContext) _DeleteNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteNodeFragmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteNodeFragmentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteNodeFragmentPayload")
		case "nodeFragment":
			out.Values[i] = ec._DeleteNodeFragmentPayload_nodeFragment(ctx, field, obj)
		case "msg":
			out.Values[i] = ec._DeleteNodeFragmentPayload_msg(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._DeleteNodeFragmentPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteNodePayloadImplementors = []string{"DeleteNodePayload"}

func (ec *executionContext) _DeleteNodePayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteNodePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteNodePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteNodePayload")
		case "node":
			out.Values[i] = ec._DeleteNodePayload_node(ctx, field, obj)
		case "msg":
			out.Values[i] = ec._DeleteNodePayload_msg(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._DeleteNodePayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deletePostPayloadImplementors = []string{"DeletePostPayload"}

func (ec *executionContext) _DeletePostPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePostPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePostPayload")
		case "post":
			out.Values[i] = ec._DeletePostPayload_post(ctx, field, obj)
		case "msg":
			out.Values[i] = ec._DeletePostPayload_msg(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._DeletePostPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteTensionPayloadImplementors = []string{"DeleteTensionPayload"}

func (ec *executionContext) _DeleteTensionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteTensionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteTensionPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteTensionPayload")
		case "tension":
			out.Values[i] = ec._DeleteTensionPayload_tension(ctx, field, obj)
		case "msg":
			out.Values[i] = ec._DeleteTensionPayload_msg(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._DeleteTensionPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteUserPayloadImplementors = []string{"DeleteUserPayload"}

func (ec *executionContext) _DeleteUserPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteUserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteUserPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteUserPayload")
		case "user":
			out.Values[i] = ec._DeleteUserPayload_user(ctx, field, obj)
		case "msg":
			out.Values[i] = ec._DeleteUserPayload_msg(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._DeleteUserPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventImplementors = []string{"Event"}

func (ec *executionContext) _Event(ctx context.Context, sel ast.SelectionSet, obj *model.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Event")
		case "event_type":
			out.Values[i] = ec._Event_event_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "old":
			out.Values[i] = ec._Event_old(ctx, field, obj)
		case "new":
			out.Values[i] = ec._Event_new(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Event_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":
			out.Values[i] = ec._Event_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Event_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Event_updatedAt(ctx, field, obj)
		case "message":
			out.Values[i] = ec._Event_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var labelImplementors = []string{"Label"}

func (ec *executionContext) _Label(ctx context.Context, sel ast.SelectionSet, obj *model.Label) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, labelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Label")
		case "id":
			out.Values[i] = ec._Label_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rootnameid":
			out.Values[i] = ec._Label_rootnameid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Label_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Label_description(ctx, field, obj)
		case "color":
			out.Values[i] = ec._Label_color(ctx, field, obj)
		case "tensions":
			out.Values[i] = ec._Label_tensions(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._Label_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mandateImplementors = []string{"Mandate"}

func (ec *executionContext) _Mandate(ctx context.Context, sel ast.SelectionSet, obj *model.Mandate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mandateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mandate")
		case "id":
			out.Values[i] = ec._Mandate_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "purpose":
			out.Values[i] = ec._Mandate_purpose(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "responsabilities":
			out.Values[i] = ec._Mandate_responsabilities(ctx, field, obj)
		case "domains":
			out.Values[i] = ec._Mandate_domains(ctx, field, obj)
		case "policies":
			out.Values[i] = ec._Mandate_policies(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "addNode":
			out.Values[i] = ec._Mutation_addNode(ctx, field)
		case "updateNode":
			out.Values[i] = ec._Mutation_updateNode(ctx, field)
		case "deleteNode":
			out.Values[i] = ec._Mutation_deleteNode(ctx, field)
		case "addSharedNode":
			out.Values[i] = ec._Mutation_addSharedNode(ctx, field)
		case "addNodeFragment":
			out.Values[i] = ec._Mutation_addNodeFragment(ctx, field)
		case "updateNodeFragment":
			out.Values[i] = ec._Mutation_updateNodeFragment(ctx, field)
		case "deleteNodeFragment":
			out.Values[i] = ec._Mutation_deleteNodeFragment(ctx, field)
		case "addNodeCharac":
			out.Values[i] = ec._Mutation_addNodeCharac(ctx, field)
		case "updateNodeCharac":
			out.Values[i] = ec._Mutation_updateNodeCharac(ctx, field)
		case "deleteNodeCharac":
			out.Values[i] = ec._Mutation_deleteNodeCharac(ctx, field)
		case "addNodeStats":
			out.Values[i] = ec._Mutation_addNodeStats(ctx, field)
		case "updatePost":
			out.Values[i] = ec._Mutation_updatePost(ctx, field)
		case "deletePost":
			out.Values[i] = ec._Mutation_deletePost(ctx, field)
		case "addTension":
			out.Values[i] = ec._Mutation_addTension(ctx, field)
		case "updateTension":
			out.Values[i] = ec._Mutation_updateTension(ctx, field)
		case "deleteTension":
			out.Values[i] = ec._Mutation_deleteTension(ctx, field)
		case "addLabel":
			out.Values[i] = ec._Mutation_addLabel(ctx, field)
		case "updateLabel":
			out.Values[i] = ec._Mutation_updateLabel(ctx, field)
		case "deleteLabel":
			out.Values[i] = ec._Mutation_deleteLabel(ctx, field)
		case "addComment":
			out.Values[i] = ec._Mutation_addComment(ctx, field)
		case "updateComment":
			out.Values[i] = ec._Mutation_updateComment(ctx, field)
		case "deleteComment":
			out.Values[i] = ec._Mutation_deleteComment(ctx, field)
		case "addBlob":
			out.Values[i] = ec._Mutation_addBlob(ctx, field)
		case "updateBlob":
			out.Values[i] = ec._Mutation_updateBlob(ctx, field)
		case "deleteBlob":
			out.Values[i] = ec._Mutation_deleteBlob(ctx, field)
		case "addEvent":
			out.Values[i] = ec._Mutation_addEvent(ctx, field)
		case "updateEvent":
			out.Values[i] = ec._Mutation_updateEvent(ctx, field)
		case "deleteEvent":
			out.Values[i] = ec._Mutation_deleteEvent(ctx, field)
		case "addMandate":
			out.Values[i] = ec._Mutation_addMandate(ctx, field)
		case "updateMandate":
			out.Values[i] = ec._Mutation_updateMandate(ctx, field)
		case "deleteMandate":
			out.Values[i] = ec._Mutation_deleteMandate(ctx, field)
		case "addUser":
			out.Values[i] = ec._Mutation_addUser(ctx, field)
		case "updateUser":
			out.Values[i] = ec._Mutation_updateUser(ctx, field)
		case "deleteUser":
			out.Values[i] = ec._Mutation_deleteUser(ctx, field)
		case "addUserRights":
			out.Values[i] = ec._Mutation_addUserRights(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nodeImplementors = []string{"Node"}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj *model.Node) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nodeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Node")
		case "id":
			out.Values[i] = ec._Node_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":
			out.Values[i] = ec._Node_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Node_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Node_updatedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Node_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nameid":
			out.Values[i] = ec._Node_nameid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rootnameid":
			out.Values[i] = ec._Node_rootnameid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent":
			out.Values[i] = ec._Node_parent(ctx, field, obj)
		case "children":
			out.Values[i] = ec._Node_children(ctx, field, obj)
		case "type_":
			out.Values[i] = ec._Node_type_(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tensions_out":
			out.Values[i] = ec._Node_tensions_out(ctx, field, obj)
		case "tensions_in":
			out.Values[i] = ec._Node_tensions_in(ctx, field, obj)
		case "about":
			out.Values[i] = ec._Node_about(ctx, field, obj)
		case "mandate":
			out.Values[i] = ec._Node_mandate(ctx, field, obj)
		case "docs":
			out.Values[i] = ec._Node_docs(ctx, field, obj)
		case "source":
			out.Values[i] = ec._Node_source(ctx, field, obj)
		case "n_tensions_out":
			out.Values[i] = ec._Node_n_tensions_out(ctx, field, obj)
		case "n_tensions_in":
			out.Values[i] = ec._Node_n_tensions_in(ctx, field, obj)
		case "n_children":
			out.Values[i] = ec._Node_n_children(ctx, field, obj)
		case "stats":
			out.Values[i] = ec._Node_stats(ctx, field, obj)
		case "isRoot":
			out.Values[i] = ec._Node_isRoot(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isPersonal":
			out.Values[i] = ec._Node_isPersonal(ctx, field, obj)
		case "isPrivate":
			out.Values[i] = ec._Node_isPrivate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isArchived":
			out.Values[i] = ec._Node_isArchived(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "charac":
			out.Values[i] = ec._Node_charac(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "labels":
			out.Values[i] = ec._Node_labels(ctx, field, obj)
		case "first_link":
			out.Values[i] = ec._Node_first_link(ctx, field, obj)
		case "second_link":
			out.Values[i] = ec._Node_second_link(ctx, field, obj)
		case "skills":
			out.Values[i] = ec._Node_skills(ctx, field, obj)
		case "role_type":
			out.Values[i] = ec._Node_role_type(ctx, field, obj)
		case "shared":
			out.Values[i] = ec._Node_shared(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nodeCharacImplementors = []string{"NodeCharac"}

func (ec *executionContext) _NodeCharac(ctx context.Context, sel ast.SelectionSet, obj *model.NodeCharac) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nodeCharacImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NodeCharac")
		case "id":
			out.Values[i] = ec._NodeCharac_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userCanJoin":
			out.Values[i] = ec._NodeCharac_userCanJoin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mode":
			out.Values[i] = ec._NodeCharac_mode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nodeFragmentImplementors = []string{"NodeFragment"}

func (ec *executionContext) _NodeFragment(ctx context.Context, sel ast.SelectionSet, obj *model.NodeFragment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nodeFragmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NodeFragment")
		case "id":
			out.Values[i] = ec._NodeFragment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._NodeFragment_name(ctx, field, obj)
		case "nameid":
			out.Values[i] = ec._NodeFragment_nameid(ctx, field, obj)
		case "type_":
			out.Values[i] = ec._NodeFragment_type_(ctx, field, obj)
		case "isPrivate":
			out.Values[i] = ec._NodeFragment_isPrivate(ctx, field, obj)
		case "charac":
			out.Values[i] = ec._NodeFragment_charac(ctx, field, obj)
		case "about":
			out.Values[i] = ec._NodeFragment_about(ctx, field, obj)
		case "mandate":
			out.Values[i] = ec._NodeFragment_mandate(ctx, field, obj)
		case "children":
			out.Values[i] = ec._NodeFragment_children(ctx, field, obj)
		case "first_link":
			out.Values[i] = ec._NodeFragment_first_link(ctx, field, obj)
		case "second_link":
			out.Values[i] = ec._NodeFragment_second_link(ctx, field, obj)
		case "skills":
			out.Values[i] = ec._NodeFragment_skills(ctx, field, obj)
		case "role_type":
			out.Values[i] = ec._NodeFragment_role_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nodeStatsImplementors = []string{"NodeStats"}

func (ec *executionContext) _NodeStats(ctx context.Context, sel ast.SelectionSet, obj *model.NodeStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nodeStatsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NodeStats")
		case "n_member":
			out.Values[i] = ec._NodeStats_n_member(ctx, field, obj)
		case "n_guest":
			out.Values[i] = ec._NodeStats_n_guest(ctx, field, obj)
		case "n_circle":
			out.Values[i] = ec._NodeStats_n_circle(ctx, field, obj)
		case "n_role":
			out.Values[i] = ec._NodeStats_n_role(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postImplementors = []string{"Post"}

func (ec *executionContext) _Post(ctx context.Context, sel ast.SelectionSet, obj *model.Post) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Post")
		case "id":
			out.Values[i] = ec._Post_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":
			out.Values[i] = ec._Post_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Post_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Post_updatedAt(ctx, field, obj)
		case "message":
			out.Values[i] = ec._Post_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getNode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getNode(ctx, field)
				return res
			})
		case "queryNode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryNode(ctx, field)
				return res
			})
		case "querySharedNode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_querySharedNode(ctx, field)
				return res
			})
		case "getNodeFragment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getNodeFragment(ctx, field)
				return res
			})
		case "queryNodeFragment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryNodeFragment(ctx, field)
				return res
			})
		case "getNodeCharac":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getNodeCharac(ctx, field)
				return res
			})
		case "queryNodeCharac":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryNodeCharac(ctx, field)
				return res
			})
		case "queryNodeStats":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryNodeStats(ctx, field)
				return res
			})
		case "getPost":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPost(ctx, field)
				return res
			})
		case "queryPost":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryPost(ctx, field)
				return res
			})
		case "getTension":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTension(ctx, field)
				return res
			})
		case "queryTension":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryTension(ctx, field)
				return res
			})
		case "getLabel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLabel(ctx, field)
				return res
			})
		case "queryLabel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryLabel(ctx, field)
				return res
			})
		case "getComment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getComment(ctx, field)
				return res
			})
		case "queryComment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryComment(ctx, field)
				return res
			})
		case "getBlob":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBlob(ctx, field)
				return res
			})
		case "queryBlob":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryBlob(ctx, field)
				return res
			})
		case "getEvent":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEvent(ctx, field)
				return res
			})
		case "queryEvent":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryEvent(ctx, field)
				return res
			})
		case "getMandate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMandate(ctx, field)
				return res
			})
		case "queryMandate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryMandate(ctx, field)
				return res
			})
		case "getUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUser(ctx, field)
				return res
			})
		case "queryUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUser(ctx, field)
				return res
			})
		case "queryUserRights":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserRights(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sharedNodeImplementors = []string{"SharedNode"}

func (ec *executionContext) _SharedNode(ctx context.Context, sel ast.SelectionSet, obj *model.SharedNode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sharedNodeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SharedNode")
		case "n_labels":
			out.Values[i] = ec._SharedNode_n_labels(ctx, field, obj)
		case "n_tensions":
			out.Values[i] = ec._SharedNode_n_tensions(ctx, field, obj)
		case "n_closed_tensions":
			out.Values[i] = ec._SharedNode_n_closed_tensions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tensionImplementors = []string{"Tension"}

func (ec *executionContext) _Tension(ctx context.Context, sel ast.SelectionSet, obj *model.Tension) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tensionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tension")
		case "createdBy":
			out.Values[i] = ec._Tension_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nth":
			out.Values[i] = ec._Tension_nth(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Tension_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type_":
			out.Values[i] = ec._Tension_type_(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emitterid":
			out.Values[i] = ec._Tension_emitterid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emitter":
			out.Values[i] = ec._Tension_emitter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "receiverid":
			out.Values[i] = ec._Tension_receiverid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "receiver":
			out.Values[i] = ec._Tension_receiver(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Tension_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "labels":
			out.Values[i] = ec._Tension_labels(ctx, field, obj)
		case "assignees":
			out.Values[i] = ec._Tension_assignees(ctx, field, obj)
		case "comments":
			out.Values[i] = ec._Tension_comments(ctx, field, obj)
		case "action":
			out.Values[i] = ec._Tension_action(ctx, field, obj)
		case "blobs":
			out.Values[i] = ec._Tension_blobs(ctx, field, obj)
		case "history":
			out.Values[i] = ec._Tension_history(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "n_comments":
			out.Values[i] = ec._Tension_n_comments(ctx, field, obj)
		case "n_blobs":
			out.Values[i] = ec._Tension_n_blobs(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Tension_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Tension_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Tension_updatedAt(ctx, field, obj)
		case "message":
			out.Values[i] = ec._Tension_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateBlobPayloadImplementors = []string{"UpdateBlobPayload"}

func (ec *executionContext) _UpdateBlobPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateBlobPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateBlobPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateBlobPayload")
		case "blob":
			out.Values[i] = ec._UpdateBlobPayload_blob(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._UpdateBlobPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCommentPayloadImplementors = []string{"UpdateCommentPayload"}

func (ec *executionContext) _UpdateCommentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateCommentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCommentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCommentPayload")
		case "comment":
			out.Values[i] = ec._UpdateCommentPayload_comment(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._UpdateCommentPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateEventPayloadImplementors = []string{"UpdateEventPayload"}

func (ec *executionContext) _UpdateEventPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateEventPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateEventPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateEventPayload")
		case "event":
			out.Values[i] = ec._UpdateEventPayload_event(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._UpdateEventPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateLabelPayloadImplementors = []string{"UpdateLabelPayload"}

func (ec *executionContext) _UpdateLabelPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateLabelPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateLabelPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateLabelPayload")
		case "label":
			out.Values[i] = ec._UpdateLabelPayload_label(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._UpdateLabelPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateMandatePayloadImplementors = []string{"UpdateMandatePayload"}

func (ec *executionContext) _UpdateMandatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMandatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMandatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMandatePayload")
		case "mandate":
			out.Values[i] = ec._UpdateMandatePayload_mandate(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._UpdateMandatePayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateNodeCharacPayloadImplementors = []string{"UpdateNodeCharacPayload"}

func (ec *executionContext) _UpdateNodeCharacPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateNodeCharacPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateNodeCharacPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateNodeCharacPayload")
		case "nodeCharac":
			out.Values[i] = ec._UpdateNodeCharacPayload_nodeCharac(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._UpdateNodeCharacPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateNodeFragmentPayloadImplementors = []string{"UpdateNodeFragmentPayload"}

func (ec *executionContext) _UpdateNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateNodeFragmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateNodeFragmentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateNodeFragmentPayload")
		case "nodeFragment":
			out.Values[i] = ec._UpdateNodeFragmentPayload_nodeFragment(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._UpdateNodeFragmentPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateNodePayloadImplementors = []string{"UpdateNodePayload"}

func (ec *executionContext) _UpdateNodePayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateNodePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateNodePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateNodePayload")
		case "node":
			out.Values[i] = ec._UpdateNodePayload_node(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._UpdateNodePayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updatePostPayloadImplementors = []string{"UpdatePostPayload"}

func (ec *executionContext) _UpdatePostPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePostPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePostPayload")
		case "post":
			out.Values[i] = ec._UpdatePostPayload_post(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._UpdatePostPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateTensionPayloadImplementors = []string{"UpdateTensionPayload"}

func (ec *executionContext) _UpdateTensionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateTensionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateTensionPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateTensionPayload")
		case "tension":
			out.Values[i] = ec._UpdateTensionPayload_tension(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._UpdateTensionPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateUserPayloadImplementors = []string{"UpdateUserPayload"}

func (ec *executionContext) _UpdateUserPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateUserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateUserPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateUserPayload")
		case "user":
			out.Values[i] = ec._UpdateUserPayload_user(ctx, field, obj)
		case "numUids":
			out.Values[i] = ec._UpdateUserPayload_numUids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastAck":
			out.Values[i] = ec._User_lastAck(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":
			out.Values[i] = ec._User_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._User_name(ctx, field, obj)
		case "password":
			out.Values[i] = ec._User_password(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emailHash":
			out.Values[i] = ec._User_emailHash(ctx, field, obj)
		case "emailValidated":
			out.Values[i] = ec._User_emailValidated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rights":
			out.Values[i] = ec._User_rights(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roles":
			out.Values[i] = ec._User_roles(ctx, field, obj)
		case "backed_roles":
			out.Values[i] = ec._User_backed_roles(ctx, field, obj)
		case "tensions_created":
			out.Values[i] = ec._User_tensions_created(ctx, field, obj)
		case "tensions_assigned":
			out.Values[i] = ec._User_tensions_assigned(ctx, field, obj)
		case "bio":
			out.Values[i] = ec._User_bio(ctx, field, obj)
		case "utc":
			out.Values[i] = ec._User_utc(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userRightsImplementors = []string{"UserRights"}

func (ec *executionContext) _UserRights(ctx context.Context, sel ast.SelectionSet, obj *model.UserRights) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRightsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRights")
		case "canLogin":
			out.Values[i] = ec._UserRights_canLogin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "canCreateRoot":
			out.Values[i] = ec._UserRights_canCreateRoot(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxPublicOrga":
			out.Values[i] = ec._UserRights_maxPublicOrga(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAddBlobInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobInput(ctx context.Context, v interface{}) (model.AddBlobInput, error) {
	return ec.unmarshalInputAddBlobInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddBlobInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobInputᚄ(ctx context.Context, v interface{}) ([]*model.AddBlobInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddBlobInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddBlobInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddBlobInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobInput(ctx context.Context, v interface{}) (*model.AddBlobInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddBlobInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddCommentInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentInput(ctx context.Context, v interface{}) (model.AddCommentInput, error) {
	return ec.unmarshalInputAddCommentInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddCommentInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentInputᚄ(ctx context.Context, v interface{}) ([]*model.AddCommentInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddCommentInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddCommentInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddCommentInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentInput(ctx context.Context, v interface{}) (*model.AddCommentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddCommentInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddEventInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventInput(ctx context.Context, v interface{}) (model.AddEventInput, error) {
	return ec.unmarshalInputAddEventInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddEventInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventInputᚄ(ctx context.Context, v interface{}) ([]*model.AddEventInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddEventInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddEventInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddEventInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventInput(ctx context.Context, v interface{}) (*model.AddEventInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddEventInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddLabelInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelInput(ctx context.Context, v interface{}) (model.AddLabelInput, error) {
	return ec.unmarshalInputAddLabelInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddLabelInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelInputᚄ(ctx context.Context, v interface{}) ([]*model.AddLabelInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddLabelInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddLabelInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddLabelInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelInput(ctx context.Context, v interface{}) (*model.AddLabelInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddLabelInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddMandateInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandateInput(ctx context.Context, v interface{}) (model.AddMandateInput, error) {
	return ec.unmarshalInputAddMandateInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddMandateInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandateInputᚄ(ctx context.Context, v interface{}) ([]*model.AddMandateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddMandateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddMandateInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddMandateInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandateInput(ctx context.Context, v interface{}) (*model.AddMandateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddMandateInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddNodeCharacInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeCharacInput(ctx context.Context, v interface{}) (model.AddNodeCharacInput, error) {
	return ec.unmarshalInputAddNodeCharacInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddNodeCharacInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeCharacInputᚄ(ctx context.Context, v interface{}) ([]*model.AddNodeCharacInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddNodeCharacInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddNodeCharacInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeCharacInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddNodeCharacInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeCharacInput(ctx context.Context, v interface{}) (*model.AddNodeCharacInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddNodeCharacInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeCharacInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddNodeFragmentInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentInput(ctx context.Context, v interface{}) (model.AddNodeFragmentInput, error) {
	return ec.unmarshalInputAddNodeFragmentInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddNodeFragmentInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentInputᚄ(ctx context.Context, v interface{}) ([]*model.AddNodeFragmentInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddNodeFragmentInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddNodeFragmentInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddNodeFragmentInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentInput(ctx context.Context, v interface{}) (*model.AddNodeFragmentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddNodeFragmentInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddNodeInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeInput(ctx context.Context, v interface{}) (model.AddNodeInput, error) {
	return ec.unmarshalInputAddNodeInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddNodeInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeInputᚄ(ctx context.Context, v interface{}) ([]*model.AddNodeInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddNodeInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddNodeInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddNodeInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeInput(ctx context.Context, v interface{}) (*model.AddNodeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddNodeInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddNodeStatsInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeStatsInput(ctx context.Context, v interface{}) (model.AddNodeStatsInput, error) {
	return ec.unmarshalInputAddNodeStatsInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddNodeStatsInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeStatsInputᚄ(ctx context.Context, v interface{}) ([]*model.AddNodeStatsInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddNodeStatsInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddNodeStatsInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeStatsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddNodeStatsInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeStatsInput(ctx context.Context, v interface{}) (*model.AddNodeStatsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddNodeStatsInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeStatsInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddSharedNodeInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddSharedNodeInput(ctx context.Context, v interface{}) (model.AddSharedNodeInput, error) {
	return ec.unmarshalInputAddSharedNodeInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddSharedNodeInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddSharedNodeInputᚄ(ctx context.Context, v interface{}) ([]*model.AddSharedNodeInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddSharedNodeInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddSharedNodeInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddSharedNodeInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddSharedNodeInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddSharedNodeInput(ctx context.Context, v interface{}) (*model.AddSharedNodeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddSharedNodeInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddSharedNodeInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddTensionInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionInput(ctx context.Context, v interface{}) (model.AddTensionInput, error) {
	return ec.unmarshalInputAddTensionInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddTensionInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionInputᚄ(ctx context.Context, v interface{}) ([]*model.AddTensionInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddTensionInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddTensionInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddTensionInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionInput(ctx context.Context, v interface{}) (*model.AddTensionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddTensionInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddUserInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserInput(ctx context.Context, v interface{}) (model.AddUserInput, error) {
	return ec.unmarshalInputAddUserInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddUserInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserInputᚄ(ctx context.Context, v interface{}) ([]*model.AddUserInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddUserInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddUserInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddUserInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserInput(ctx context.Context, v interface{}) (*model.AddUserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddUserInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNAddUserRightsInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsInput(ctx context.Context, v interface{}) (model.AddUserRightsInput, error) {
	return ec.unmarshalInputAddUserRightsInput(ctx, v)
}

func (ec *executionContext) unmarshalNAddUserRightsInput2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsInputᚄ(ctx context.Context, v interface{}) ([]*model.AddUserRightsInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AddUserRightsInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAddUserRightsInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddUserRightsInput2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsInput(ctx context.Context, v interface{}) (*model.AddUserRightsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAddUserRightsInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNBlob2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx context.Context, sel ast.SelectionSet, v model.Blob) graphql.Marshaler {
	return ec._Blob(ctx, sel, &v)
}

func (ec *executionContext) marshalNBlob2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx context.Context, sel ast.SelectionSet, v *model.Blob) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Blob(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBlobFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx context.Context, v interface{}) (model.BlobFilter, error) {
	return ec.unmarshalInputBlobFilter(ctx, v)
}

func (ec *executionContext) unmarshalNBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx context.Context, v interface{}) (*model.BlobFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNBlobFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNBlobRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx context.Context, v interface{}) (model.BlobRef, error) {
	return ec.unmarshalInputBlobRef(ctx, v)
}

func (ec *executionContext) unmarshalNBlobRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx context.Context, v interface{}) (*model.BlobRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNBlobRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNBlobType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, v interface{}) (model.BlobType, error) {
	var res model.BlobType
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNBlobType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, sel ast.SelectionSet, v model.BlobType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNComment2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v model.Comment) graphql.Marshaler {
	return ec._Comment(ctx, sel, &v)
}

func (ec *executionContext) marshalNComment2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v *model.Comment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx context.Context, v interface{}) (model.CommentFilter, error) {
	return ec.unmarshalInputCommentFilter(ctx, v)
}

func (ec *executionContext) unmarshalNCommentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx context.Context, v interface{}) (*model.CommentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCommentFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCommentRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRef(ctx context.Context, v interface{}) (model.CommentRef, error) {
	return ec.unmarshalInputCommentRef(ctx, v)
}

func (ec *executionContext) unmarshalNCommentRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRef(ctx context.Context, v interface{}) (*model.CommentRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCommentRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNDateTime2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNDateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDgraphIndex2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndex(ctx context.Context, v interface{}) (model.DgraphIndex, error) {
	var res model.DgraphIndex
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNDgraphIndex2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndex(ctx context.Context, sel ast.SelectionSet, v model.DgraphIndex) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEvent2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx context.Context, sel ast.SelectionSet, v model.Event) graphql.Marshaler {
	return ec._Event(ctx, sel, &v)
}

func (ec *executionContext) marshalNEvent2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Event) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvent2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEvent2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx context.Context, sel ast.SelectionSet, v *model.Event) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Event(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEventFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx context.Context, v interface{}) (model.EventFilter, error) {
	return ec.unmarshalInputEventFilter(ctx, v)
}

func (ec *executionContext) unmarshalNEventFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx context.Context, v interface{}) (*model.EventFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNEventFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNEventRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRef(ctx context.Context, v interface{}) (model.EventRef, error) {
	return ec.unmarshalInputEventRef(ctx, v)
}

func (ec *executionContext) unmarshalNEventRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx context.Context, v interface{}) ([]*model.EventRef, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EventRef, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNEventRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEventRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRef(ctx context.Context, v interface{}) (*model.EventRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNEventRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNHTTPMethod2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐHTTPMethod(ctx context.Context, v interface{}) (model.HTTPMethod, error) {
	var res model.HTTPMethod
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNHTTPMethod2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐHTTPMethod(ctx context.Context, sel ast.SelectionSet, v model.HTTPMethod) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLabel2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx context.Context, sel ast.SelectionSet, v model.Label) graphql.Marshaler {
	return ec._Label(ctx, sel, &v)
}

func (ec *executionContext) marshalNLabel2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx context.Context, sel ast.SelectionSet, v *model.Label) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Label(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLabelFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx context.Context, v interface{}) (model.LabelFilter, error) {
	return ec.unmarshalInputLabelFilter(ctx, v)
}

func (ec *executionContext) unmarshalNLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx context.Context, v interface{}) (*model.LabelFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNLabelFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNLabelRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRef(ctx context.Context, v interface{}) (model.LabelRef, error) {
	return ec.unmarshalInputLabelRef(ctx, v)
}

func (ec *executionContext) unmarshalNLabelRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRef(ctx context.Context, v interface{}) (*model.LabelRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNLabelRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNMandateFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx context.Context, v interface{}) (model.MandateFilter, error) {
	return ec.unmarshalInputMandateFilter(ctx, v)
}

func (ec *executionContext) unmarshalNMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx context.Context, v interface{}) (*model.MandateFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNMandateFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNNode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v model.Node) graphql.Marshaler {
	return ec._Node(ctx, sel, &v)
}

func (ec *executionContext) marshalNNode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v *model.Node) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalNNodeCharac2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx context.Context, sel ast.SelectionSet, v model.NodeCharac) graphql.Marshaler {
	return ec._NodeCharac(ctx, sel, &v)
}

func (ec *executionContext) marshalNNodeCharac2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx context.Context, sel ast.SelectionSet, v *model.NodeCharac) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NodeCharac(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNodeCharacFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx context.Context, v interface{}) (model.NodeCharacFilter, error) {
	return ec.unmarshalInputNodeCharacFilter(ctx, v)
}

func (ec *executionContext) unmarshalNNodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx context.Context, v interface{}) (*model.NodeCharacFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNNodeCharacFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNNodeCharacRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx context.Context, v interface{}) (model.NodeCharacRef, error) {
	return ec.unmarshalInputNodeCharacRef(ctx, v)
}

func (ec *executionContext) unmarshalNNodeCharacRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx context.Context, v interface{}) (*model.NodeCharacRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNNodeCharacRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNNodeFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx context.Context, v interface{}) (model.NodeFilter, error) {
	return ec.unmarshalInputNodeFilter(ctx, v)
}

func (ec *executionContext) unmarshalNNodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx context.Context, v interface{}) (*model.NodeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNNodeFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNNodeFragment2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx context.Context, sel ast.SelectionSet, v model.NodeFragment) graphql.Marshaler {
	return ec._NodeFragment(ctx, sel, &v)
}

func (ec *executionContext) marshalNNodeFragment2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx context.Context, sel ast.SelectionSet, v *model.NodeFragment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NodeFragment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNodeFragmentFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx context.Context, v interface{}) (model.NodeFragmentFilter, error) {
	return ec.unmarshalInputNodeFragmentFilter(ctx, v)
}

func (ec *executionContext) unmarshalNNodeFragmentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx context.Context, v interface{}) (*model.NodeFragmentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNNodeFragmentFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNNodeFragmentRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx context.Context, v interface{}) (model.NodeFragmentRef, error) {
	return ec.unmarshalInputNodeFragmentRef(ctx, v)
}

func (ec *executionContext) unmarshalNNodeFragmentRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx context.Context, v interface{}) (*model.NodeFragmentRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNNodeFragmentRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNNodeMode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, v interface{}) (model.NodeMode, error) {
	var res model.NodeMode
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNNodeMode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, sel ast.SelectionSet, v model.NodeMode) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNodeRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx context.Context, v interface{}) (model.NodeRef, error) {
	return ec.unmarshalInputNodeRef(ctx, v)
}

func (ec *executionContext) unmarshalNNodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx context.Context, v interface{}) (*model.NodeRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNNodeRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNNodeType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, v interface{}) (model.NodeType, error) {
	var res model.NodeType
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNNodeType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, sel ast.SelectionSet, v model.NodeType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPostFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx context.Context, v interface{}) (model.PostFilter, error) {
	return ec.unmarshalInputPostFilter(ctx, v)
}

func (ec *executionContext) unmarshalNPostFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx context.Context, v interface{}) (*model.PostFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNPostFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNTension2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx context.Context, sel ast.SelectionSet, v model.Tension) graphql.Marshaler {
	return ec._Tension(ctx, sel, &v)
}

func (ec *executionContext) marshalNTension2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx context.Context, sel ast.SelectionSet, v *model.Tension) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Tension(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTensionEvent2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, v interface{}) (model.TensionEvent, error) {
	var res model.TensionEvent
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNTensionEvent2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, sel ast.SelectionSet, v model.TensionEvent) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTensionFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx context.Context, v interface{}) (model.TensionFilter, error) {
	return ec.unmarshalInputTensionFilter(ctx, v)
}

func (ec *executionContext) unmarshalNTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx context.Context, v interface{}) (*model.TensionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNTensionFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNTensionRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx context.Context, v interface{}) (model.TensionRef, error) {
	return ec.unmarshalInputTensionRef(ctx, v)
}

func (ec *executionContext) unmarshalNTensionRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx context.Context, v interface{}) (*model.TensionRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNTensionRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNTensionStatus2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, v interface{}) (model.TensionStatus, error) {
	var res model.TensionStatus
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNTensionStatus2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, sel ast.SelectionSet, v model.TensionStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTensionType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, v interface{}) (model.TensionType, error) {
	var res model.TensionType
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNTensionType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, sel ast.SelectionSet, v model.TensionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNUpdateBlobInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateBlobInput(ctx context.Context, v interface{}) (model.UpdateBlobInput, error) {
	return ec.unmarshalInputUpdateBlobInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateCommentInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateCommentInput(ctx context.Context, v interface{}) (model.UpdateCommentInput, error) {
	return ec.unmarshalInputUpdateCommentInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateEventInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventInput(ctx context.Context, v interface{}) (model.UpdateEventInput, error) {
	return ec.unmarshalInputUpdateEventInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateLabelInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateLabelInput(ctx context.Context, v interface{}) (model.UpdateLabelInput, error) {
	return ec.unmarshalInputUpdateLabelInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateMandateInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateMandateInput(ctx context.Context, v interface{}) (model.UpdateMandateInput, error) {
	return ec.unmarshalInputUpdateMandateInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateNodeCharacInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeCharacInput(ctx context.Context, v interface{}) (model.UpdateNodeCharacInput, error) {
	return ec.unmarshalInputUpdateNodeCharacInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateNodeFragmentInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeFragmentInput(ctx context.Context, v interface{}) (model.UpdateNodeFragmentInput, error) {
	return ec.unmarshalInputUpdateNodeFragmentInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateNodeInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeInput(ctx context.Context, v interface{}) (model.UpdateNodeInput, error) {
	return ec.unmarshalInputUpdateNodeInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdatePostInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePostInput(ctx context.Context, v interface{}) (model.UpdatePostInput, error) {
	return ec.unmarshalInputUpdatePostInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateTensionInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateTensionInput(ctx context.Context, v interface{}) (model.UpdateTensionInput, error) {
	return ec.unmarshalInputUpdateTensionInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateUserInput2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserInput(ctx context.Context, v interface{}) (model.UpdateUserInput, error) {
	return ec.unmarshalInputUpdateUserInput(ctx, v)
}

func (ec *executionContext) marshalNUser2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx context.Context, v interface{}) (model.UserFilter, error) {
	return ec.unmarshalInputUserFilter(ctx, v)
}

func (ec *executionContext) unmarshalNUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx context.Context, v interface{}) (*model.UserFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUserFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNUserRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx context.Context, v interface{}) (model.UserRef, error) {
	return ec.unmarshalInputUserRef(ctx, v)
}

func (ec *executionContext) unmarshalNUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx context.Context, v interface{}) (*model.UserRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUserRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUserRights2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx context.Context, sel ast.SelectionSet, v model.UserRights) graphql.Marshaler {
	return ec._UserRights(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserRights2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx context.Context, sel ast.SelectionSet, v *model.UserRights) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserRights(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserRightsRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx context.Context, v interface{}) (model.UserRightsRef, error) {
	return ec.unmarshalInputUserRightsRef(ctx, v)
}

func (ec *executionContext) unmarshalNUserRightsRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx context.Context, v interface{}) (*model.UserRightsRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUserRightsRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAddBlobPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobPayload(ctx context.Context, sel ast.SelectionSet, v model.AddBlobPayload) graphql.Marshaler {
	return ec._AddBlobPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddBlobPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddBlobPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddBlobPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddCommentPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentPayload(ctx context.Context, sel ast.SelectionSet, v model.AddCommentPayload) graphql.Marshaler {
	return ec._AddCommentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddCommentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddCommentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddCommentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddEventPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventPayload(ctx context.Context, sel ast.SelectionSet, v model.AddEventPayload) graphql.Marshaler {
	return ec._AddEventPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddEventPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddEventPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddEventPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddLabelPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelPayload(ctx context.Context, sel ast.SelectionSet, v model.AddLabelPayload) graphql.Marshaler {
	return ec._AddLabelPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddLabelPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddLabelPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddLabelPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddMandatePayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandatePayload(ctx context.Context, sel ast.SelectionSet, v model.AddMandatePayload) graphql.Marshaler {
	return ec._AddMandatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddMandatePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandatePayload(ctx context.Context, sel ast.SelectionSet, v *model.AddMandatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddMandatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddNodeCharacPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeCharacPayload(ctx context.Context, sel ast.SelectionSet, v model.AddNodeCharacPayload) graphql.Marshaler {
	return ec._AddNodeCharacPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddNodeCharacPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeCharacPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddNodeCharacPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddNodeCharacPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddNodeFragmentPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, v model.AddNodeFragmentPayload) graphql.Marshaler {
	return ec._AddNodeFragmentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddNodeFragmentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddNodeFragmentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddNodeFragmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddNodePayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodePayload(ctx context.Context, sel ast.SelectionSet, v model.AddNodePayload) graphql.Marshaler {
	return ec._AddNodePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddNodePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodePayload(ctx context.Context, sel ast.SelectionSet, v *model.AddNodePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddNodePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddNodeStatsPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeStatsPayload(ctx context.Context, sel ast.SelectionSet, v model.AddNodeStatsPayload) graphql.Marshaler {
	return ec._AddNodeStatsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddNodeStatsPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeStatsPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddNodeStatsPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddNodeStatsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddSharedNodePayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddSharedNodePayload(ctx context.Context, sel ast.SelectionSet, v model.AddSharedNodePayload) graphql.Marshaler {
	return ec._AddSharedNodePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddSharedNodePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddSharedNodePayload(ctx context.Context, sel ast.SelectionSet, v *model.AddSharedNodePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddSharedNodePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddTensionPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionPayload(ctx context.Context, sel ast.SelectionSet, v model.AddTensionPayload) graphql.Marshaler {
	return ec._AddTensionPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddTensionPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddTensionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddTensionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddUserPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserPayload(ctx context.Context, sel ast.SelectionSet, v model.AddUserPayload) graphql.Marshaler {
	return ec._AddUserPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddUserPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddUserPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddUserPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddUserRightsPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsPayload(ctx context.Context, sel ast.SelectionSet, v model.AddUserRightsPayload) graphql.Marshaler {
	return ec._AddUserRightsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOAddUserRightsPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddUserRightsPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddUserRightsPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthRule2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx context.Context, v interface{}) (model.AuthRule, error) {
	return ec.unmarshalInputAuthRule(ctx, v)
}

func (ec *executionContext) unmarshalOAuthRule2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx context.Context, v interface{}) ([]*model.AuthRule, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AuthRule, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOAuthRule2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAuthRule2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx context.Context, v interface{}) (*model.AuthRule, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthRule2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBlob2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx context.Context, sel ast.SelectionSet, v model.Blob) graphql.Marshaler {
	return ec._Blob(ctx, sel, &v)
}

func (ec *executionContext) marshalOBlob2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx context.Context, sel ast.SelectionSet, v []*model.Blob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBlob2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBlob2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Blob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBlob2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBlob2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx context.Context, sel ast.SelectionSet, v *model.Blob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Blob(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlobFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx context.Context, v interface{}) (model.BlobFilter, error) {
	return ec.unmarshalInputBlobFilter(ctx, v)
}

func (ec *executionContext) unmarshalOBlobFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx context.Context, v interface{}) (*model.BlobFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBlobFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOBlobOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx context.Context, v interface{}) (model.BlobOrder, error) {
	return ec.unmarshalInputBlobOrder(ctx, v)
}

func (ec *executionContext) unmarshalOBlobOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx context.Context, v interface{}) (*model.BlobOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBlobOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOBlobOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrderable(ctx context.Context, v interface{}) (model.BlobOrderable, error) {
	var res model.BlobOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOBlobOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrderable(ctx context.Context, sel ast.SelectionSet, v model.BlobOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOBlobOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrderable(ctx context.Context, v interface{}) (*model.BlobOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBlobOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBlobOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrderable(ctx context.Context, sel ast.SelectionSet, v *model.BlobOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBlobPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobPatch(ctx context.Context, v interface{}) (model.BlobPatch, error) {
	return ec.unmarshalInputBlobPatch(ctx, v)
}

func (ec *executionContext) unmarshalOBlobPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobPatch(ctx context.Context, v interface{}) (*model.BlobPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBlobPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOBlobRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx context.Context, v interface{}) (model.BlobRef, error) {
	return ec.unmarshalInputBlobRef(ctx, v)
}

func (ec *executionContext) unmarshalOBlobRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx context.Context, v interface{}) ([]*model.BlobRef, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.BlobRef, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOBlobRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBlobRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRefᚄ(ctx context.Context, v interface{}) ([]*model.BlobRef, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.BlobRef, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNBlobRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBlobRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx context.Context, v interface{}) (*model.BlobRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBlobRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOBlobType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, v interface{}) (model.BlobType, error) {
	var res model.BlobType
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOBlobType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, sel ast.SelectionSet, v model.BlobType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOBlobType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, v interface{}) (*model.BlobType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBlobType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBlobType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, sel ast.SelectionSet, v *model.BlobType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBlobType_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobTypeHash(ctx context.Context, v interface{}) (model.BlobTypeHash, error) {
	return ec.unmarshalInputBlobType_hash(ctx, v)
}

func (ec *executionContext) unmarshalOBlobType_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobTypeHash(ctx context.Context, v interface{}) (*model.BlobTypeHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBlobType_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobTypeHash(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) marshalOComment2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v model.Comment) graphql.Marshaler {
	return ec._Comment(ctx, sel, &v)
}

func (ec *executionContext) marshalOComment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v []*model.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComment2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComment2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComment2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v *model.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommentFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx context.Context, v interface{}) (model.CommentFilter, error) {
	return ec.unmarshalInputCommentFilter(ctx, v)
}

func (ec *executionContext) unmarshalOCommentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx context.Context, v interface{}) (*model.CommentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommentFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOCommentOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx context.Context, v interface{}) (model.CommentOrder, error) {
	return ec.unmarshalInputCommentOrder(ctx, v)
}

func (ec *executionContext) unmarshalOCommentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx context.Context, v interface{}) (*model.CommentOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommentOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOCommentOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrderable(ctx context.Context, v interface{}) (model.CommentOrderable, error) {
	var res model.CommentOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOCommentOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrderable(ctx context.Context, sel ast.SelectionSet, v model.CommentOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOCommentOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrderable(ctx context.Context, v interface{}) (*model.CommentOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommentOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOCommentOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrderable(ctx context.Context, sel ast.SelectionSet, v *model.CommentOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCommentPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentPatch(ctx context.Context, v interface{}) (model.CommentPatch, error) {
	return ec.unmarshalInputCommentPatch(ctx, v)
}

func (ec *executionContext) unmarshalOCommentPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentPatch(ctx context.Context, v interface{}) (*model.CommentPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommentPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOCommentRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRefᚄ(ctx context.Context, v interface{}) ([]*model.CommentRef, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.CommentRef, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNCommentRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCustomHTTP2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCustomHTTP(ctx context.Context, v interface{}) (model.CustomHTTP, error) {
	return ec.unmarshalInputCustomHTTP(ctx, v)
}

func (ec *executionContext) unmarshalOCustomHTTP2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCustomHTTP(ctx context.Context, v interface{}) (*model.CustomHTTP, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCustomHTTP2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐCustomHTTP(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalODateTime2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalODateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalODateTime2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalODateTime2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalODateTime2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalODateTime2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalODateTimeFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx context.Context, v interface{}) (model.DateTimeFilter, error) {
	return ec.unmarshalInputDateTimeFilter(ctx, v)
}

func (ec *executionContext) unmarshalODateTimeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx context.Context, v interface{}) (*model.DateTimeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalODateTimeFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalODeleteBlobPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteBlobPayload(ctx context.Context, sel ast.SelectionSet, v model.DeleteBlobPayload) graphql.Marshaler {
	return ec._DeleteBlobPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalODeleteBlobPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteBlobPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteBlobPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteBlobPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteCommentPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteCommentPayload(ctx context.Context, sel ast.SelectionSet, v model.DeleteCommentPayload) graphql.Marshaler {
	return ec._DeleteCommentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalODeleteCommentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteCommentPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteCommentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteCommentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteEventPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteEventPayload(ctx context.Context, sel ast.SelectionSet, v model.DeleteEventPayload) graphql.Marshaler {
	return ec._DeleteEventPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalODeleteEventPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteEventPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteEventPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteEventPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteLabelPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteLabelPayload(ctx context.Context, sel ast.SelectionSet, v model.DeleteLabelPayload) graphql.Marshaler {
	return ec._DeleteLabelPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalODeleteLabelPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteLabelPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteLabelPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteLabelPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteMandatePayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteMandatePayload(ctx context.Context, sel ast.SelectionSet, v model.DeleteMandatePayload) graphql.Marshaler {
	return ec._DeleteMandatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalODeleteMandatePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteMandatePayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteMandatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteMandatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteNodeCharacPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodeCharacPayload(ctx context.Context, sel ast.SelectionSet, v model.DeleteNodeCharacPayload) graphql.Marshaler {
	return ec._DeleteNodeCharacPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalODeleteNodeCharacPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodeCharacPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteNodeCharacPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteNodeCharacPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteNodeFragmentPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, v model.DeleteNodeFragmentPayload) graphql.Marshaler {
	return ec._DeleteNodeFragmentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalODeleteNodeFragmentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteNodeFragmentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteNodeFragmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteNodePayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodePayload(ctx context.Context, sel ast.SelectionSet, v model.DeleteNodePayload) graphql.Marshaler {
	return ec._DeleteNodePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalODeleteNodePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodePayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteNodePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteNodePayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeletePostPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeletePostPayload(ctx context.Context, sel ast.SelectionSet, v model.DeletePostPayload) graphql.Marshaler {
	return ec._DeletePostPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalODeletePostPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeletePostPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeletePostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeletePostPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteTensionPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteTensionPayload(ctx context.Context, sel ast.SelectionSet, v model.DeleteTensionPayload) graphql.Marshaler {
	return ec._DeleteTensionPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalODeleteTensionPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteTensionPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteTensionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteTensionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteUserPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteUserPayload(ctx context.Context, sel ast.SelectionSet, v model.DeleteUserPayload) graphql.Marshaler {
	return ec._DeleteUserPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalODeleteUserPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteUserPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteUserPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteUserPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx context.Context, v interface{}) ([]model.DgraphIndex, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DgraphIndex, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNDgraphIndex2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndex(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODgraphIndex2ᚕzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DgraphIndex) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDgraphIndex2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndex(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOEvent2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx context.Context, sel ast.SelectionSet, v model.Event) graphql.Marshaler {
	return ec._Event(ctx, sel, &v)
}

func (ec *executionContext) marshalOEvent2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx context.Context, sel ast.SelectionSet, v []*model.Event) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEvent2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOEvent2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx context.Context, sel ast.SelectionSet, v *model.Event) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Event(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEventFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx context.Context, v interface{}) (model.EventFilter, error) {
	return ec.unmarshalInputEventFilter(ctx, v)
}

func (ec *executionContext) unmarshalOEventFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx context.Context, v interface{}) (*model.EventFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOEventFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOEventOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx context.Context, v interface{}) (model.EventOrder, error) {
	return ec.unmarshalInputEventOrder(ctx, v)
}

func (ec *executionContext) unmarshalOEventOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx context.Context, v interface{}) (*model.EventOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOEventOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOEventOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrderable(ctx context.Context, v interface{}) (model.EventOrderable, error) {
	var res model.EventOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOEventOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrderable(ctx context.Context, sel ast.SelectionSet, v model.EventOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOEventOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrderable(ctx context.Context, v interface{}) (*model.EventOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOEventOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOEventOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrderable(ctx context.Context, sel ast.SelectionSet, v *model.EventOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEventPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventPatch(ctx context.Context, v interface{}) (model.EventPatch, error) {
	return ec.unmarshalInputEventPatch(ctx, v)
}

func (ec *executionContext) unmarshalOEventPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventPatch(ctx context.Context, v interface{}) (*model.EventPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOEventPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOEventRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx context.Context, v interface{}) ([]*model.EventRef, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EventRef, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNEventRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFloat2float64(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOFloat2float64(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOID2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOID2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) marshalOLabel2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx context.Context, sel ast.SelectionSet, v model.Label) graphql.Marshaler {
	return ec._Label(ctx, sel, &v)
}

func (ec *executionContext) marshalOLabel2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx context.Context, sel ast.SelectionSet, v []*model.Label) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLabel2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLabel2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Label) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLabel2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLabel2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx context.Context, sel ast.SelectionSet, v *model.Label) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Label(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLabelFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx context.Context, v interface{}) (model.LabelFilter, error) {
	return ec.unmarshalInputLabelFilter(ctx, v)
}

func (ec *executionContext) unmarshalOLabelFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx context.Context, v interface{}) (*model.LabelFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLabelFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOLabelOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx context.Context, v interface{}) (model.LabelOrder, error) {
	return ec.unmarshalInputLabelOrder(ctx, v)
}

func (ec *executionContext) unmarshalOLabelOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx context.Context, v interface{}) (*model.LabelOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLabelOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOLabelOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrderable(ctx context.Context, v interface{}) (model.LabelOrderable, error) {
	var res model.LabelOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOLabelOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrderable(ctx context.Context, sel ast.SelectionSet, v model.LabelOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOLabelOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrderable(ctx context.Context, v interface{}) (*model.LabelOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLabelOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOLabelOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrderable(ctx context.Context, sel ast.SelectionSet, v *model.LabelOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLabelPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelPatch(ctx context.Context, v interface{}) (model.LabelPatch, error) {
	return ec.unmarshalInputLabelPatch(ctx, v)
}

func (ec *executionContext) unmarshalOLabelPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelPatch(ctx context.Context, v interface{}) (*model.LabelPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLabelPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOLabelRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx context.Context, v interface{}) ([]*model.LabelRef, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LabelRef, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNLabelRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMandate2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx context.Context, sel ast.SelectionSet, v model.Mandate) graphql.Marshaler {
	return ec._Mandate(ctx, sel, &v)
}

func (ec *executionContext) marshalOMandate2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx context.Context, sel ast.SelectionSet, v []*model.Mandate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMandate2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOMandate2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx context.Context, sel ast.SelectionSet, v *model.Mandate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Mandate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMandateFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx context.Context, v interface{}) (model.MandateFilter, error) {
	return ec.unmarshalInputMandateFilter(ctx, v)
}

func (ec *executionContext) unmarshalOMandateFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx context.Context, v interface{}) (*model.MandateFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOMandateFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOMandateOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx context.Context, v interface{}) (model.MandateOrder, error) {
	return ec.unmarshalInputMandateOrder(ctx, v)
}

func (ec *executionContext) unmarshalOMandateOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx context.Context, v interface{}) (*model.MandateOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOMandateOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOMandateOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrderable(ctx context.Context, v interface{}) (model.MandateOrderable, error) {
	var res model.MandateOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOMandateOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrderable(ctx context.Context, sel ast.SelectionSet, v model.MandateOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOMandateOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrderable(ctx context.Context, v interface{}) (*model.MandateOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOMandateOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOMandateOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrderable(ctx context.Context, sel ast.SelectionSet, v *model.MandateOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMandatePatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandatePatch(ctx context.Context, v interface{}) (model.MandatePatch, error) {
	return ec.unmarshalInputMandatePatch(ctx, v)
}

func (ec *executionContext) unmarshalOMandatePatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandatePatch(ctx context.Context, v interface{}) (*model.MandatePatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOMandatePatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandatePatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOMandateRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx context.Context, v interface{}) (model.MandateRef, error) {
	return ec.unmarshalInputMandateRef(ctx, v)
}

func (ec *executionContext) unmarshalOMandateRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx context.Context, v interface{}) (*model.MandateRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOMandateRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOMode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMode(ctx context.Context, v interface{}) (model.Mode, error) {
	var res model.Mode
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOMode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMode(ctx context.Context, sel ast.SelectionSet, v model.Mode) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOMode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMode(ctx context.Context, v interface{}) (*model.Mode, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOMode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMode(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOMode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐMode(ctx context.Context, sel ast.SelectionSet, v *model.Mode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalONode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v model.Node) graphql.Marshaler {
	return ec._Node(ctx, sel, &v)
}

func (ec *executionContext) marshalONode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v []*model.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalONode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalONode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v *model.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalONodeCharac2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx context.Context, sel ast.SelectionSet, v model.NodeCharac) graphql.Marshaler {
	return ec._NodeCharac(ctx, sel, &v)
}

func (ec *executionContext) marshalONodeCharac2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx context.Context, sel ast.SelectionSet, v []*model.NodeCharac) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONodeCharac2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalONodeCharac2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharac(ctx context.Context, sel ast.SelectionSet, v *model.NodeCharac) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NodeCharac(ctx, sel, v)
}

func (ec *executionContext) unmarshalONodeCharacFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx context.Context, v interface{}) (model.NodeCharacFilter, error) {
	return ec.unmarshalInputNodeCharacFilter(ctx, v)
}

func (ec *executionContext) unmarshalONodeCharacFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx context.Context, v interface{}) (*model.NodeCharacFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeCharacFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeCharacPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacPatch(ctx context.Context, v interface{}) (model.NodeCharacPatch, error) {
	return ec.unmarshalInputNodeCharacPatch(ctx, v)
}

func (ec *executionContext) unmarshalONodeCharacPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacPatch(ctx context.Context, v interface{}) (*model.NodeCharacPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeCharacPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeCharacRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx context.Context, v interface{}) (model.NodeCharacRef, error) {
	return ec.unmarshalInputNodeCharacRef(ctx, v)
}

func (ec *executionContext) unmarshalONodeCharacRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx context.Context, v interface{}) (*model.NodeCharacRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeCharacRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeCharacRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx context.Context, v interface{}) (model.NodeFilter, error) {
	return ec.unmarshalInputNodeFilter(ctx, v)
}

func (ec *executionContext) unmarshalONodeFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx context.Context, v interface{}) (*model.NodeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalONodeFragment2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx context.Context, sel ast.SelectionSet, v model.NodeFragment) graphql.Marshaler {
	return ec._NodeFragment(ctx, sel, &v)
}

func (ec *executionContext) marshalONodeFragment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx context.Context, sel ast.SelectionSet, v []*model.NodeFragment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONodeFragment2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalONodeFragment2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.NodeFragment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNodeFragment2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalONodeFragment2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx context.Context, sel ast.SelectionSet, v *model.NodeFragment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NodeFragment(ctx, sel, v)
}

func (ec *executionContext) unmarshalONodeFragmentFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx context.Context, v interface{}) (model.NodeFragmentFilter, error) {
	return ec.unmarshalInputNodeFragmentFilter(ctx, v)
}

func (ec *executionContext) unmarshalONodeFragmentFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx context.Context, v interface{}) (*model.NodeFragmentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeFragmentFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeFragmentOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx context.Context, v interface{}) (model.NodeFragmentOrder, error) {
	return ec.unmarshalInputNodeFragmentOrder(ctx, v)
}

func (ec *executionContext) unmarshalONodeFragmentOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx context.Context, v interface{}) (*model.NodeFragmentOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeFragmentOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeFragmentOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrderable(ctx context.Context, v interface{}) (model.NodeFragmentOrderable, error) {
	var res model.NodeFragmentOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalONodeFragmentOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrderable(ctx context.Context, sel ast.SelectionSet, v model.NodeFragmentOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalONodeFragmentOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrderable(ctx context.Context, v interface{}) (*model.NodeFragmentOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeFragmentOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalONodeFragmentOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrderable(ctx context.Context, sel ast.SelectionSet, v *model.NodeFragmentOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodeFragmentPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentPatch(ctx context.Context, v interface{}) (model.NodeFragmentPatch, error) {
	return ec.unmarshalInputNodeFragmentPatch(ctx, v)
}

func (ec *executionContext) unmarshalONodeFragmentPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentPatch(ctx context.Context, v interface{}) (*model.NodeFragmentPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeFragmentPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeFragmentRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx context.Context, v interface{}) (model.NodeFragmentRef, error) {
	return ec.unmarshalInputNodeFragmentRef(ctx, v)
}

func (ec *executionContext) unmarshalONodeFragmentRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRefᚄ(ctx context.Context, v interface{}) ([]*model.NodeFragmentRef, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NodeFragmentRef, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNNodeFragmentRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONodeFragmentRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx context.Context, v interface{}) (*model.NodeFragmentRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeFragmentRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeMode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, v interface{}) (model.NodeMode, error) {
	var res model.NodeMode
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalONodeMode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, sel ast.SelectionSet, v model.NodeMode) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalONodeMode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, v interface{}) (*model.NodeMode, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeMode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalONodeMode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, sel ast.SelectionSet, v *model.NodeMode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodeMode_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeModeHash(ctx context.Context, v interface{}) (model.NodeModeHash, error) {
	return ec.unmarshalInputNodeMode_hash(ctx, v)
}

func (ec *executionContext) unmarshalONodeMode_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeModeHash(ctx context.Context, v interface{}) (*model.NodeModeHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeMode_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeModeHash(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx context.Context, v interface{}) (model.NodeOrder, error) {
	return ec.unmarshalInputNodeOrder(ctx, v)
}

func (ec *executionContext) unmarshalONodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx context.Context, v interface{}) (*model.NodeOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrderable(ctx context.Context, v interface{}) (model.NodeOrderable, error) {
	var res model.NodeOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalONodeOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrderable(ctx context.Context, sel ast.SelectionSet, v model.NodeOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalONodeOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrderable(ctx context.Context, v interface{}) (*model.NodeOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalONodeOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrderable(ctx context.Context, sel ast.SelectionSet, v *model.NodeOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodePatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodePatch(ctx context.Context, v interface{}) (model.NodePatch, error) {
	return ec.unmarshalInputNodePatch(ctx, v)
}

func (ec *executionContext) unmarshalONodePatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodePatch(ctx context.Context, v interface{}) (*model.NodePatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodePatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodePatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx context.Context, v interface{}) (model.NodeRef, error) {
	return ec.unmarshalInputNodeRef(ctx, v)
}

func (ec *executionContext) unmarshalONodeRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx context.Context, v interface{}) ([]*model.NodeRef, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NodeRef, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNNodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx context.Context, v interface{}) (*model.NodeRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalONodeStats2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStats(ctx context.Context, sel ast.SelectionSet, v model.NodeStats) graphql.Marshaler {
	return ec._NodeStats(ctx, sel, &v)
}

func (ec *executionContext) marshalONodeStats2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStats(ctx context.Context, sel ast.SelectionSet, v []*model.NodeStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONodeStats2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStats(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalONodeStats2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStats(ctx context.Context, sel ast.SelectionSet, v *model.NodeStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NodeStats(ctx, sel, v)
}

func (ec *executionContext) unmarshalONodeStatsOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrder(ctx context.Context, v interface{}) (model.NodeStatsOrder, error) {
	return ec.unmarshalInputNodeStatsOrder(ctx, v)
}

func (ec *executionContext) unmarshalONodeStatsOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrder(ctx context.Context, v interface{}) (*model.NodeStatsOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeStatsOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeStatsOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrderable(ctx context.Context, v interface{}) (model.NodeStatsOrderable, error) {
	var res model.NodeStatsOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalONodeStatsOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrderable(ctx context.Context, sel ast.SelectionSet, v model.NodeStatsOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalONodeStatsOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrderable(ctx context.Context, v interface{}) (*model.NodeStatsOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeStatsOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalONodeStatsOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsOrderable(ctx context.Context, sel ast.SelectionSet, v *model.NodeStatsOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodeStatsRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsRef(ctx context.Context, v interface{}) (model.NodeStatsRef, error) {
	return ec.unmarshalInputNodeStatsRef(ctx, v)
}

func (ec *executionContext) unmarshalONodeStatsRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsRef(ctx context.Context, v interface{}) (*model.NodeStatsRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeStatsRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeStatsRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalONodeType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, v interface{}) (model.NodeType, error) {
	var res model.NodeType
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalONodeType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, sel ast.SelectionSet, v model.NodeType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalONodeType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, v interface{}) (*model.NodeType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalONodeType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, sel ast.SelectionSet, v *model.NodeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodeType_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeTypeHash(ctx context.Context, v interface{}) (model.NodeTypeHash, error) {
	return ec.unmarshalInputNodeType_hash(ctx, v)
}

func (ec *executionContext) unmarshalONodeType_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeTypeHash(ctx context.Context, v interface{}) (*model.NodeTypeHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONodeType_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeTypeHash(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOPost2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx context.Context, sel ast.SelectionSet, v model.Post) graphql.Marshaler {
	return ec._Post(ctx, sel, &v)
}

func (ec *executionContext) marshalOPost2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx context.Context, sel ast.SelectionSet, v []*model.Post) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPost2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPost2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx context.Context, sel ast.SelectionSet, v *model.Post) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Post(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPostFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx context.Context, v interface{}) (model.PostFilter, error) {
	return ec.unmarshalInputPostFilter(ctx, v)
}

func (ec *executionContext) unmarshalOPostFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx context.Context, v interface{}) (*model.PostFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPostFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOPostOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx context.Context, v interface{}) (model.PostOrder, error) {
	return ec.unmarshalInputPostOrder(ctx, v)
}

func (ec *executionContext) unmarshalOPostOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx context.Context, v interface{}) (*model.PostOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPostOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOPostOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrderable(ctx context.Context, v interface{}) (model.PostOrderable, error) {
	var res model.PostOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOPostOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrderable(ctx context.Context, sel ast.SelectionSet, v model.PostOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOPostOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrderable(ctx context.Context, v interface{}) (*model.PostOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPostOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOPostOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrderable(ctx context.Context, sel ast.SelectionSet, v *model.PostOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPostPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostPatch(ctx context.Context, v interface{}) (model.PostPatch, error) {
	return ec.unmarshalInputPostPatch(ctx, v)
}

func (ec *executionContext) unmarshalOPostPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostPatch(ctx context.Context, v interface{}) (*model.PostPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPostPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORoleType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx context.Context, v interface{}) (model.RoleType, error) {
	var res model.RoleType
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalORoleType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx context.Context, sel ast.SelectionSet, v model.RoleType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalORoleType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx context.Context, v interface{}) (*model.RoleType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORoleType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORoleType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx context.Context, sel ast.SelectionSet, v *model.RoleType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORoleType_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleTypeHash(ctx context.Context, v interface{}) (model.RoleTypeHash, error) {
	return ec.unmarshalInputRoleType_hash(ctx, v)
}

func (ec *executionContext) unmarshalORoleType_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleTypeHash(ctx context.Context, v interface{}) (*model.RoleTypeHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORoleType_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleTypeHash(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOSharedNode2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNode(ctx context.Context, sel ast.SelectionSet, v model.SharedNode) graphql.Marshaler {
	return ec._SharedNode(ctx, sel, &v)
}

func (ec *executionContext) marshalOSharedNode2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNode(ctx context.Context, sel ast.SelectionSet, v []*model.SharedNode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSharedNode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSharedNode2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNode(ctx context.Context, sel ast.SelectionSet, v *model.SharedNode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SharedNode(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSharedNodeOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrder(ctx context.Context, v interface{}) (model.SharedNodeOrder, error) {
	return ec.unmarshalInputSharedNodeOrder(ctx, v)
}

func (ec *executionContext) unmarshalOSharedNodeOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrder(ctx context.Context, v interface{}) (*model.SharedNodeOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOSharedNodeOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOSharedNodeOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrderable(ctx context.Context, v interface{}) (model.SharedNodeOrderable, error) {
	var res model.SharedNodeOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOSharedNodeOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrderable(ctx context.Context, sel ast.SelectionSet, v model.SharedNodeOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOSharedNodeOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrderable(ctx context.Context, v interface{}) (*model.SharedNodeOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOSharedNodeOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOSharedNodeOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeOrderable(ctx context.Context, sel ast.SelectionSet, v *model.SharedNodeOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSharedNodeRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeRef(ctx context.Context, v interface{}) (model.SharedNodeRef, error) {
	return ec.unmarshalInputSharedNodeRef(ctx, v)
}

func (ec *executionContext) unmarshalOSharedNodeRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeRef(ctx context.Context, v interface{}) (*model.SharedNodeRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOSharedNodeRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐSharedNodeRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOStringFullTextFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx context.Context, v interface{}) (model.StringFullTextFilter, error) {
	return ec.unmarshalInputStringFullTextFilter(ctx, v)
}

func (ec *executionContext) unmarshalOStringFullTextFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx context.Context, v interface{}) (*model.StringFullTextFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOStringFullTextFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOStringHashFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx context.Context, v interface{}) (model.StringHashFilter, error) {
	return ec.unmarshalInputStringHashFilter(ctx, v)
}

func (ec *executionContext) unmarshalOStringHashFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx context.Context, v interface{}) (*model.StringHashFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOStringHashFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOStringHashFilter_StringRegExpFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx context.Context, v interface{}) (model.StringHashFilterStringRegExpFilter, error) {
	return ec.unmarshalInputStringHashFilter_StringRegExpFilter(ctx, v)
}

func (ec *executionContext) unmarshalOStringHashFilter_StringRegExpFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx context.Context, v interface{}) (*model.StringHashFilterStringRegExpFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOStringHashFilter_StringRegExpFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOStringHashFilter_StringTermFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringTermFilter(ctx context.Context, v interface{}) (model.StringHashFilterStringTermFilter, error) {
	return ec.unmarshalInputStringHashFilter_StringTermFilter(ctx, v)
}

func (ec *executionContext) unmarshalOStringHashFilter_StringTermFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringTermFilter(ctx context.Context, v interface{}) (*model.StringHashFilterStringTermFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOStringHashFilter_StringTermFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringTermFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOStringTermFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringTermFilter(ctx context.Context, v interface{}) (model.StringTermFilter, error) {
	return ec.unmarshalInputStringTermFilter(ctx, v)
}

func (ec *executionContext) unmarshalOStringTermFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringTermFilter(ctx context.Context, v interface{}) (*model.StringTermFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOStringTermFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringTermFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOTension2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx context.Context, sel ast.SelectionSet, v model.Tension) graphql.Marshaler {
	return ec._Tension(ctx, sel, &v)
}

func (ec *executionContext) marshalOTension2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx context.Context, sel ast.SelectionSet, v []*model.Tension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTension2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTension2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Tension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTension2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTension2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx context.Context, sel ast.SelectionSet, v *model.Tension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tension(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTensionAction2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx context.Context, v interface{}) (model.TensionAction, error) {
	var res model.TensionAction
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOTensionAction2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx context.Context, sel ast.SelectionSet, v model.TensionAction) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOTensionAction2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx context.Context, v interface{}) (*model.TensionAction, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionAction2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOTensionAction2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx context.Context, sel ast.SelectionSet, v *model.TensionAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTensionEvent2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, v interface{}) (model.TensionEvent, error) {
	var res model.TensionEvent
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOTensionEvent2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, sel ast.SelectionSet, v model.TensionEvent) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOTensionEvent2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, v interface{}) (*model.TensionEvent, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionEvent2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOTensionEvent2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, sel ast.SelectionSet, v *model.TensionEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTensionEvent_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventHash(ctx context.Context, v interface{}) (model.TensionEventHash, error) {
	return ec.unmarshalInputTensionEvent_hash(ctx, v)
}

func (ec *executionContext) unmarshalOTensionEvent_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventHash(ctx context.Context, v interface{}) (*model.TensionEventHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionEvent_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventHash(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOTensionFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx context.Context, v interface{}) (model.TensionFilter, error) {
	return ec.unmarshalInputTensionFilter(ctx, v)
}

func (ec *executionContext) unmarshalOTensionFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx context.Context, v interface{}) (*model.TensionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOTensionOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx context.Context, v interface{}) (model.TensionOrder, error) {
	return ec.unmarshalInputTensionOrder(ctx, v)
}

func (ec *executionContext) unmarshalOTensionOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx context.Context, v interface{}) (*model.TensionOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOTensionOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrderable(ctx context.Context, v interface{}) (model.TensionOrderable, error) {
	var res model.TensionOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOTensionOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrderable(ctx context.Context, sel ast.SelectionSet, v model.TensionOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOTensionOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrderable(ctx context.Context, v interface{}) (*model.TensionOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOTensionOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrderable(ctx context.Context, sel ast.SelectionSet, v *model.TensionOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTensionPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionPatch(ctx context.Context, v interface{}) (model.TensionPatch, error) {
	return ec.unmarshalInputTensionPatch(ctx, v)
}

func (ec *executionContext) unmarshalOTensionPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionPatch(ctx context.Context, v interface{}) (*model.TensionPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOTensionRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx context.Context, v interface{}) (model.TensionRef, error) {
	return ec.unmarshalInputTensionRef(ctx, v)
}

func (ec *executionContext) unmarshalOTensionRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx context.Context, v interface{}) ([]*model.TensionRef, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.TensionRef, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNTensionRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTensionRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx context.Context, v interface{}) (*model.TensionRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOTensionStatus2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, v interface{}) (model.TensionStatus, error) {
	var res model.TensionStatus
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOTensionStatus2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, sel ast.SelectionSet, v model.TensionStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOTensionStatus2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, v interface{}) (*model.TensionStatus, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionStatus2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOTensionStatus2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, sel ast.SelectionSet, v *model.TensionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTensionStatus_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatusHash(ctx context.Context, v interface{}) (model.TensionStatusHash, error) {
	return ec.unmarshalInputTensionStatus_hash(ctx, v)
}

func (ec *executionContext) unmarshalOTensionStatus_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatusHash(ctx context.Context, v interface{}) (*model.TensionStatusHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionStatus_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatusHash(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOTensionType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, v interface{}) (model.TensionType, error) {
	var res model.TensionType
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOTensionType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, sel ast.SelectionSet, v model.TensionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOTensionType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, v interface{}) (*model.TensionType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionType2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOTensionType2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, sel ast.SelectionSet, v *model.TensionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTensionType_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionTypeHash(ctx context.Context, v interface{}) (model.TensionTypeHash, error) {
	return ec.unmarshalInputTensionType_hash(ctx, v)
}

func (ec *executionContext) unmarshalOTensionType_hash2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionTypeHash(ctx context.Context, v interface{}) (*model.TensionTypeHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTensionType_hash2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionTypeHash(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUpdateBlobPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateBlobPayload(ctx context.Context, sel ast.SelectionSet, v model.UpdateBlobPayload) graphql.Marshaler {
	return ec._UpdateBlobPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOUpdateBlobPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateBlobPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateBlobPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateBlobPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateCommentPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateCommentPayload(ctx context.Context, sel ast.SelectionSet, v model.UpdateCommentPayload) graphql.Marshaler {
	return ec._UpdateCommentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOUpdateCommentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateCommentPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateCommentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateCommentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateEventPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventPayload(ctx context.Context, sel ast.SelectionSet, v model.UpdateEventPayload) graphql.Marshaler {
	return ec._UpdateEventPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOUpdateEventPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateEventPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateEventPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateLabelPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateLabelPayload(ctx context.Context, sel ast.SelectionSet, v model.UpdateLabelPayload) graphql.Marshaler {
	return ec._UpdateLabelPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOUpdateLabelPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateLabelPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateLabelPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateLabelPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateMandatePayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateMandatePayload(ctx context.Context, sel ast.SelectionSet, v model.UpdateMandatePayload) graphql.Marshaler {
	return ec._UpdateMandatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOUpdateMandatePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateMandatePayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateMandatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateMandatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateNodeCharacPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeCharacPayload(ctx context.Context, sel ast.SelectionSet, v model.UpdateNodeCharacPayload) graphql.Marshaler {
	return ec._UpdateNodeCharacPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOUpdateNodeCharacPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeCharacPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateNodeCharacPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateNodeCharacPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateNodeFragmentPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, v model.UpdateNodeFragmentPayload) graphql.Marshaler {
	return ec._UpdateNodeFragmentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOUpdateNodeFragmentPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateNodeFragmentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateNodeFragmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateNodePayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodePayload(ctx context.Context, sel ast.SelectionSet, v model.UpdateNodePayload) graphql.Marshaler {
	return ec._UpdateNodePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOUpdateNodePayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodePayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateNodePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateNodePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdatePostPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePostPayload(ctx context.Context, sel ast.SelectionSet, v model.UpdatePostPayload) graphql.Marshaler {
	return ec._UpdatePostPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOUpdatePostPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePostPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdatePostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdatePostPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateTensionPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateTensionPayload(ctx context.Context, sel ast.SelectionSet, v model.UpdateTensionPayload) graphql.Marshaler {
	return ec._UpdateTensionPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOUpdateTensionPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateTensionPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateTensionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateTensionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateUserPayload2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserPayload(ctx context.Context, sel ast.SelectionSet, v model.UpdateUserPayload) graphql.Marshaler {
	return ec._UpdateUserPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOUpdateUserPayload2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateUserPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateUserPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUser2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalOUser2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUser2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUser2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx context.Context, v interface{}) (model.UserFilter, error) {
	return ec.unmarshalInputUserFilter(ctx, v)
}

func (ec *executionContext) unmarshalOUserFilter2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx context.Context, v interface{}) (*model.UserFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserFilter2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOUserOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx context.Context, v interface{}) (model.UserOrder, error) {
	return ec.unmarshalInputUserOrder(ctx, v)
}

func (ec *executionContext) unmarshalOUserOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx context.Context, v interface{}) (*model.UserOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOUserOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrderable(ctx context.Context, v interface{}) (model.UserOrderable, error) {
	var res model.UserOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOUserOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrderable(ctx context.Context, sel ast.SelectionSet, v model.UserOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOUserOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrderable(ctx context.Context, v interface{}) (*model.UserOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUserOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrderable(ctx context.Context, sel ast.SelectionSet, v *model.UserOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserPatch(ctx context.Context, v interface{}) (model.UserPatch, error) {
	return ec.unmarshalInputUserPatch(ctx, v)
}

func (ec *executionContext) unmarshalOUserPatch2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserPatch(ctx context.Context, v interface{}) (*model.UserPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserPatch2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOUserRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx context.Context, v interface{}) (model.UserRef, error) {
	return ec.unmarshalInputUserRef(ctx, v)
}

func (ec *executionContext) unmarshalOUserRef2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx context.Context, v interface{}) ([]*model.UserRef, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.UserRef, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx context.Context, v interface{}) (*model.UserRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUserRights2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx context.Context, sel ast.SelectionSet, v model.UserRights) graphql.Marshaler {
	return ec._UserRights(ctx, sel, &v)
}

func (ec *executionContext) marshalOUserRights2ᚕᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx context.Context, sel ast.SelectionSet, v []*model.UserRights) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserRights2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUserRights2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx context.Context, sel ast.SelectionSet, v *model.UserRights) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserRights(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserRightsOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx context.Context, v interface{}) (model.UserRightsOrder, error) {
	return ec.unmarshalInputUserRightsOrder(ctx, v)
}

func (ec *executionContext) unmarshalOUserRightsOrder2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx context.Context, v interface{}) (*model.UserRightsOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserRightsOrder2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOUserRightsOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrderable(ctx context.Context, v interface{}) (model.UserRightsOrderable, error) {
	var res model.UserRightsOrderable
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOUserRightsOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrderable(ctx context.Context, sel ast.SelectionSet, v model.UserRightsOrderable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOUserRightsOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrderable(ctx context.Context, v interface{}) (*model.UserRightsOrderable, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserRightsOrderable2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrderable(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUserRightsOrderable2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrderable(ctx context.Context, sel ast.SelectionSet, v *model.UserRightsOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserRightsRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx context.Context, v interface{}) (model.UserRightsRef, error) {
	return ec.unmarshalInputUserRightsRef(ctx, v)
}

func (ec *executionContext) unmarshalOUserRightsRef2ᚖzerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx context.Context, v interface{}) (*model.UserRightsRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserRightsRef2zerogovᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
